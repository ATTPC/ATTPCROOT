#include "TString.h"
#include "TFile.h"
#include "TTree.h"
#include "TH2.h"
#include "TH1.h"
#include "TH3.h"
#include "TClonesArray.h"
#include "TCanvas.h"
#include "TMath.h"
#include "TClonesArray.h"
#include "TStyle.h"
#include "TTreeReader.h"
#include "TChain.h"
#include "TFileCollection.h"
#include "/home/s1257/fair_install_ROOT6/ATTPCROOT/include/ATEvent.hh"
#include "/home/s1257/fair_install_ROOT6/ATTPCROOT/include/ATHit.hh"
#include "/home/s1257/fair_install_ROOT6/ATTPCROOT/include/ATProtoEvent.hh"
#include "/home/s1257/fair_install_ROOT6/ATTPCROOT/include/ATHoughSpaceLine.hh"
#include "/home/s1257/fair_install_ROOT6/ATTPCROOT/include/ATHoughSpaceCircle.hh"

#include <ios>    
#include <iostream>
#include <istream>
#include <limits>
   

std::pair<Double_t,Double_t> GetHoughParameters(TH2F* hist);
void myflush ( std::istream& in );
void mypause();

void run_ana_8He(Int_t num_ev=100, Int_t file_ini=0, Int_t file_end=1, Int_t runnum=571, Bool_t debug=kFALSE)
{

	    gStyle->SetCanvasPreferGL(1);
            gStyle->SetPalette(1);

	    TCanvas *c1 = new TCanvas("c1","c1",200,10,1000,1000);
	    c1->Divide(2,2);
	    TCanvas *c2 = new TCanvas("c2","c2",200,10,1000,1000);
	    c2->Divide(2,3);
            TCanvas *c3 = new TCanvas("c3","c3",200,10,1000,1000);
	    c3->Divide(2,1);

	    TH2F* fQuadrant[4];
	     for (Int_t i=0;i<4;i++){
			 fQuadrant[i] = new TH2F(Form("fQuadrant[%i]",i),Form("fQuadrant%i",i),500,0,3.15,2500,0,1000);
			 fQuadrant[i]->SetFillColor(2);
		}


	    TF1 *HoughFit[4];

            TH2D* Q02_Kine = new TH2D("Q02_Kine","Q02_Kine",1000,0,180,1000,0,180);
	    Q02_Kine->SetMarkerColor(2);
	    Q02_Kine->SetMarkerStyle(20);
	    Q02_Kine->SetMarkerSize(0.7);
	    TH2D* Q13_Kine = new TH2D("Q13_Kine","Q13_Kine",1000,0,180,1000,0,180);
	    Q13_Kine->SetMarkerColor(2);
	    Q13_Kine->SetMarkerStyle(20);
	    Q13_Kine->SetMarkerSize(0.7);

	    TH2D* Q02_Kine_buff = new TH2D("Q02_Kine_buff","Q02_Kine_buff",1000,0,180,1000,0,180);
	    Q02_Kine_buff->SetMarkerColor(4);
	    Q02_Kine_buff->SetMarkerStyle(20);
            Q02_Kine_buff->SetMarkerSize(0.7);
	    TH2D* Q13_Kine_buff = new TH2D("Q13_Kine_buff","Q13_Kine_buff",1000,0,180,1000,0,180);
	    Q13_Kine_buff->SetMarkerColor(4);
	    Q13_Kine_buff->SetMarkerStyle(20);
	    Q13_Kine_buff->SetMarkerSize(0.7);


	    TH2F* fQuadHist[4];
		for (Int_t i=0;i<4;i++){
			 fQuadHist[i] = new TH2F(Form("glfQuadHist[%i]",i),Form("fQuadHist%i",i),100,0,130,200,0,500);
			 fQuadHist[i]->SetFillColor(2);
		}

	
	    TChain *chain = new TChain("cbmsim");
	    TFileCollection *filecol = new TFileCollection();
	    TString FileNameHead_num; 
	    TString FileNameHead_chain;
	
        for(Int_t i=0;i<=file_end;i++){
				if(i<10) FileNameHead_num.Form("%i_000%i",runnum,i);
				else if(i<100) FileNameHead_num.Form("%i_00%i",runnum,i);
				else if(i<1000) FileNameHead_num.Form("%i_0%i",runnum,i);	
				FileNameHead_chain = "../run"+FileNameHead_num+".root";
				std::cout<<" File : "<<FileNameHead_chain<<" added"<<std::endl;
				//filecol->Add(FileNameHead_chain);
				chain->Add(FileNameHead_chain);
		


	   

	    TString FileNameHead = "../run571_0003";
	    TString FileNameTail = ".root";
	    TString FileName     = FileNameHead + FileNameTail;
	    //TString outFileNameHead = "data/";
	    //TString outFileNameTail = ".root";
	    //TString outFileName     = outFileNameHead + reactionName + outFileNameTail;

	   // TFile* file = new TFile(FileName.Data(),"READ");
	    TFile* file = new TFile(FileNameHead_chain.Data(),"READ");
            TTree* tree = (TTree*) file -> Get("cbmsim");
	    Int_t nEvents = tree -> GetEntriesFast();
	    std::cout<<" Number of events : "<<nEvents<<std::endl;

	    TTreeReader Reader1("cbmsim", file);
	    TTreeReaderValue<TClonesArray> eventArray(Reader1, "ATEventH");
	    TTreeReaderValue<TClonesArray> protoeventArray(Reader1, "ATProtoEvent");
	    TTreeReaderValue<TClonesArray> houghArray(Reader1, "ATHough");
	    Bool_t fIsLinear=kFALSE;
	    Bool_t fIsCircular=kFALSE;

	    Int_t value;
	    Int_t nEve=0;

		while (Reader1.Next() && nEve<num_ev) {
		//for(Int_t evn=0;evn<num_ev;evn++){
			nEve++;
			mypause();
			Q02_Kine_buff->Reset(0);
			Q13_Kine_buff->Reset(0);		
			for (Int_t i=0;i<4;i++) fQuadHist[i]->Reset();
			ATEvent* event = (ATEvent*) eventArray->At(0);
			Int_t nHits = event->GetNumHits();
			//std::cout<<" ==================================================================================="<<std::endl;
			if(nEve%100==0) std::cout<<" Event number : "<<event->GetEventID()<<" - Number of Hits : "<<nHits<<std::endl;

			   ATHoughSpaceLine* fHoughSpaceLine_buff;
                           ATHoughSpaceCircle* fHoughSpaceCircle_buff;
			   if( (fHoughSpaceLine_buff = dynamic_cast<ATHoughSpaceLine*> (houghArray->At(0)) )){
				//std::cout<<" Linear Hough Space Found!"<<std::endl;
				fIsLinear=kTRUE;
     			   }else if( (fHoughSpaceCircle_buff = dynamic_cast<ATHoughSpaceCircle*> (houghArray->At(0)) )){
				//std::cout<<"Circular Hough Space Found!"<<std::endl;
				fIsCircular=kTRUE;
                           }else std::cout<<"Hough Space Type NOT Found!"<<std::endl;
			   std::vector<Double_t> Angle;
			
			   ATProtoEvent* protoevent = (ATProtoEvent*) protoeventArray->At(0);
			   std::vector<ATProtoQuadrant> quadrantArray;
     			   ATProtoQuadrant* quadrant;
			   std::vector<Int_t> qNumHits;
			   std::vector<Double_t> qRad;
			  
				    
				     for (Int_t i=0;i<4;i++){
					//fQuadrant[i]  = fHoughSpaceLine_buff->GetHoughQuadrant(i); //Obsolete
					quadrant = &protoevent->GetQuadrantArray()->at(i);
            				qNumHits.push_back(quadrant->GetNumHits());
					Int_t qNumHit = quadrant->GetNumHits();          		            		  
					
					

					
					Double_t rad_max=0.0;

							for(Int_t j=0;j<qNumHit;j++){
								ATHit* qhit = quadrant->GetHit(j);
								TVector3 position = qhit->GetPosition();
								Double_t radius = TMath::Sqrt( TMath::Power(position.X(),2) + TMath::Power(position.Y(),2) );
								if(radius>rad_max) rad_max=radius;
								fQuadHist[i]->Fill(radius,position.Z(),qhit->GetCharge());

							}//NumHit loop

						qRad.push_back(rad_max); 
							

				     }// Quadrant Loop

					std::vector<std::pair<Double_t,Double_t>> HoughPar = fHoughSpaceLine_buff->GetHoughPar();
					
					
					      for(Int_t i=0;i<HoughPar.size();i++){ // Move to quadrant loop
						
					        std::cout<<" ------ Hough Parameters for Quadrant : "<<i<<std::endl;
					        std::cout<<" Angle : "<<180-HoughPar.at(i).first*180/TMath::Pi()<<std::endl;
			  		        std::cout<<" Distance : "<<HoughPar.at(i).second<<std::endl;
						Angle.push_back(180-HoughPar.at(i).first*180/TMath::Pi());
						HoughFit[i] =new TF1(Form("HoughFit%i",i)," (  (-TMath::Cos([0])/TMath::Sin([0]))*x ) + [1]/TMath::Sin([0])",0,qRad.at(i));
						HoughFit[i]->SetParameter(0,HoughPar.at(i).first);
						HoughFit[i]->SetParameter(1,HoughPar.at(i).second);
						HoughFit[i]->SetLineColor(kRed);
					      }


					/*std::cout<<" Radius Q0 : "<<qRad.at(0)<<std::endl;
					std::cout<<" Radius Q1 : "<<qRad.at(1)<<std::endl;
					std::cout<<" Radius Q2 : "<<qRad.at(2)<<std::endl;
					std::cout<<" Radius Q3 : "<<qRad.at(3)<<std::endl;*/


					if((qRad.at(0)>5 && qRad.at(2)>5)  && (qNumHits.at(0)>5 && qNumHits.at(2)>5)) {Q02_Kine->Fill(Angle.at(0),Angle.at(2));  Q02_Kine_buff->Fill(Angle.at(0),Angle.at(2));}
					if((qRad.at(1)>5 && qRad.at(3)>5)  && (qNumHits.at(1)>5 && qNumHits.at(3)>5) ) {Q13_Kine->Fill(Angle.at(1),Angle.at(3)); Q13_Kine_buff->Fill(Angle.at(1),Angle.at(3));}


				/*for(Int_t iHit=0; iHit<nHits; iHit++)
  					{

    						ATHit hit = event->GetHitArray()->at(iHit);

					}*/


				c1->cd(1);
				fQuadHist[0]->Draw();
				HoughFit[0]->Draw("SAME");
				
				c1->cd(2);
				fQuadHist[1]->Draw();
				HoughFit[1]->Draw("SAME");
				
				c1->cd(3);
				fQuadHist[2]->Draw();
				HoughFit[2]->Draw("SAME");
				
				c1->cd(4);
				fQuadHist[3]->Draw();
				HoughFit[3]->Draw("SAME");
				
				c1->Modified();
				c1->Update();
			

				
				c2->cd(1);	
				fQuadHist[0]->Draw("cont4z");
				c2->cd(2);
				fQuadHist[1]->Draw("cont4z");
				c2->cd(3);
				fQuadHist[2]->Draw("cont4z");
				c2->cd(4);
				fQuadHist[3]->Draw("cont4z");
				c2->cd(5);
				Q02_Kine->Draw("");
				Q02_Kine_buff->Draw("SAME");
				c2->cd(6);
				Q13_Kine->Draw("");
				Q13_Kine_buff->Draw("SAME");
				c2->Modified();
				c2->Update();

		


				/*c1->cd(1); //Obsolete
				fQuadrant[0]->Draw("zcol");
				c1->cd(2);
				fQuadrant[1]->Draw("zcol");
				c1->cd(3);
				fQuadrant[2]->Draw("zcol");
				c1->cd(4);
				fQuadrant[3]->Draw("zcol");
				c1->Modified();
				c1->Update();	*/	
	
				//myflush ( std::cin );
  				//mypause();
  				//std::cin.get();


		}//While

	}//for files


		

				/*c3->cd(1);
				Q02_Kine->Draw("");
				c3->cd(2);
				Q13_Kine->Draw("");
				*/
			    
				


				
				

}

/*std::pair<Double_t,Double_t> GetHoughParameters(TH2F* hist){

		std::pair<Double_t,Double_t> HoughPar;
		Int_t locmaxx,locmaxy,locmaxz;
                hist->GetMaximumBin(locmaxx,locmaxy,locmaxz);
                Double_t xpos = hist->GetXaxis()->GetBinCenter(locmaxx);
                Double_t ypos = hist->GetYaxis()->GetBinCenter(locmaxy);
		//std::cout<<" X Hough Position : "<<xpos<<std::endl;
		//std::cout<<" Y Hough Position : "<<ypos<<std::endl;
		HoughPar.first= xpos;
		HoughPar.second= ypos;
		return HoughPar;

}*/

void myflush ( std::istream& in )
{
  in.ignore ( std::numeric_limits<std::streamsize>::max(), '\n' );
  in.clear();
}

void mypause() 
{ 
  std::cout<<"Press [Enter] to continue . . .";
  std::cin.get();
} 



 


