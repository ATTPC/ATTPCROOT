//
// File generated by /Users/yassidayyad/fair_install/FairSoftInst/bin/rootcint at Fri Mar  6 16:10:43 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIUsersdIyassidayyaddIfair_installdIATTPCROOT_Mar_devdIbuilddIfairtoolsdIG__FairToolsDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__FairToolsDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void FairLogger_ShowMembers(void *obj, TMemberInspector &R__insp);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairLogger*)
   {
      ::FairLogger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairLogger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairLogger", ::FairLogger::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/fairtools/FairLogger.h", 82,
                  typeid(::FairLogger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairLogger::Dictionary, isa_proxy, 4,
                  sizeof(::FairLogger) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairLogger*)
   {
      return GenerateInitInstanceLocal((::FairLogger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairLogger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr FairLogger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairLogger::Class_Name()
{
   return "FairLogger";
}

//______________________________________________________________________________
const char *FairLogger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLogger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairLogger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLogger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairLogger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLogger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairLogger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLogger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void FairLogger::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairLogger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairLogger::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairLogger::Class(),this);
   }
}

//______________________________________________________________________________
void FairLogger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairLogger.
      TClass *R__cl = ::FairLogger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogFileName", &fLogFileName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogToScreen", &fLogToScreen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogToFile", &fLogToFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogColored", &fLogColored);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogFileLevel", &fLogFileLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogScreenLevel", &fLogScreenLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogVerbosityLevel", &fLogVerbosityLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufferSize", &fBufferSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufferSizeNeeded", &fBufferSizeNeeded);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDynamicBuffer", (void*)&fDynamicBuffer);
      R__insp.InspectMember("vector<char>", (void*)&fDynamicBuffer, "fDynamicBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBufferPointer", &fBufferPointer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeBuffer[80]", fTimeBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinLogLevel", &fMinLogLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLevel", &fLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fScreenStream", &fScreenStream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileStream", &fFileStream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNullStream", &fNullStream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogFileOpen", &fLogFileOpen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsNewLine", &fIsNewLine);
      R__insp.GenericShowMembers("basic_ostream<char,char_traits<char> >", ( ::basic_ostream<char,char_traits<char> > *) (this ), false);
}

namespace ROOTDict {
} // end of namespace ROOTDict for class ::FairLogger

namespace ROOTDict {
   void vectorlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEchargR_Dictionary();
   static void *new_vectorlEchargR(void *p = 0);
   static void *newArray_vectorlEchargR(Long_t size, void *p);
   static void delete_vectorlEchargR(void *p);
   static void deleteArray_vectorlEchargR(void *p);
   static void destruct_vectorlEchargR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<char>*)
   {
      vector<char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<char>", -2, "vector.dll", 0,
                  typeid(vector<char>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<char>) );
      instance.SetNew(&new_vectorlEchargR);
      instance.SetNewArray(&newArray_vectorlEchargR);
      instance.SetDelete(&delete_vectorlEchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEchargR);
      instance.SetDestructor(&destruct_vectorlEchargR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEchargR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<char>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char> : new vector<char>;
   }
   static void *newArray_vectorlEchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char>[nElements] : new vector<char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEchargR(void *p) {
      delete ((vector<char>*)p);
   }
   static void deleteArray_vectorlEchargR(void *p) {
      delete [] ((vector<char>*)p);
   }
   static void destruct_vectorlEchargR(void *p) {
      typedef vector<char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<char>

/********************************************************
* /Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/build/fairtools/G__FairToolsDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__FairToolsDict();

extern "C" void G__set_cpp_environmentG__FairToolsDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("FairLogger.h");
  G__cpp_reset_tagtableG__FairToolsDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__FairToolsDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FairLogger */
static int G__G__FairToolsDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLogger::GetLogger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogToScreen((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogToFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetColoredLog((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogFileLevel((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogScreenLevel((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetLogVerbosityLevel((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairLogger*) G__getstructoffset())->IsLogNeeded((FairLogLevel) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Fatal: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Fatal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Error: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Error((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Warning: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Warning((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Info: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Info((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Debug: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Debug((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Debug1: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Debug1((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Debug2: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Debug2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Debug3: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Debug3((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Debug4: more than 56 var args\n");
   }
      ((FairLogger*) G__getstructoffset())->Debug4((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairLogger& obj = ((FairLogger*) G__getstructoffset())->GetOutputStream((FairLogLevel) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((FairLogger*) G__getstructoffset())->GetNullStream((FairLogLevel) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->SetScreenStreamToCerr((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairLogger& obj = ((FairLogger*) G__getstructoffset())->operator<<((std::ios_base& (*) (std::ios_base&)) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = FairLogger::endl(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = FairLogger::flush(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLogger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLogger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairLogger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairLogger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairLogger*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLogger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLogger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLogger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLogger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairToolsDict_168_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLogger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FairLogger */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__FairToolsDict {
 public:
  G__Sizep2memfuncG__FairToolsDict(): p(&G__Sizep2memfuncG__FairToolsDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__FairToolsDict::*p)();
};

size_t G__get_sizep2memfuncG__FairToolsDict()
{
  G__Sizep2memfuncG__FairToolsDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */
static long G__2vbo_FairLogger_basic_ioslEcharcOchar_traitslEchargRsPgR_1(long pobject) {
  FairLogger *G__Lderived=(FairLogger*)pobject;
  basic_ios<char,char_traits<char> > *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_FairLogger_ios_base_2(long pobject) {
  FairLogger *G__Lderived=(FairLogger*)pobject;
  ios_base *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}


/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__FairToolsDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger))) {
     FairLogger *G__Lderived;
     G__Lderived=(FairLogger*)0x1000;
     {
       basic_ostream<char,char_traits<char> > *G__Lpbase=(basic_ostream<char,char_traits<char> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger),G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger),G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR),(long)G__2vbo_FairLogger_basic_ioslEcharcOchar_traitslEchargRsPgR_1,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger),G__get_linked_tagnum(&G__G__FairToolsDictLN_ios_base),(long)G__2vbo_FairLogger_ios_base_2,1,6);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__FairToolsDict() {

   /* Setting up typedef entry */
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("std::ios_base& (*) (std::ios_base&)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FairLogger */
static void G__setup_memvarFairLogger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger));
   { FairLogger *p; p=(FairLogger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger),-1,-2,4,"instance=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,4,"fLogFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLogToScreen=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLogToFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLogColored=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogLevel),-1,-1,4,"fLogFileLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogLevel),-1,-1,4,"fLogScreenLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogVerbosityLevel),-1,-1,4,"fLogVerbosityLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufferSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufferSizeNeeded=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<char>"),-1,4,"fDynamicBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"fBufferPointer=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,4,"fgkTimeBufferLength=80LL",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"fTimeBuffer[80]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogLevel),-1,-1,4,"fMinLogLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogLevel),-1,-1,4,"fLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ostream"),-1,4,"fScreenStream=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ostream"),-1,4,"fFileStream=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ostream"),-1,4,"fNullStream=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLogFileOpen=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsNewLine=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__FairToolsDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFairLogger(void) {
   /* FairLogger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger));
   G__memfunc_setup("GetLogger",896,G__G__FairToolsDict_168_0_1, 85, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairLogger* (*)())(&FairLogger::GetLogger) ), 0);
   G__memfunc_setup("SetLogFileName",1359,G__G__FairToolsDict_168_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogToScreen",1393,G__G__FairToolsDict_168_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - log1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogToFile",1169,G__G__FairToolsDict_168_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - log1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColoredLog",1302,G__G__FairToolsDict_168_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - log1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogFileLevel",1478,G__G__FairToolsDict_168_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogScreenLevel",1702,G__G__FairToolsDict_168_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogVerbosityLevel",2061,G__G__FairToolsDict_168_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - vlevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLogNeeded",1059,G__G__FairToolsDict_168_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'FairLogLevel' - 0 - logLevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fatal",488,G__G__FairToolsDict_168_0_10, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Error",522,G__G__FairToolsDict_168_0_11, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Warning",726,G__G__FairToolsDict_168_0_12, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Info",396,G__G__FairToolsDict_168_0_13, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Debug",487,G__G__FairToolsDict_168_0_14, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Debug1",536,G__G__FairToolsDict_168_0_15, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Debug2",537,G__G__FairToolsDict_168_0_16, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Debug3",538,G__G__FairToolsDict_168_0_17, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Debug4",539,G__G__FairToolsDict_168_0_18, 121, -1, -1, 0, 4, 8, 1, 0, 
"C - - 10 - file C - - 10 - line "
"C - - 10 - func C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputStream",1565,G__G__FairToolsDict_168_0_19, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 1, 4, 1, 1, 0, 
"i 'FairLogLevel' - 0 - level C - - 10 - file "
"C - - 10 - line C - - 10 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNullStream",1319,G__G__FairToolsDict_168_0_20, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 0, "i 'FairLogLevel' - 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScreenStreamToCerr",2119,G__G__FairToolsDict_168_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - errorStream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairToolsDict_168_0_22, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 1, 1, 1, 1, 0, "1 - 'std::ios_base& (*) (std::ios_base&)' 0 - manip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endl",419,G__G__FairToolsDict_168_0_23, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 3, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&))(&FairLogger::endl) ), 0);
   G__memfunc_setup("flush",546,G__G__FairToolsDict_168_0_24, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 3, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&))(&FairLogger::flush) ), 0);
   G__memfunc_setup("FairLogger",994,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLogger",994,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 0, 1, 1, 4, 0, "u 'FairLogger' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger), -1, 0, 1, 1, 4, 0, "u 'FairLogger' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"i 'FairLogLevel' - 0 - level C - - 10 - file "
"C - - 10 - line C - - 10 - - "
"C - - 10 - format u 'va_list' - 0 - arglist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogFatalMessage",1487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - strm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenLogFile",1076,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseLogFile",1176,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertToLogLevel",1726,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogLevel), -1, 0, 1, 1, 4, 8, "C - - 10 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertToLogVerbosityLevel",2693,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogVerbosityLevel), -1, 0, 1, 1, 4, 8, "C - - 10 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinLogLevel",1386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertLogLevelToString",2357,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 1, 4, 9, "i 'FairLogLevel' - 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairToolsDict_168_0_37, 85, G__get_linked_tagnum(&G__G__FairToolsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairLogger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairToolsDict_168_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLogger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairToolsDict_168_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairLogger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairToolsDict_168_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairLogger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairToolsDict_168_0_41, 85, G__get_linked_tagnum(&G__G__FairToolsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairToolsDict_168_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairToolsDict_168_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairToolsDict_168_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairToolsDict_168_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLogger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairToolsDict_168_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLogger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairToolsDict_168_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLogger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairToolsDict_168_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLogger::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__FairToolsDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&gLogger),85,0,0,G__get_linked_tagnum(&G__G__FairToolsDictLN_FairLogger),-1,-1,1,"gLogger=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__FairToolsDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__FairToolsDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__FairToolsDictLN_va_list = { "va_list" , 115 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_ios_base = { "ios_base" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR = { "basic_ios<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_FairLogger = { "FairLogger" , 99 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_FairLogLevel = { "FairLogLevel" , 101 , -1 };
G__linked_taginfo G__G__FairToolsDictLN_FairLogVerbosityLevel = { "FairLogVerbosityLevel" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__FairToolsDict() {
  G__G__FairToolsDictLN_va_list.tagnum = -1 ;
  G__G__FairToolsDictLN_TClass.tagnum = -1 ;
  G__G__FairToolsDictLN_TBuffer.tagnum = -1 ;
  G__G__FairToolsDictLN_TMemberInspector.tagnum = -1 ;
  G__G__FairToolsDictLN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__G__FairToolsDictLN_ios_base.tagnum = -1 ;
  G__G__FairToolsDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__FairToolsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__FairToolsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairToolsDictLN_FairLogger.tagnum = -1 ;
  G__G__FairToolsDictLN_FairLogLevel.tagnum = -1 ;
  G__G__FairToolsDictLN_FairLogVerbosityLevel.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__FairToolsDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_va_list);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_vectorlEcharcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_ios_base);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_FairLogger),sizeof(FairLogger),-1,298752,(char*)NULL,G__setup_memvarFairLogger,G__setup_memfuncFairLogger);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_FairLogLevel);
   G__get_linked_tagnum_fwd(&G__G__FairToolsDictLN_FairLogVerbosityLevel);
}
extern "C" void G__cpp_setupG__FairToolsDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__FairToolsDict()");
  G__set_cpp_environmentG__FairToolsDict();
  G__cpp_setup_tagtableG__FairToolsDict();

  G__cpp_setup_inheritanceG__FairToolsDict();

  G__cpp_setup_typetableG__FairToolsDict();

  G__cpp_setup_memvarG__FairToolsDict();

  G__cpp_setup_memfuncG__FairToolsDict();
  G__cpp_setup_globalG__FairToolsDict();
  G__cpp_setup_funcG__FairToolsDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__FairToolsDict();
  return;
}
class G__cpp_setup_initG__FairToolsDict {
  public:
    G__cpp_setup_initG__FairToolsDict() { G__add_setup_func("G__FairToolsDict",(G__incsetup)(&G__cpp_setupG__FairToolsDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__FairToolsDict() { G__remove_setup_func("G__FairToolsDict"); }
};
G__cpp_setup_initG__FairToolsDict G__cpp_setup_initializerG__FairToolsDict;

