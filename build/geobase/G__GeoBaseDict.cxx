//
// File generated by /usr/local/fairsoft/fairsoft_jul14p3-install/bin/rootcint at Thu Mar  5 21:20:53 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIdaqdIfair_install_2015dIATTPCROOT_FebdIbuilddIgeobasedIG__GeoBaseDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__GeoBaseDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void FairGeoTransform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTransform(void *p = 0);
   static void *newArray_FairGeoTransform(Long_t size, void *p);
   static void delete_FairGeoTransform(void *p);
   static void deleteArray_FairGeoTransform(void *p);
   static void destruct_FairGeoTransform(void *p);
   static void streamer_FairGeoTransform(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTransform*)
   {
      ::FairGeoTransform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTransform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTransform", ::FairGeoTransform::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTransform.h", 22,
                  typeid(::FairGeoTransform), DefineBehavior(ptr, ptr),
                  &::FairGeoTransform::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTransform) );
      instance.SetNew(&new_FairGeoTransform);
      instance.SetNewArray(&newArray_FairGeoTransform);
      instance.SetDelete(&delete_FairGeoTransform);
      instance.SetDeleteArray(&deleteArray_FairGeoTransform);
      instance.SetDestructor(&destruct_FairGeoTransform);
      instance.SetStreamerFunc(&streamer_FairGeoTransform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTransform*)
   {
      return GenerateInitInstanceLocal((::FairGeoTransform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTransform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoVolume(void *p = 0);
   static void *newArray_FairGeoVolume(Long_t size, void *p);
   static void delete_FairGeoVolume(void *p);
   static void deleteArray_FairGeoVolume(void *p);
   static void destruct_FairGeoVolume(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoVolume*)
   {
      ::FairGeoVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoVolume", ::FairGeoVolume::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoVolume.h", 28,
                  typeid(::FairGeoVolume), DefineBehavior(ptr, ptr),
                  &::FairGeoVolume::Dictionary, isa_proxy, 4,
                  sizeof(::FairGeoVolume) );
      instance.SetNew(&new_FairGeoVolume);
      instance.SetNewArray(&newArray_FairGeoVolume);
      instance.SetDelete(&delete_FairGeoVolume);
      instance.SetDeleteArray(&deleteArray_FairGeoVolume);
      instance.SetDestructor(&destruct_FairGeoVolume);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoVolume*)
   {
      return GenerateInitInstanceLocal((::FairGeoVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoBasicShape_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoBasicShape(void *p = 0);
   static void *newArray_FairGeoBasicShape(Long_t size, void *p);
   static void delete_FairGeoBasicShape(void *p);
   static void deleteArray_FairGeoBasicShape(void *p);
   static void destruct_FairGeoBasicShape(void *p);
   static void streamer_FairGeoBasicShape(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoBasicShape*)
   {
      ::FairGeoBasicShape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoBasicShape >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoBasicShape", ::FairGeoBasicShape::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoBasicShape.h", 26,
                  typeid(::FairGeoBasicShape), DefineBehavior(ptr, ptr),
                  &::FairGeoBasicShape::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoBasicShape) );
      instance.SetNew(&new_FairGeoBasicShape);
      instance.SetNewArray(&newArray_FairGeoBasicShape);
      instance.SetDelete(&delete_FairGeoBasicShape);
      instance.SetDeleteArray(&deleteArray_FairGeoBasicShape);
      instance.SetDestructor(&destruct_FairGeoBasicShape);
      instance.SetStreamerFunc(&streamer_FairGeoBasicShape);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoBasicShape*)
   {
      return GenerateInitInstanceLocal((::FairGeoBasicShape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoBasicShape*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoAssembly_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoAssembly(void *p = 0);
   static void *newArray_FairGeoAssembly(Long_t size, void *p);
   static void delete_FairGeoAssembly(void *p);
   static void deleteArray_FairGeoAssembly(void *p);
   static void destruct_FairGeoAssembly(void *p);
   static void streamer_FairGeoAssembly(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoAssembly*)
   {
      ::FairGeoAssembly *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoAssembly >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoAssembly", ::FairGeoAssembly::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoAssembly.h", 23,
                  typeid(::FairGeoAssembly), DefineBehavior(ptr, ptr),
                  &::FairGeoAssembly::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoAssembly) );
      instance.SetNew(&new_FairGeoAssembly);
      instance.SetNewArray(&newArray_FairGeoAssembly);
      instance.SetDelete(&delete_FairGeoAssembly);
      instance.SetDeleteArray(&deleteArray_FairGeoAssembly);
      instance.SetDestructor(&destruct_FairGeoAssembly);
      instance.SetStreamerFunc(&streamer_FairGeoAssembly);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoAssembly*)
   {
      return GenerateInitInstanceLocal((::FairGeoAssembly*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoAssembly*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoCone_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoCone(void *p = 0);
   static void *newArray_FairGeoCone(Long_t size, void *p);
   static void delete_FairGeoCone(void *p);
   static void deleteArray_FairGeoCone(void *p);
   static void destruct_FairGeoCone(void *p);
   static void streamer_FairGeoCone(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoCone*)
   {
      ::FairGeoCone *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoCone >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoCone", ::FairGeoCone::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoCone.h", 27,
                  typeid(::FairGeoCone), DefineBehavior(ptr, ptr),
                  &::FairGeoCone::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoCone) );
      instance.SetNew(&new_FairGeoCone);
      instance.SetNewArray(&newArray_FairGeoCone);
      instance.SetDelete(&delete_FairGeoCone);
      instance.SetDeleteArray(&deleteArray_FairGeoCone);
      instance.SetDestructor(&destruct_FairGeoCone);
      instance.SetStreamerFunc(&streamer_FairGeoCone);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoCone*)
   {
      return GenerateInitInstanceLocal((::FairGeoCone*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoCone*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoCons_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoCons(void *p = 0);
   static void *newArray_FairGeoCons(Long_t size, void *p);
   static void delete_FairGeoCons(void *p);
   static void deleteArray_FairGeoCons(void *p);
   static void destruct_FairGeoCons(void *p);
   static void streamer_FairGeoCons(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoCons*)
   {
      ::FairGeoCons *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoCons >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoCons", ::FairGeoCons::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoCons.h", 26,
                  typeid(::FairGeoCons), DefineBehavior(ptr, ptr),
                  &::FairGeoCons::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoCons) );
      instance.SetNew(&new_FairGeoCons);
      instance.SetNewArray(&newArray_FairGeoCons);
      instance.SetDelete(&delete_FairGeoCons);
      instance.SetDeleteArray(&deleteArray_FairGeoCons);
      instance.SetDestructor(&destruct_FairGeoCons);
      instance.SetStreamerFunc(&streamer_FairGeoCons);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoCons*)
   {
      return GenerateInitInstanceLocal((::FairGeoCons*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoCons*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoEltu_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoEltu(void *p = 0);
   static void *newArray_FairGeoEltu(Long_t size, void *p);
   static void delete_FairGeoEltu(void *p);
   static void deleteArray_FairGeoEltu(void *p);
   static void destruct_FairGeoEltu(void *p);
   static void streamer_FairGeoEltu(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoEltu*)
   {
      ::FairGeoEltu *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoEltu >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoEltu", ::FairGeoEltu::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoEltu.h", 27,
                  typeid(::FairGeoEltu), DefineBehavior(ptr, ptr),
                  &::FairGeoEltu::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoEltu) );
      instance.SetNew(&new_FairGeoEltu);
      instance.SetNewArray(&newArray_FairGeoEltu);
      instance.SetDelete(&delete_FairGeoEltu);
      instance.SetDeleteArray(&deleteArray_FairGeoEltu);
      instance.SetDestructor(&destruct_FairGeoEltu);
      instance.SetStreamerFunc(&streamer_FairGeoEltu);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoEltu*)
   {
      return GenerateInitInstanceLocal((::FairGeoEltu*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoEltu*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoNode(void *p = 0);
   static void *newArray_FairGeoNode(Long_t size, void *p);
   static void delete_FairGeoNode(void *p);
   static void deleteArray_FairGeoNode(void *p);
   static void destruct_FairGeoNode(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoNode*)
   {
      ::FairGeoNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoNode", ::FairGeoNode::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoNode.h", 43,
                  typeid(::FairGeoNode), DefineBehavior(ptr, ptr),
                  &::FairGeoNode::Dictionary, isa_proxy, 4,
                  sizeof(::FairGeoNode) );
      instance.SetNew(&new_FairGeoNode);
      instance.SetNewArray(&newArray_FairGeoNode);
      instance.SetDelete(&delete_FairGeoNode);
      instance.SetDeleteArray(&deleteArray_FairGeoNode);
      instance.SetDestructor(&destruct_FairGeoNode);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoNode*)
   {
      return GenerateInitInstanceLocal((::FairGeoNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoMedium_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoMedium(void *p = 0);
   static void *newArray_FairGeoMedium(Long_t size, void *p);
   static void delete_FairGeoMedium(void *p);
   static void deleteArray_FairGeoMedium(void *p);
   static void destruct_FairGeoMedium(void *p);
   static void streamer_FairGeoMedium(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoMedium*)
   {
      ::FairGeoMedium *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoMedium >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoMedium", ::FairGeoMedium::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoMedium.h", 23,
                  typeid(::FairGeoMedium), DefineBehavior(ptr, ptr),
                  &::FairGeoMedium::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoMedium) );
      instance.SetNew(&new_FairGeoMedium);
      instance.SetNewArray(&newArray_FairGeoMedium);
      instance.SetDelete(&delete_FairGeoMedium);
      instance.SetDeleteArray(&deleteArray_FairGeoMedium);
      instance.SetDestructor(&destruct_FairGeoMedium);
      instance.SetStreamerFunc(&streamer_FairGeoMedium);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoMedium*)
   {
      return GenerateInitInstanceLocal((::FairGeoMedium*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoMedium*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoBuilder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairGeoBuilder(void *p);
   static void deleteArray_FairGeoBuilder(void *p);
   static void destruct_FairGeoBuilder(void *p);
   static void streamer_FairGeoBuilder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoBuilder*)
   {
      ::FairGeoBuilder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoBuilder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoBuilder", ::FairGeoBuilder::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoBuilder.h", 23,
                  typeid(::FairGeoBuilder), DefineBehavior(ptr, ptr),
                  &::FairGeoBuilder::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoBuilder) );
      instance.SetDelete(&delete_FairGeoBuilder);
      instance.SetDeleteArray(&deleteArray_FairGeoBuilder);
      instance.SetDestructor(&destruct_FairGeoBuilder);
      instance.SetStreamerFunc(&streamer_FairGeoBuilder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoBuilder*)
   {
      return GenerateInitInstanceLocal((::FairGeoBuilder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoBuilder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairGeoIo(void *p);
   static void deleteArray_FairGeoIo(void *p);
   static void destruct_FairGeoIo(void *p);
   static void streamer_FairGeoIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoIo*)
   {
      ::FairGeoIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoIo", ::FairGeoIo::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoIo.h", 24,
                  typeid(::FairGeoIo), DefineBehavior(ptr, ptr),
                  &::FairGeoIo::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoIo) );
      instance.SetDelete(&delete_FairGeoIo);
      instance.SetDeleteArray(&deleteArray_FairGeoIo);
      instance.SetDestructor(&destruct_FairGeoIo);
      instance.SetStreamerFunc(&streamer_FairGeoIo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoIo*)
   {
      return GenerateInitInstanceLocal((::FairGeoIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairGeoSet(void *p);
   static void deleteArray_FairGeoSet(void *p);
   static void destruct_FairGeoSet(void *p);
   static void streamer_FairGeoSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoSet*)
   {
      ::FairGeoSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoSet", ::FairGeoSet::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoSet.h", 32,
                  typeid(::FairGeoSet), DefineBehavior(ptr, ptr),
                  &::FairGeoSet::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoSet) );
      instance.SetDelete(&delete_FairGeoSet);
      instance.SetDeleteArray(&deleteArray_FairGeoSet);
      instance.SetDestructor(&destruct_FairGeoSet);
      instance.SetStreamerFunc(&streamer_FairGeoSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoSet*)
   {
      return GenerateInitInstanceLocal((::FairGeoSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoMedia_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoMedia(void *p = 0);
   static void *newArray_FairGeoMedia(Long_t size, void *p);
   static void delete_FairGeoMedia(void *p);
   static void deleteArray_FairGeoMedia(void *p);
   static void destruct_FairGeoMedia(void *p);
   static void streamer_FairGeoMedia(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoMedia*)
   {
      ::FairGeoMedia *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoMedia >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoMedia", ::FairGeoMedia::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoMedia.h", 27,
                  typeid(::FairGeoMedia), DefineBehavior(ptr, ptr),
                  &::FairGeoMedia::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoMedia) );
      instance.SetNew(&new_FairGeoMedia);
      instance.SetNewArray(&newArray_FairGeoMedia);
      instance.SetDelete(&delete_FairGeoMedia);
      instance.SetDeleteArray(&deleteArray_FairGeoMedia);
      instance.SetDestructor(&destruct_FairGeoMedia);
      instance.SetStreamerFunc(&streamer_FairGeoMedia);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoMedia*)
   {
      return GenerateInitInstanceLocal((::FairGeoMedia*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoMedia*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoShapes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoShapes(void *p = 0);
   static void *newArray_FairGeoShapes(Long_t size, void *p);
   static void delete_FairGeoShapes(void *p);
   static void deleteArray_FairGeoShapes(void *p);
   static void destruct_FairGeoShapes(void *p);
   static void streamer_FairGeoShapes(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoShapes*)
   {
      ::FairGeoShapes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoShapes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoShapes", ::FairGeoShapes::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoShapes.h", 27,
                  typeid(::FairGeoShapes), DefineBehavior(ptr, ptr),
                  &::FairGeoShapes::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoShapes) );
      instance.SetNew(&new_FairGeoShapes);
      instance.SetNewArray(&newArray_FairGeoShapes);
      instance.SetDelete(&delete_FairGeoShapes);
      instance.SetDeleteArray(&deleteArray_FairGeoShapes);
      instance.SetDestructor(&destruct_FairGeoShapes);
      instance.SetStreamerFunc(&streamer_FairGeoShapes);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoShapes*)
   {
      return GenerateInitInstanceLocal((::FairGeoShapes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoShapes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoInterface_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoInterface(void *p = 0);
   static void *newArray_FairGeoInterface(Long_t size, void *p);
   static void delete_FairGeoInterface(void *p);
   static void deleteArray_FairGeoInterface(void *p);
   static void destruct_FairGeoInterface(void *p);
   static void streamer_FairGeoInterface(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoInterface*)
   {
      ::FairGeoInterface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoInterface >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoInterface", ::FairGeoInterface::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoInterface.h", 43,
                  typeid(::FairGeoInterface), DefineBehavior(ptr, ptr),
                  &::FairGeoInterface::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoInterface) );
      instance.SetNew(&new_FairGeoInterface);
      instance.SetNewArray(&newArray_FairGeoInterface);
      instance.SetDelete(&delete_FairGeoInterface);
      instance.SetDeleteArray(&deleteArray_FairGeoInterface);
      instance.SetDestructor(&destruct_FairGeoInterface);
      instance.SetStreamerFunc(&streamer_FairGeoInterface);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoInterface*)
   {
      return GenerateInitInstanceLocal((::FairGeoInterface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoInterface*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoLoader(void *p = 0);
   static void *newArray_FairGeoLoader(Long_t size, void *p);
   static void delete_FairGeoLoader(void *p);
   static void deleteArray_FairGeoLoader(void *p);
   static void destruct_FairGeoLoader(void *p);
   static void streamer_FairGeoLoader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoLoader*)
   {
      ::FairGeoLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoLoader", ::FairGeoLoader::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoLoader.h", 31,
                  typeid(::FairGeoLoader), DefineBehavior(ptr, ptr),
                  &::FairGeoLoader::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoLoader) );
      instance.SetNew(&new_FairGeoLoader);
      instance.SetNewArray(&newArray_FairGeoLoader);
      instance.SetDelete(&delete_FairGeoLoader);
      instance.SetDeleteArray(&deleteArray_FairGeoLoader);
      instance.SetDestructor(&destruct_FairGeoLoader);
      instance.SetStreamerFunc(&streamer_FairGeoLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoLoader*)
   {
      return GenerateInitInstanceLocal((::FairGeoLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoVector(void *p = 0);
   static void *newArray_FairGeoVector(Long_t size, void *p);
   static void delete_FairGeoVector(void *p);
   static void deleteArray_FairGeoVector(void *p);
   static void destruct_FairGeoVector(void *p);
   static void streamer_FairGeoVector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoVector*)
   {
      ::FairGeoVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoVector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoVector", ::FairGeoVector::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoVector.h", 22,
                  typeid(::FairGeoVector), DefineBehavior(ptr, ptr),
                  &::FairGeoVector::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoVector) );
      instance.SetNew(&new_FairGeoVector);
      instance.SetNewArray(&newArray_FairGeoVector);
      instance.SetDelete(&delete_FairGeoVector);
      instance.SetDeleteArray(&deleteArray_FairGeoVector);
      instance.SetDestructor(&destruct_FairGeoVector);
      instance.SetStreamerFunc(&streamer_FairGeoVector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoVector*)
   {
      return GenerateInitInstanceLocal((::FairGeoVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoMatrix(void *p = 0);
   static void *newArray_FairGeoMatrix(Long_t size, void *p);
   static void delete_FairGeoMatrix(void *p);
   static void deleteArray_FairGeoMatrix(void *p);
   static void destruct_FairGeoMatrix(void *p);
   static void streamer_FairGeoMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoMatrix*)
   {
      ::FairGeoMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoMatrix", ::FairGeoMatrix::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoMatrix.h", 21,
                  typeid(::FairGeoMatrix), DefineBehavior(ptr, ptr),
                  &::FairGeoMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoMatrix) );
      instance.SetNew(&new_FairGeoMatrix);
      instance.SetNewArray(&newArray_FairGeoMatrix);
      instance.SetDelete(&delete_FairGeoMatrix);
      instance.SetDeleteArray(&deleteArray_FairGeoMatrix);
      instance.SetDestructor(&destruct_FairGeoMatrix);
      instance.SetStreamerFunc(&streamer_FairGeoMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoMatrix*)
   {
      return GenerateInitInstanceLocal((::FairGeoMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoRotation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoRotation(void *p = 0);
   static void *newArray_FairGeoRotation(Long_t size, void *p);
   static void delete_FairGeoRotation(void *p);
   static void deleteArray_FairGeoRotation(void *p);
   static void destruct_FairGeoRotation(void *p);
   static void streamer_FairGeoRotation(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoRotation*)
   {
      ::FairGeoRotation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoRotation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoRotation", ::FairGeoRotation::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoRotation.h", 27,
                  typeid(::FairGeoRotation), DefineBehavior(ptr, ptr),
                  &::FairGeoRotation::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoRotation) );
      instance.SetNew(&new_FairGeoRotation);
      instance.SetNewArray(&newArray_FairGeoRotation);
      instance.SetDelete(&delete_FairGeoRotation);
      instance.SetDeleteArray(&deleteArray_FairGeoRotation);
      instance.SetDestructor(&destruct_FairGeoRotation);
      instance.SetStreamerFunc(&streamer_FairGeoRotation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoRotation*)
   {
      return GenerateInitInstanceLocal((::FairGeoRotation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoRotation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoOldAsciiIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoOldAsciiIo(void *p = 0);
   static void *newArray_FairGeoOldAsciiIo(Long_t size, void *p);
   static void delete_FairGeoOldAsciiIo(void *p);
   static void deleteArray_FairGeoOldAsciiIo(void *p);
   static void destruct_FairGeoOldAsciiIo(void *p);
   static void streamer_FairGeoOldAsciiIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoOldAsciiIo*)
   {
      ::FairGeoOldAsciiIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoOldAsciiIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoOldAsciiIo", ::FairGeoOldAsciiIo::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoOldAsciiIo.h", 29,
                  typeid(::FairGeoOldAsciiIo), DefineBehavior(ptr, ptr),
                  &::FairGeoOldAsciiIo::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoOldAsciiIo) );
      instance.SetNew(&new_FairGeoOldAsciiIo);
      instance.SetNewArray(&newArray_FairGeoOldAsciiIo);
      instance.SetDelete(&delete_FairGeoOldAsciiIo);
      instance.SetDeleteArray(&deleteArray_FairGeoOldAsciiIo);
      instance.SetDestructor(&destruct_FairGeoOldAsciiIo);
      instance.SetStreamerFunc(&streamer_FairGeoOldAsciiIo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoOldAsciiIo*)
   {
      return GenerateInitInstanceLocal((::FairGeoOldAsciiIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoOldAsciiIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoPcon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoPcon(void *p = 0);
   static void *newArray_FairGeoPcon(Long_t size, void *p);
   static void delete_FairGeoPcon(void *p);
   static void deleteArray_FairGeoPcon(void *p);
   static void destruct_FairGeoPcon(void *p);
   static void streamer_FairGeoPcon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoPcon*)
   {
      ::FairGeoPcon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoPcon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoPcon", ::FairGeoPcon::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoPcon.h", 27,
                  typeid(::FairGeoPcon), DefineBehavior(ptr, ptr),
                  &::FairGeoPcon::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoPcon) );
      instance.SetNew(&new_FairGeoPcon);
      instance.SetNewArray(&newArray_FairGeoPcon);
      instance.SetDelete(&delete_FairGeoPcon);
      instance.SetDeleteArray(&deleteArray_FairGeoPcon);
      instance.SetDestructor(&destruct_FairGeoPcon);
      instance.SetStreamerFunc(&streamer_FairGeoPcon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoPcon*)
   {
      return GenerateInitInstanceLocal((::FairGeoPcon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoPcon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoPgon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoPgon(void *p = 0);
   static void *newArray_FairGeoPgon(Long_t size, void *p);
   static void delete_FairGeoPgon(void *p);
   static void deleteArray_FairGeoPgon(void *p);
   static void destruct_FairGeoPgon(void *p);
   static void streamer_FairGeoPgon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoPgon*)
   {
      ::FairGeoPgon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoPgon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoPgon", ::FairGeoPgon::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoPgon.h", 27,
                  typeid(::FairGeoPgon), DefineBehavior(ptr, ptr),
                  &::FairGeoPgon::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoPgon) );
      instance.SetNew(&new_FairGeoPgon);
      instance.SetNewArray(&newArray_FairGeoPgon);
      instance.SetDelete(&delete_FairGeoPgon);
      instance.SetDeleteArray(&deleteArray_FairGeoPgon);
      instance.SetDestructor(&destruct_FairGeoPgon);
      instance.SetStreamerFunc(&streamer_FairGeoPgon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoPgon*)
   {
      return GenerateInitInstanceLocal((::FairGeoPgon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoPgon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoRootBuilder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoRootBuilder(void *p = 0);
   static void *newArray_FairGeoRootBuilder(Long_t size, void *p);
   static void delete_FairGeoRootBuilder(void *p);
   static void deleteArray_FairGeoRootBuilder(void *p);
   static void destruct_FairGeoRootBuilder(void *p);
   static void streamer_FairGeoRootBuilder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoRootBuilder*)
   {
      ::FairGeoRootBuilder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoRootBuilder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoRootBuilder", ::FairGeoRootBuilder::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoRootBuilder.h", 24,
                  typeid(::FairGeoRootBuilder), DefineBehavior(ptr, ptr),
                  &::FairGeoRootBuilder::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoRootBuilder) );
      instance.SetNew(&new_FairGeoRootBuilder);
      instance.SetNewArray(&newArray_FairGeoRootBuilder);
      instance.SetDelete(&delete_FairGeoRootBuilder);
      instance.SetDeleteArray(&deleteArray_FairGeoRootBuilder);
      instance.SetDestructor(&destruct_FairGeoRootBuilder);
      instance.SetStreamerFunc(&streamer_FairGeoRootBuilder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoRootBuilder*)
   {
      return GenerateInitInstanceLocal((::FairGeoRootBuilder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoRootBuilder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoSphe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoSphe(void *p = 0);
   static void *newArray_FairGeoSphe(Long_t size, void *p);
   static void delete_FairGeoSphe(void *p);
   static void deleteArray_FairGeoSphe(void *p);
   static void destruct_FairGeoSphe(void *p);
   static void streamer_FairGeoSphe(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoSphe*)
   {
      ::FairGeoSphe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoSphe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoSphe", ::FairGeoSphe::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoSphe.h", 27,
                  typeid(::FairGeoSphe), DefineBehavior(ptr, ptr),
                  &::FairGeoSphe::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoSphe) );
      instance.SetNew(&new_FairGeoSphe);
      instance.SetNewArray(&newArray_FairGeoSphe);
      instance.SetDelete(&delete_FairGeoSphe);
      instance.SetDeleteArray(&deleteArray_FairGeoSphe);
      instance.SetDestructor(&destruct_FairGeoSphe);
      instance.SetStreamerFunc(&streamer_FairGeoSphe);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoSphe*)
   {
      return GenerateInitInstanceLocal((::FairGeoSphe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoSphe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTrap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTrap(void *p = 0);
   static void *newArray_FairGeoTrap(Long_t size, void *p);
   static void delete_FairGeoTrap(void *p);
   static void deleteArray_FairGeoTrap(void *p);
   static void destruct_FairGeoTrap(void *p);
   static void streamer_FairGeoTrap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTrap*)
   {
      ::FairGeoTrap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTrap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTrap", ::FairGeoTrap::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTrap.h", 22,
                  typeid(::FairGeoTrap), DefineBehavior(ptr, ptr),
                  &::FairGeoTrap::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTrap) );
      instance.SetNew(&new_FairGeoTrap);
      instance.SetNewArray(&newArray_FairGeoTrap);
      instance.SetDelete(&delete_FairGeoTrap);
      instance.SetDeleteArray(&deleteArray_FairGeoTrap);
      instance.SetDestructor(&destruct_FairGeoTrap);
      instance.SetStreamerFunc(&streamer_FairGeoTrap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTrap*)
   {
      return GenerateInitInstanceLocal((::FairGeoTrap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTrap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTrd1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTrd1(void *p = 0);
   static void *newArray_FairGeoTrd1(Long_t size, void *p);
   static void delete_FairGeoTrd1(void *p);
   static void deleteArray_FairGeoTrd1(void *p);
   static void destruct_FairGeoTrd1(void *p);
   static void streamer_FairGeoTrd1(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTrd1*)
   {
      ::FairGeoTrd1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTrd1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTrd1", ::FairGeoTrd1::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTrd1.h", 22,
                  typeid(::FairGeoTrd1), DefineBehavior(ptr, ptr),
                  &::FairGeoTrd1::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTrd1) );
      instance.SetNew(&new_FairGeoTrd1);
      instance.SetNewArray(&newArray_FairGeoTrd1);
      instance.SetDelete(&delete_FairGeoTrd1);
      instance.SetDeleteArray(&deleteArray_FairGeoTrd1);
      instance.SetDestructor(&destruct_FairGeoTrd1);
      instance.SetStreamerFunc(&streamer_FairGeoTrd1);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTrd1*)
   {
      return GenerateInitInstanceLocal((::FairGeoTrd1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTrd1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTube_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTube(void *p = 0);
   static void *newArray_FairGeoTube(Long_t size, void *p);
   static void delete_FairGeoTube(void *p);
   static void deleteArray_FairGeoTube(void *p);
   static void destruct_FairGeoTube(void *p);
   static void streamer_FairGeoTube(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTube*)
   {
      ::FairGeoTube *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTube >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTube", ::FairGeoTube::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTube.h", 23,
                  typeid(::FairGeoTube), DefineBehavior(ptr, ptr),
                  &::FairGeoTube::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTube) );
      instance.SetNew(&new_FairGeoTube);
      instance.SetNewArray(&newArray_FairGeoTube);
      instance.SetDelete(&delete_FairGeoTube);
      instance.SetDeleteArray(&deleteArray_FairGeoTube);
      instance.SetDestructor(&destruct_FairGeoTube);
      instance.SetStreamerFunc(&streamer_FairGeoTube);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTube*)
   {
      return GenerateInitInstanceLocal((::FairGeoTube*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTube*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTubs_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTubs(void *p = 0);
   static void *newArray_FairGeoTubs(Long_t size, void *p);
   static void delete_FairGeoTubs(void *p);
   static void deleteArray_FairGeoTubs(void *p);
   static void destruct_FairGeoTubs(void *p);
   static void streamer_FairGeoTubs(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTubs*)
   {
      ::FairGeoTubs *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTubs >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTubs", ::FairGeoTubs::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTubs.h", 23,
                  typeid(::FairGeoTubs), DefineBehavior(ptr, ptr),
                  &::FairGeoTubs::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTubs) );
      instance.SetNew(&new_FairGeoTubs);
      instance.SetNewArray(&newArray_FairGeoTubs);
      instance.SetDelete(&delete_FairGeoTubs);
      instance.SetDeleteArray(&deleteArray_FairGeoTubs);
      instance.SetDestructor(&destruct_FairGeoTubs);
      instance.SetStreamerFunc(&streamer_FairGeoTubs);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTubs*)
   {
      return GenerateInitInstanceLocal((::FairGeoTubs*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTubs*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTorus_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTorus(void *p = 0);
   static void *newArray_FairGeoTorus(Long_t size, void *p);
   static void delete_FairGeoTorus(void *p);
   static void deleteArray_FairGeoTorus(void *p);
   static void destruct_FairGeoTorus(void *p);
   static void streamer_FairGeoTorus(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTorus*)
   {
      ::FairGeoTorus *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTorus >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTorus", ::FairGeoTorus::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoTorus.h", 23,
                  typeid(::FairGeoTorus), DefineBehavior(ptr, ptr),
                  &::FairGeoTorus::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTorus) );
      instance.SetNew(&new_FairGeoTorus);
      instance.SetNewArray(&newArray_FairGeoTorus);
      instance.SetDelete(&delete_FairGeoTorus);
      instance.SetDeleteArray(&deleteArray_FairGeoTorus);
      instance.SetDestructor(&destruct_FairGeoTorus);
      instance.SetStreamerFunc(&streamer_FairGeoTorus);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTorus*)
   {
      return GenerateInitInstanceLocal((::FairGeoTorus*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTorus*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoCompositeVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoCompositeVolume(void *p = 0);
   static void *newArray_FairGeoCompositeVolume(Long_t size, void *p);
   static void delete_FairGeoCompositeVolume(void *p);
   static void deleteArray_FairGeoCompositeVolume(void *p);
   static void destruct_FairGeoCompositeVolume(void *p);
   static void streamer_FairGeoCompositeVolume(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoCompositeVolume*)
   {
      ::FairGeoCompositeVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoCompositeVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoCompositeVolume", ::FairGeoCompositeVolume::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoCompositeVolume.h", 21,
                  typeid(::FairGeoCompositeVolume), DefineBehavior(ptr, ptr),
                  &::FairGeoCompositeVolume::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoCompositeVolume) );
      instance.SetNew(&new_FairGeoCompositeVolume);
      instance.SetNewArray(&newArray_FairGeoCompositeVolume);
      instance.SetDelete(&delete_FairGeoCompositeVolume);
      instance.SetDeleteArray(&deleteArray_FairGeoCompositeVolume);
      instance.SetDestructor(&destruct_FairGeoCompositeVolume);
      instance.SetStreamerFunc(&streamer_FairGeoCompositeVolume);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoCompositeVolume*)
   {
      return GenerateInitInstanceLocal((::FairGeoCompositeVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoCompositeVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoAsciiIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoAsciiIo(void *p = 0);
   static void *newArray_FairGeoAsciiIo(Long_t size, void *p);
   static void delete_FairGeoAsciiIo(void *p);
   static void deleteArray_FairGeoAsciiIo(void *p);
   static void destruct_FairGeoAsciiIo(void *p);
   static void streamer_FairGeoAsciiIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoAsciiIo*)
   {
      ::FairGeoAsciiIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoAsciiIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoAsciiIo", ::FairGeoAsciiIo::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoAsciiIo.h", 28,
                  typeid(::FairGeoAsciiIo), DefineBehavior(ptr, ptr),
                  &::FairGeoAsciiIo::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoAsciiIo) );
      instance.SetNew(&new_FairGeoAsciiIo);
      instance.SetNewArray(&newArray_FairGeoAsciiIo);
      instance.SetDelete(&delete_FairGeoAsciiIo);
      instance.SetDeleteArray(&deleteArray_FairGeoAsciiIo);
      instance.SetDestructor(&destruct_FairGeoAsciiIo);
      instance.SetStreamerFunc(&streamer_FairGeoAsciiIo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoAsciiIo*)
   {
      return GenerateInitInstanceLocal((::FairGeoAsciiIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoAsciiIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoBrik_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoBrik(void *p = 0);
   static void *newArray_FairGeoBrik(Long_t size, void *p);
   static void delete_FairGeoBrik(void *p);
   static void deleteArray_FairGeoBrik(void *p);
   static void destruct_FairGeoBrik(void *p);
   static void streamer_FairGeoBrik(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoBrik*)
   {
      ::FairGeoBrik *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoBrik >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoBrik", ::FairGeoBrik::Class_Version(), "/home/daq/fair_install_2015/ATTPCROOT_Feb/geobase/FairGeoBrik.h", 21,
                  typeid(::FairGeoBrik), DefineBehavior(ptr, ptr),
                  &::FairGeoBrik::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoBrik) );
      instance.SetNew(&new_FairGeoBrik);
      instance.SetNewArray(&newArray_FairGeoBrik);
      instance.SetDelete(&delete_FairGeoBrik);
      instance.SetDeleteArray(&deleteArray_FairGeoBrik);
      instance.SetDestructor(&destruct_FairGeoBrik);
      instance.SetStreamerFunc(&streamer_FairGeoBrik);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoBrik*)
   {
      return GenerateInitInstanceLocal((::FairGeoBrik*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoBrik*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *FairGeoTransform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTransform::Class_Name()
{
   return "FairGeoTransform";
}

//______________________________________________________________________________
const char *FairGeoTransform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTransform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTransform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTransform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTransform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTransform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTransform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTransform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoVolume::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoVolume::Class_Name()
{
   return "FairGeoVolume";
}

//______________________________________________________________________________
const char *FairGeoVolume::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoVolume::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoVolume::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoVolume::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVolume*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoBasicShape::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoBasicShape::Class_Name()
{
   return "FairGeoBasicShape";
}

//______________________________________________________________________________
const char *FairGeoBasicShape::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBasicShape*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoBasicShape::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBasicShape*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoBasicShape::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBasicShape*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoBasicShape::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBasicShape*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoAssembly::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoAssembly::Class_Name()
{
   return "FairGeoAssembly";
}

//______________________________________________________________________________
const char *FairGeoAssembly::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAssembly*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoAssembly::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAssembly*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoAssembly::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAssembly*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoAssembly::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAssembly*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoCone::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoCone::Class_Name()
{
   return "FairGeoCone";
}

//______________________________________________________________________________
const char *FairGeoCone::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCone*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoCone::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCone*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoCone::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCone*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoCone::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCone*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoCons::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoCons::Class_Name()
{
   return "FairGeoCons";
}

//______________________________________________________________________________
const char *FairGeoCons::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCons*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoCons::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCons*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoCons::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCons*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoCons::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCons*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoEltu::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoEltu::Class_Name()
{
   return "FairGeoEltu";
}

//______________________________________________________________________________
const char *FairGeoEltu::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoEltu*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoEltu::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoEltu*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoEltu::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoEltu*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoEltu::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoEltu*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoNode::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoNode::Class_Name()
{
   return "FairGeoNode";
}

//______________________________________________________________________________
const char *FairGeoNode::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoNode::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoNode::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoNode::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoNode*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoMedium::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoMedium::Class_Name()
{
   return "FairGeoMedium";
}

//______________________________________________________________________________
const char *FairGeoMedium::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedium*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoMedium::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedium*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoMedium::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedium*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoMedium::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedium*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoBuilder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoBuilder::Class_Name()
{
   return "FairGeoBuilder";
}

//______________________________________________________________________________
const char *FairGeoBuilder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBuilder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoBuilder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBuilder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoBuilder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBuilder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoBuilder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBuilder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoIo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoIo::Class_Name()
{
   return "FairGeoIo";
}

//______________________________________________________________________________
const char *FairGeoIo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoIo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoIo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoIo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoIo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoSet::Class_Name()
{
   return "FairGeoSet";
}

//______________________________________________________________________________
const char *FairGeoSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoMedia::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoMedia::Class_Name()
{
   return "FairGeoMedia";
}

//______________________________________________________________________________
const char *FairGeoMedia::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedia*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoMedia::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedia*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoMedia::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedia*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoMedia::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMedia*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoShapes::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoShapes::Class_Name()
{
   return "FairGeoShapes";
}

//______________________________________________________________________________
const char *FairGeoShapes::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoShapes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoShapes::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoShapes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoShapes::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoShapes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoShapes::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoShapes*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoInterface::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoInterface::Class_Name()
{
   return "FairGeoInterface";
}

//______________________________________________________________________________
const char *FairGeoInterface::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoInterface*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoInterface::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoInterface*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoInterface::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoInterface*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoInterface::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoInterface*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoLoader::Class_Name()
{
   return "FairGeoLoader";
}

//______________________________________________________________________________
const char *FairGeoLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoVector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoVector::Class_Name()
{
   return "FairGeoVector";
}

//______________________________________________________________________________
const char *FairGeoVector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoVector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoVector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoVector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoVector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoMatrix::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoMatrix::Class_Name()
{
   return "FairGeoMatrix";
}

//______________________________________________________________________________
const char *FairGeoMatrix::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoMatrix::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoMatrix::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoMatrix::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMatrix*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoRotation::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoRotation::Class_Name()
{
   return "FairGeoRotation";
}

//______________________________________________________________________________
const char *FairGeoRotation::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRotation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoRotation::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRotation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoRotation::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRotation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoRotation::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRotation*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoOldAsciiIo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoOldAsciiIo::Class_Name()
{
   return "FairGeoOldAsciiIo";
}

//______________________________________________________________________________
const char *FairGeoOldAsciiIo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoOldAsciiIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoOldAsciiIo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoOldAsciiIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoOldAsciiIo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoOldAsciiIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoOldAsciiIo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoOldAsciiIo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoPcon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoPcon::Class_Name()
{
   return "FairGeoPcon";
}

//______________________________________________________________________________
const char *FairGeoPcon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPcon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoPcon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPcon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoPcon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPcon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoPcon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPcon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoPgon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoPgon::Class_Name()
{
   return "FairGeoPgon";
}

//______________________________________________________________________________
const char *FairGeoPgon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPgon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoPgon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPgon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoPgon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPgon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoPgon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPgon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoRootBuilder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoRootBuilder::Class_Name()
{
   return "FairGeoRootBuilder";
}

//______________________________________________________________________________
const char *FairGeoRootBuilder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRootBuilder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoRootBuilder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRootBuilder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoRootBuilder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRootBuilder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoRootBuilder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoRootBuilder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoSphe::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoSphe::Class_Name()
{
   return "FairGeoSphe";
}

//______________________________________________________________________________
const char *FairGeoSphe::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSphe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoSphe::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSphe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoSphe::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSphe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoSphe::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoSphe*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTrap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTrap::Class_Name()
{
   return "FairGeoTrap";
}

//______________________________________________________________________________
const char *FairGeoTrap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTrap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTrap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTrap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTrd1::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTrd1::Class_Name()
{
   return "FairGeoTrd1";
}

//______________________________________________________________________________
const char *FairGeoTrd1::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrd1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTrd1::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrd1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTrd1::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrd1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTrd1::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTrd1*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTube::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTube::Class_Name()
{
   return "FairGeoTube";
}

//______________________________________________________________________________
const char *FairGeoTube::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTube*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTube::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTube*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTube::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTube*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTube::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTube*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTubs::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTubs::Class_Name()
{
   return "FairGeoTubs";
}

//______________________________________________________________________________
const char *FairGeoTubs::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTubs*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTubs::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTubs*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTubs::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTubs*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTubs::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTubs*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTorus::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTorus::Class_Name()
{
   return "FairGeoTorus";
}

//______________________________________________________________________________
const char *FairGeoTorus::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTorus*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTorus::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTorus*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTorus::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTorus*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTorus::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTorus*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoCompositeVolume::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoCompositeVolume::Class_Name()
{
   return "FairGeoCompositeVolume";
}

//______________________________________________________________________________
const char *FairGeoCompositeVolume::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCompositeVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoCompositeVolume::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCompositeVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoCompositeVolume::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCompositeVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoCompositeVolume::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCompositeVolume*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoAsciiIo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoAsciiIo::Class_Name()
{
   return "FairGeoAsciiIo";
}

//______________________________________________________________________________
const char *FairGeoAsciiIo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAsciiIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoAsciiIo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAsciiIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoAsciiIo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAsciiIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoAsciiIo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoAsciiIo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoBrik::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoBrik::Class_Name()
{
   return "FairGeoBrik";
}

//______________________________________________________________________________
const char *FairGeoBrik::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBrik*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoBrik::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBrik*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoBrik::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBrik*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoBrik::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoBrik*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void FairGeoAssembly::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoAssembly.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoAssembly::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoAssembly.
      TClass *R__cl = ::FairGeoAssembly::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoAssembly(void *p) {
      return  p ? new(p) ::FairGeoAssembly : new ::FairGeoAssembly;
   }
   static void *newArray_FairGeoAssembly(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoAssembly[nElements] : new ::FairGeoAssembly[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoAssembly(void *p) {
      delete ((::FairGeoAssembly*)p);
   }
   static void deleteArray_FairGeoAssembly(void *p) {
      delete [] ((::FairGeoAssembly*)p);
   }
   static void destruct_FairGeoAssembly(void *p) {
      typedef ::FairGeoAssembly current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoAssembly(TBuffer &buf, void *obj) {
      ((::FairGeoAssembly*)obj)->::FairGeoAssembly::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoAssembly

//______________________________________________________________________________
void FairGeoMedium::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoMedium.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> medId;
      R__b >> autoflag;
      R__b >> nComponents;
      R__b >> weightFac;
      delete [] ca;
      ca = new Double_t[nComponents];
      R__b.ReadFastArray(ca,nComponents);
      delete [] cz;
      cz = new Double_t[nComponents];
      R__b.ReadFastArray(cz,nComponents);
      delete [] cw;
      cw = new Double_t[nComponents];
      R__b.ReadFastArray(cw,nComponents);
      R__b >> density;
      R__b >> radLen;
      R__b >> sensFlag;
      R__b >> fldFlag;
      R__b >> fld;
      R__b >> epsil;
      R__b >> madfld;
      R__b >> maxstep;
      R__b >> maxde;
      R__b >> minstep;
      R__b >> npckov;
      delete [] ppckov;
      ppckov = new Double_t[npckov];
      R__b.ReadFastArray(ppckov,npckov);
      delete [] absco;
      absco = new Double_t[npckov];
      R__b.ReadFastArray(absco,npckov);
      delete [] effic;
      effic = new Double_t[npckov];
      R__b.ReadFastArray(effic,npckov);
      delete [] rindex;
      rindex = new Double_t[npckov];
      R__b.ReadFastArray(rindex,npckov);
      R__b.CheckByteCount(R__s, R__c, FairGeoMedium::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoMedium::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << medId;
      R__b << autoflag;
      R__b << nComponents;
      R__b << weightFac;
      R__b.WriteFastArray(ca,nComponents);
      R__b.WriteFastArray(cz,nComponents);
      R__b.WriteFastArray(cw,nComponents);
      R__b << density;
      R__b << radLen;
      R__b << sensFlag;
      R__b << fldFlag;
      R__b << fld;
      R__b << epsil;
      R__b << madfld;
      R__b << maxstep;
      R__b << maxde;
      R__b << minstep;
      R__b << npckov;
      R__b.WriteFastArray(ppckov,npckov);
      R__b.WriteFastArray(absco,npckov);
      R__b.WriteFastArray(effic,npckov);
      R__b.WriteFastArray(rindex,npckov);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoMedium::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoMedium.
      TClass *R__cl = ::FairGeoMedium::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "medId", &medId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "autoflag", &autoflag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nComponents", &nComponents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weightFac", &weightFac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ca", &ca);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cz", &cz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cw", &cw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "density", &density);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radLen", &radLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sensFlag", &sensFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fldFlag", &fldFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fld", &fld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "epsil", &epsil);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "madfld", &madfld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxstep", &maxstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxde", &maxde);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minstep", &minstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npckov", &npckov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ppckov", &ppckov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*absco", &absco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*effic", &effic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rindex", &rindex);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoMedium(void *p) {
      return  p ? new(p) ::FairGeoMedium : new ::FairGeoMedium;
   }
   static void *newArray_FairGeoMedium(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoMedium[nElements] : new ::FairGeoMedium[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoMedium(void *p) {
      delete ((::FairGeoMedium*)p);
   }
   static void deleteArray_FairGeoMedium(void *p) {
      delete [] ((::FairGeoMedium*)p);
   }
   static void destruct_FairGeoMedium(void *p) {
      typedef ::FairGeoMedium current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoMedium(TBuffer &buf, void *obj) {
      ((::FairGeoMedium*)obj)->::FairGeoMedium::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoMedium

//______________________________________________________________________________
void FairGeoTransform::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTransform.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      rot.Streamer(R__b);
      trans.Streamer(R__b);
      trans_cm.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, FairGeoTransform::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoTransform::IsA(), kTRUE);
      TObject::Streamer(R__b);
      rot.Streamer(R__b);
      trans.Streamer(R__b);
      trans_cm.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoTransform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTransform.
      TClass *R__cl = ::FairGeoTransform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rot", &rot);
      R__insp.InspectMember(rot, "rot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trans", &trans);
      R__insp.InspectMember(trans, "trans.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trans_cm", &trans_cm);
      R__insp.InspectMember(trans_cm, "trans_cm.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTransform(void *p) {
      return  p ? new(p) ::FairGeoTransform : new ::FairGeoTransform;
   }
   static void *newArray_FairGeoTransform(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTransform[nElements] : new ::FairGeoTransform[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTransform(void *p) {
      delete ((::FairGeoTransform*)p);
   }
   static void deleteArray_FairGeoTransform(void *p) {
      delete [] ((::FairGeoTransform*)p);
   }
   static void destruct_FairGeoTransform(void *p) {
      typedef ::FairGeoTransform current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTransform(TBuffer &buf, void *obj) {
      ((::FairGeoTransform*)obj)->::FairGeoTransform::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTransform

//______________________________________________________________________________
void FairGeoRotation::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoRotation.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((double*)rot);
      R__b.CheckByteCount(R__s, R__c, FairGeoRotation::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoRotation::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(rot, 9);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoRotation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoRotation.
      TClass *R__cl = ::FairGeoRotation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rot[9]", rot);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoRotation(void *p) {
      return  p ? new(p) ::FairGeoRotation : new ::FairGeoRotation;
   }
   static void *newArray_FairGeoRotation(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoRotation[nElements] : new ::FairGeoRotation[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoRotation(void *p) {
      delete ((::FairGeoRotation*)p);
   }
   static void deleteArray_FairGeoRotation(void *p) {
      delete [] ((::FairGeoRotation*)p);
   }
   static void destruct_FairGeoRotation(void *p) {
      typedef ::FairGeoRotation current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoRotation(TBuffer &buf, void *obj) {
      ((::FairGeoRotation*)obj)->::FairGeoRotation::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoRotation

//______________________________________________________________________________
void FairGeoVector::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoVector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b.CheckByteCount(R__s, R__c, FairGeoVector::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoVector::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << x;
      R__b << y;
      R__b << z;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoVector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoVector.
      TClass *R__cl = ::FairGeoVector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoVector(void *p) {
      return  p ? new(p) ::FairGeoVector : new ::FairGeoVector;
   }
   static void *newArray_FairGeoVector(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoVector[nElements] : new ::FairGeoVector[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoVector(void *p) {
      delete ((::FairGeoVector*)p);
   }
   static void deleteArray_FairGeoVector(void *p) {
      delete [] ((::FairGeoVector*)p);
   }
   static void destruct_FairGeoVector(void *p) {
      typedef ::FairGeoVector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoVector(TBuffer &buf, void *obj) {
      ((::FairGeoVector*)obj)->::FairGeoVector::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoVector

//______________________________________________________________________________
void FairGeoMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoMatrix.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoMatrix.
      TClass *R__cl = ::FairGeoMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM[9]", fM);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoMatrix(void *p) {
      return  p ? new(p) ::FairGeoMatrix : new ::FairGeoMatrix;
   }
   static void *newArray_FairGeoMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoMatrix[nElements] : new ::FairGeoMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoMatrix(void *p) {
      delete ((::FairGeoMatrix*)p);
   }
   static void deleteArray_FairGeoMatrix(void *p) {
      delete [] ((::FairGeoMatrix*)p);
   }
   static void destruct_FairGeoMatrix(void *p) {
      typedef ::FairGeoMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoMatrix(TBuffer &buf, void *obj) {
      ((::FairGeoMatrix*)obj)->::FairGeoMatrix::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoMatrix

//______________________________________________________________________________
void FairGeoShapes::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoShapes.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoShapes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoShapes.
      TClass *R__cl = ::FairGeoShapes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoShapes(void *p) {
      return  p ? new(p) ::FairGeoShapes : new ::FairGeoShapes;
   }
   static void *newArray_FairGeoShapes(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoShapes[nElements] : new ::FairGeoShapes[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoShapes(void *p) {
      delete ((::FairGeoShapes*)p);
   }
   static void deleteArray_FairGeoShapes(void *p) {
      delete [] ((::FairGeoShapes*)p);
   }
   static void destruct_FairGeoShapes(void *p) {
      typedef ::FairGeoShapes current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoShapes(TBuffer &buf, void *obj) {
      ((::FairGeoShapes*)obj)->::FairGeoShapes::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoShapes

//______________________________________________________________________________
void FairGeoBasicShape::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoBasicShape.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoBasicShape::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoBasicShape.
      TClass *R__cl = ::FairGeoBasicShape::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPoints", &nPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParam", &nParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*param", &param);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*center", &center);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*position", &position);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoBasicShape(void *p) {
      return  p ? new(p) ::FairGeoBasicShape : new ::FairGeoBasicShape;
   }
   static void *newArray_FairGeoBasicShape(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoBasicShape[nElements] : new ::FairGeoBasicShape[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoBasicShape(void *p) {
      delete ((::FairGeoBasicShape*)p);
   }
   static void deleteArray_FairGeoBasicShape(void *p) {
      delete [] ((::FairGeoBasicShape*)p);
   }
   static void destruct_FairGeoBasicShape(void *p) {
      typedef ::FairGeoBasicShape current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoBasicShape(TBuffer &buf, void *obj) {
      ((::FairGeoBasicShape*)obj)->::FairGeoBasicShape::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoBasicShape

//______________________________________________________________________________
void FairGeoBrik::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoBrik.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoBrik::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoBrik.
      TClass *R__cl = ::FairGeoBrik::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoBrik(void *p) {
      return  p ? new(p) ::FairGeoBrik : new ::FairGeoBrik;
   }
   static void *newArray_FairGeoBrik(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoBrik[nElements] : new ::FairGeoBrik[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoBrik(void *p) {
      delete ((::FairGeoBrik*)p);
   }
   static void deleteArray_FairGeoBrik(void *p) {
      delete [] ((::FairGeoBrik*)p);
   }
   static void destruct_FairGeoBrik(void *p) {
      typedef ::FairGeoBrik current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoBrik(TBuffer &buf, void *obj) {
      ((::FairGeoBrik*)obj)->::FairGeoBrik::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoBrik

//______________________________________________________________________________
void FairGeoTrap::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTrap.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTrap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTrap.
      TClass *R__cl = ::FairGeoTrap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrinsicRot", &intrinsicRot);
      R__insp.InspectMember(intrinsicRot, "intrinsicRot.");
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTrap(void *p) {
      return  p ? new(p) ::FairGeoTrap : new ::FairGeoTrap;
   }
   static void *newArray_FairGeoTrap(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTrap[nElements] : new ::FairGeoTrap[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTrap(void *p) {
      delete ((::FairGeoTrap*)p);
   }
   static void deleteArray_FairGeoTrap(void *p) {
      delete [] ((::FairGeoTrap*)p);
   }
   static void destruct_FairGeoTrap(void *p) {
      typedef ::FairGeoTrap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTrap(TBuffer &buf, void *obj) {
      ((::FairGeoTrap*)obj)->::FairGeoTrap::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTrap

//______________________________________________________________________________
void FairGeoTrd1::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTrd1.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTrd1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTrd1.
      TClass *R__cl = ::FairGeoTrd1::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrinsicRot", &intrinsicRot);
      R__insp.InspectMember(intrinsicRot, "intrinsicRot.");
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTrd1(void *p) {
      return  p ? new(p) ::FairGeoTrd1 : new ::FairGeoTrd1;
   }
   static void *newArray_FairGeoTrd1(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTrd1[nElements] : new ::FairGeoTrd1[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTrd1(void *p) {
      delete ((::FairGeoTrd1*)p);
   }
   static void deleteArray_FairGeoTrd1(void *p) {
      delete [] ((::FairGeoTrd1*)p);
   }
   static void destruct_FairGeoTrd1(void *p) {
      typedef ::FairGeoTrd1 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTrd1(TBuffer &buf, void *obj) {
      ((::FairGeoTrd1*)obj)->::FairGeoTrd1::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTrd1

//______________________________________________________________________________
void FairGeoPgon::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoPgon.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoPgon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoPgon.
      TClass *R__cl = ::FairGeoPgon::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoPgon(void *p) {
      return  p ? new(p) ::FairGeoPgon : new ::FairGeoPgon;
   }
   static void *newArray_FairGeoPgon(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoPgon[nElements] : new ::FairGeoPgon[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoPgon(void *p) {
      delete ((::FairGeoPgon*)p);
   }
   static void deleteArray_FairGeoPgon(void *p) {
      delete [] ((::FairGeoPgon*)p);
   }
   static void destruct_FairGeoPgon(void *p) {
      typedef ::FairGeoPgon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoPgon(TBuffer &buf, void *obj) {
      ((::FairGeoPgon*)obj)->::FairGeoPgon::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoPgon

//______________________________________________________________________________
void FairGeoPcon::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoPcon.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoPcon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoPcon.
      TClass *R__cl = ::FairGeoPcon::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoPcon(void *p) {
      return  p ? new(p) ::FairGeoPcon : new ::FairGeoPcon;
   }
   static void *newArray_FairGeoPcon(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoPcon[nElements] : new ::FairGeoPcon[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoPcon(void *p) {
      delete ((::FairGeoPcon*)p);
   }
   static void deleteArray_FairGeoPcon(void *p) {
      delete [] ((::FairGeoPcon*)p);
   }
   static void destruct_FairGeoPcon(void *p) {
      typedef ::FairGeoPcon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoPcon(TBuffer &buf, void *obj) {
      ((::FairGeoPcon*)obj)->::FairGeoPcon::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoPcon

//______________________________________________________________________________
void FairGeoTube::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTube.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTube::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTube.
      TClass *R__cl = ::FairGeoTube::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTube(void *p) {
      return  p ? new(p) ::FairGeoTube : new ::FairGeoTube;
   }
   static void *newArray_FairGeoTube(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTube[nElements] : new ::FairGeoTube[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTube(void *p) {
      delete ((::FairGeoTube*)p);
   }
   static void deleteArray_FairGeoTube(void *p) {
      delete [] ((::FairGeoTube*)p);
   }
   static void destruct_FairGeoTube(void *p) {
      typedef ::FairGeoTube current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTube(TBuffer &buf, void *obj) {
      ((::FairGeoTube*)obj)->::FairGeoTube::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTube

//______________________________________________________________________________
void FairGeoTubs::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTubs.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTubs::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTubs.
      TClass *R__cl = ::FairGeoTubs::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTubs(void *p) {
      return  p ? new(p) ::FairGeoTubs : new ::FairGeoTubs;
   }
   static void *newArray_FairGeoTubs(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTubs[nElements] : new ::FairGeoTubs[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTubs(void *p) {
      delete ((::FairGeoTubs*)p);
   }
   static void deleteArray_FairGeoTubs(void *p) {
      delete [] ((::FairGeoTubs*)p);
   }
   static void destruct_FairGeoTubs(void *p) {
      typedef ::FairGeoTubs current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTubs(TBuffer &buf, void *obj) {
      ((::FairGeoTubs*)obj)->::FairGeoTubs::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTubs

//______________________________________________________________________________
void FairGeoCone::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoCone.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoCone::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoCone.
      TClass *R__cl = ::FairGeoCone::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoCone(void *p) {
      return  p ? new(p) ::FairGeoCone : new ::FairGeoCone;
   }
   static void *newArray_FairGeoCone(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoCone[nElements] : new ::FairGeoCone[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoCone(void *p) {
      delete ((::FairGeoCone*)p);
   }
   static void deleteArray_FairGeoCone(void *p) {
      delete [] ((::FairGeoCone*)p);
   }
   static void destruct_FairGeoCone(void *p) {
      typedef ::FairGeoCone current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoCone(TBuffer &buf, void *obj) {
      ((::FairGeoCone*)obj)->::FairGeoCone::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoCone

//______________________________________________________________________________
void FairGeoCons::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoCons.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoCons::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoCons.
      TClass *R__cl = ::FairGeoCons::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoCons(void *p) {
      return  p ? new(p) ::FairGeoCons : new ::FairGeoCons;
   }
   static void *newArray_FairGeoCons(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoCons[nElements] : new ::FairGeoCons[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoCons(void *p) {
      delete ((::FairGeoCons*)p);
   }
   static void deleteArray_FairGeoCons(void *p) {
      delete [] ((::FairGeoCons*)p);
   }
   static void destruct_FairGeoCons(void *p) {
      typedef ::FairGeoCons current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoCons(TBuffer &buf, void *obj) {
      ((::FairGeoCons*)obj)->::FairGeoCons::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoCons

//______________________________________________________________________________
void FairGeoSphe::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoSphe.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoSphe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoSphe.
      TClass *R__cl = ::FairGeoSphe::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoSphe(void *p) {
      return  p ? new(p) ::FairGeoSphe : new ::FairGeoSphe;
   }
   static void *newArray_FairGeoSphe(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoSphe[nElements] : new ::FairGeoSphe[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoSphe(void *p) {
      delete ((::FairGeoSphe*)p);
   }
   static void deleteArray_FairGeoSphe(void *p) {
      delete [] ((::FairGeoSphe*)p);
   }
   static void destruct_FairGeoSphe(void *p) {
      typedef ::FairGeoSphe current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoSphe(TBuffer &buf, void *obj) {
      ((::FairGeoSphe*)obj)->::FairGeoSphe::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoSphe

//______________________________________________________________________________
void FairGeoEltu::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoEltu.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoEltu::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoEltu.
      TClass *R__cl = ::FairGeoEltu::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoEltu(void *p) {
      return  p ? new(p) ::FairGeoEltu : new ::FairGeoEltu;
   }
   static void *newArray_FairGeoEltu(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoEltu[nElements] : new ::FairGeoEltu[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoEltu(void *p) {
      delete ((::FairGeoEltu*)p);
   }
   static void deleteArray_FairGeoEltu(void *p) {
      delete [] ((::FairGeoEltu*)p);
   }
   static void destruct_FairGeoEltu(void *p) {
      typedef ::FairGeoEltu current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoEltu(TBuffer &buf, void *obj) {
      ((::FairGeoEltu*)obj)->::FairGeoEltu::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoEltu

//______________________________________________________________________________
void FairGeoTorus::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTorus.

   FairGeoBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTorus::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTorus.
      TClass *R__cl = ::FairGeoTorus::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairGeoBasicShape::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTorus(void *p) {
      return  p ? new(p) ::FairGeoTorus : new ::FairGeoTorus;
   }
   static void *newArray_FairGeoTorus(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTorus[nElements] : new ::FairGeoTorus[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTorus(void *p) {
      delete ((::FairGeoTorus*)p);
   }
   static void deleteArray_FairGeoTorus(void *p) {
      delete [] ((::FairGeoTorus*)p);
   }
   static void destruct_FairGeoTorus(void *p) {
      typedef ::FairGeoTorus current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTorus(TBuffer &buf, void *obj) {
      ((::FairGeoTorus*)obj)->::FairGeoTorus::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTorus

//______________________________________________________________________________
void FairGeoVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoVolume.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairGeoVolume::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairGeoVolume::Class(),this);
   }
}

//______________________________________________________________________________
void FairGeoVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoVolume.
      TClass *R__cl = ::FairGeoVolume::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shape", &shape);
      R__insp.InspectMember(shape, "shape.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother", &mother);
      R__insp.InspectMember(mother, "mother.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*points", &points);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transform", &transform);
      R__insp.InspectMember(transform, "transform.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabTransform", &fLabTransform);
      R__insp.InspectMember(fLabTransform, "fLabTransform.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMedium", &fMedium);
      R__insp.InspectMember(fMedium, "fMedium.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPoints", &nPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHadFormat", &fHadFormat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgMCid", &fgMCid);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoVolume(void *p) {
      return  p ? new(p) ::FairGeoVolume : new ::FairGeoVolume;
   }
   static void *newArray_FairGeoVolume(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoVolume[nElements] : new ::FairGeoVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoVolume(void *p) {
      delete ((::FairGeoVolume*)p);
   }
   static void deleteArray_FairGeoVolume(void *p) {
      delete [] ((::FairGeoVolume*)p);
   }
   static void destruct_FairGeoVolume(void *p) {
      typedef ::FairGeoVolume current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairGeoVolume

//______________________________________________________________________________
void FairGeoCompositeVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoCompositeVolume.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairGeoVolume::Streamer(R__b);
      R__b >> components;
      R__b.CheckByteCount(R__s, R__c, FairGeoCompositeVolume::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoCompositeVolume::IsA(), kTRUE);
      FairGeoVolume::Streamer(R__b);
      R__b << components;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoCompositeVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoCompositeVolume.
      TClass *R__cl = ::FairGeoCompositeVolume::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*components", &components);
      FairGeoVolume::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoCompositeVolume(void *p) {
      return  p ? new(p) ::FairGeoCompositeVolume : new ::FairGeoCompositeVolume;
   }
   static void *newArray_FairGeoCompositeVolume(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoCompositeVolume[nElements] : new ::FairGeoCompositeVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoCompositeVolume(void *p) {
      delete ((::FairGeoCompositeVolume*)p);
   }
   static void deleteArray_FairGeoCompositeVolume(void *p) {
      delete [] ((::FairGeoCompositeVolume*)p);
   }
   static void destruct_FairGeoCompositeVolume(void *p) {
      typedef ::FairGeoCompositeVolume current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoCompositeVolume(TBuffer &buf, void *obj) {
      ((::FairGeoCompositeVolume*)obj)->::FairGeoCompositeVolume::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoCompositeVolume

//______________________________________________________________________________
void FairGeoNode::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoNode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairGeoNode::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairGeoNode::Class(),this);
   }
}

//______________________________________________________________________________
void FairGeoNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoNode.
      TClass *R__cl = ::FairGeoNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "active", &active);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "center", &center);
      R__insp.InspectMember(center, "center.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "volumeType", &volumeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "created", &created);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*copyNode", &copyNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rootVolume", &rootVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShape", &pShape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMother", &pMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*medium", &medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*labTransform", &labTransform);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDaughterList", &fDaughterList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTruncName", &fTruncName);
      R__insp.InspectMember(fTruncName, "fTruncName.");
      FairGeoVolume::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoNode(void *p) {
      return  p ? new(p) ::FairGeoNode : new ::FairGeoNode;
   }
   static void *newArray_FairGeoNode(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoNode[nElements] : new ::FairGeoNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoNode(void *p) {
      delete ((::FairGeoNode*)p);
   }
   static void deleteArray_FairGeoNode(void *p) {
      delete [] ((::FairGeoNode*)p);
   }
   static void destruct_FairGeoNode(void *p) {
      typedef ::FairGeoNode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairGeoNode

//______________________________________________________________________________
void FairGeoSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoSet.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoSet.
      TClass *R__cl = ::FairGeoSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadesGeo", &hadesGeo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*volumes", &volumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*masterNodes", &masterNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxSectors", &maxSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxKeepinVolumes", &maxKeepinVolumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxModules", &maxModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*modules", &modules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShapes", &pShapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geoFile", &geoFile);
      R__insp.InspectMember(geoFile, "geoFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "author", &author);
      R__insp.InspectMember(author, "author.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "description", &description);
      R__insp.InspectMember(description, "description.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_FairGeoSet(void *p) {
      delete ((::FairGeoSet*)p);
   }
   static void deleteArray_FairGeoSet(void *p) {
      delete [] ((::FairGeoSet*)p);
   }
   static void destruct_FairGeoSet(void *p) {
      typedef ::FairGeoSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoSet(TBuffer &buf, void *obj) {
      ((::FairGeoSet*)obj)->::FairGeoSet::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoSet

//______________________________________________________________________________
void FairGeoInterface::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoInterface.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoInterface::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoInterface.
      TClass *R__cl = ::FairGeoInterface::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fileInput", &fileInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*oraInput", &oraInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*output", &output);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSets", &nSets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nActualSets", &nActualSets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sets", &sets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*media", &media);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*masterNodes", &masterNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setupFile", &setupFile);
      R__insp.InspectMember(setupFile, "setupFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geoBuilder", &geoBuilder);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoInterface(void *p) {
      return  p ? new(p) ::FairGeoInterface : new ::FairGeoInterface;
   }
   static void *newArray_FairGeoInterface(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoInterface[nElements] : new ::FairGeoInterface[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoInterface(void *p) {
      delete ((::FairGeoInterface*)p);
   }
   static void deleteArray_FairGeoInterface(void *p) {
      delete [] ((::FairGeoInterface*)p);
   }
   static void destruct_FairGeoInterface(void *p) {
      typedef ::FairGeoInterface current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoInterface(TBuffer &buf, void *obj) {
      ((::FairGeoInterface*)obj)->::FairGeoInterface::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoInterface

//______________________________________________________________________________
void FairGeoBuilder::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoBuilder.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoBuilder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoBuilder.
      TClass *R__cl = ::FairGeoBuilder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRot", &nRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMed", &nMed);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_FairGeoBuilder(void *p) {
      delete ((::FairGeoBuilder*)p);
   }
   static void deleteArray_FairGeoBuilder(void *p) {
      delete [] ((::FairGeoBuilder*)p);
   }
   static void destruct_FairGeoBuilder(void *p) {
      typedef ::FairGeoBuilder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoBuilder(TBuffer &buf, void *obj) {
      ((::FairGeoBuilder*)obj)->::FairGeoBuilder::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoBuilder

//______________________________________________________________________________
void FairGeoRootBuilder::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoRootBuilder.

   FairGeoBuilder::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoRootBuilder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoRootBuilder.
      TClass *R__cl = ::FairGeoRootBuilder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geoManager", &geoManager);
      FairGeoBuilder::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoRootBuilder(void *p) {
      return  p ? new(p) ::FairGeoRootBuilder : new ::FairGeoRootBuilder;
   }
   static void *newArray_FairGeoRootBuilder(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoRootBuilder[nElements] : new ::FairGeoRootBuilder[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoRootBuilder(void *p) {
      delete ((::FairGeoRootBuilder*)p);
   }
   static void deleteArray_FairGeoRootBuilder(void *p) {
      delete [] ((::FairGeoRootBuilder*)p);
   }
   static void destruct_FairGeoRootBuilder(void *p) {
      typedef ::FairGeoRootBuilder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoRootBuilder(TBuffer &buf, void *obj) {
      ((::FairGeoRootBuilder*)obj)->::FairGeoRootBuilder::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoRootBuilder

//______________________________________________________________________________
void FairGeoIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoIo.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoIo.
      TClass *R__cl = ::FairGeoIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_FairGeoIo(void *p) {
      delete ((::FairGeoIo*)p);
   }
   static void deleteArray_FairGeoIo(void *p) {
      delete [] ((::FairGeoIo*)p);
   }
   static void destruct_FairGeoIo(void *p) {
      typedef ::FairGeoIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoIo(TBuffer &buf, void *obj) {
      ((::FairGeoIo*)obj)->::FairGeoIo::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoIo

//______________________________________________________________________________
void FairGeoAsciiIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoAsciiIo.

   FairGeoIo::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoAsciiIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoAsciiIo.
      TClass *R__cl = ::FairGeoAsciiIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename", &filename);
      R__insp.InspectMember(filename, "filename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filedir", &filedir);
      R__insp.InspectMember(filedir, "filedir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "writable", &writable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      FairGeoIo::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoAsciiIo(void *p) {
      return  p ? new(p) ::FairGeoAsciiIo : new ::FairGeoAsciiIo;
   }
   static void *newArray_FairGeoAsciiIo(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoAsciiIo[nElements] : new ::FairGeoAsciiIo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoAsciiIo(void *p) {
      delete ((::FairGeoAsciiIo*)p);
   }
   static void deleteArray_FairGeoAsciiIo(void *p) {
      delete [] ((::FairGeoAsciiIo*)p);
   }
   static void destruct_FairGeoAsciiIo(void *p) {
      typedef ::FairGeoAsciiIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoAsciiIo(TBuffer &buf, void *obj) {
      ((::FairGeoAsciiIo*)obj)->::FairGeoAsciiIo::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoAsciiIo

//______________________________________________________________________________
void FairGeoOldAsciiIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoOldAsciiIo.

   FairGeoIo::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoOldAsciiIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoOldAsciiIo.
      TClass *R__cl = ::FairGeoOldAsciiIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename", &filename);
      R__insp.InspectMember(filename, "filename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filedir", &filedir);
      R__insp.InspectMember(filedir, "filedir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "writable", &writable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      FairGeoIo::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoOldAsciiIo(void *p) {
      return  p ? new(p) ::FairGeoOldAsciiIo : new ::FairGeoOldAsciiIo;
   }
   static void *newArray_FairGeoOldAsciiIo(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoOldAsciiIo[nElements] : new ::FairGeoOldAsciiIo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoOldAsciiIo(void *p) {
      delete ((::FairGeoOldAsciiIo*)p);
   }
   static void deleteArray_FairGeoOldAsciiIo(void *p) {
      delete [] ((::FairGeoOldAsciiIo*)p);
   }
   static void destruct_FairGeoOldAsciiIo(void *p) {
      typedef ::FairGeoOldAsciiIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoOldAsciiIo(TBuffer &buf, void *obj) {
      ((::FairGeoOldAsciiIo*)obj)->::FairGeoOldAsciiIo::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoOldAsciiIo

//______________________________________________________________________________
void FairGeoMedia::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoMedia.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoMedia::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoMedia.
      TClass *R__cl = ::FairGeoMedia::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*media", &media);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inputFile", &inputFile);
      R__insp.InspectMember(inputFile, "inputFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "author", &author);
      R__insp.InspectMember(author, "author.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "description", &description);
      R__insp.InspectMember(description, "description.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoMedia(void *p) {
      return  p ? new(p) ::FairGeoMedia : new ::FairGeoMedia;
   }
   static void *newArray_FairGeoMedia(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoMedia[nElements] : new ::FairGeoMedia[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoMedia(void *p) {
      delete ((::FairGeoMedia*)p);
   }
   static void deleteArray_FairGeoMedia(void *p) {
      delete [] ((::FairGeoMedia*)p);
   }
   static void destruct_FairGeoMedia(void *p) {
      typedef ::FairGeoMedia current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoMedia(TBuffer &buf, void *obj) {
      ((::FairGeoMedia*)obj)->::FairGeoMedia::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoMedia

//______________________________________________________________________________
void FairGeoLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoLoader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, FairGeoLoader::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoLoader::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoLoader.
      TClass *R__cl = ::FairGeoLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInterface", &fInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeoBuilder", &fGeoBuilder);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoLoader(void *p) {
      return  p ? new(p) ::FairGeoLoader : new ::FairGeoLoader;
   }
   static void *newArray_FairGeoLoader(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoLoader[nElements] : new ::FairGeoLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoLoader(void *p) {
      delete ((::FairGeoLoader*)p);
   }
   static void deleteArray_FairGeoLoader(void *p) {
      delete [] ((::FairGeoLoader*)p);
   }
   static void destruct_FairGeoLoader(void *p) {
      typedef ::FairGeoLoader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoLoader(TBuffer &buf, void *obj) {
      ((::FairGeoLoader*)obj)->::FairGeoLoader::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoLoader

/********************************************************
* /home/daq/fair_install_2015/ATTPCROOT_Feb/build/geobase/G__GeoBaseDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__GeoBaseDict();

extern "C" void G__set_cpp_environmentG__GeoBaseDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("FairGeoAssembly.h");
  G__add_compiledheader("FairGeoCone.h");
  G__add_compiledheader("FairGeoCons.h");
  G__add_compiledheader("FairGeoEltu.h");
  G__add_compiledheader("FairGeoBuilder.h");
  G__add_compiledheader("FairGeoInterface.h");
  G__add_compiledheader("FairGeoIo.h");
  G__add_compiledheader("FairGeoLoader.h");
  G__add_compiledheader("FairGeoMatrix.h");
  G__add_compiledheader("FairGeoMedia.h");
  G__add_compiledheader("FairGeoMedium.h");
  G__add_compiledheader("FairGeoNode.h");
  G__add_compiledheader("FairGeoOldAsciiIo.h");
  G__add_compiledheader("FairGeoPcon.h");
  G__add_compiledheader("FairGeoPgon.h");
  G__add_compiledheader("FairGeoRootBuilder.h");
  G__add_compiledheader("FairGeoRotation.h");
  G__add_compiledheader("FairGeoSet.h");
  G__add_compiledheader("FairGeoShapes.h");
  G__add_compiledheader("FairGeoSphe.h");
  G__add_compiledheader("FairGeoTransform.h");
  G__add_compiledheader("FairGeoTrap.h");
  G__add_compiledheader("FairGeoTrd1.h");
  G__add_compiledheader("FairGeoTube.h");
  G__add_compiledheader("FairGeoTubs.h");
  G__add_compiledheader("FairGeoTorus.h");
  G__add_compiledheader("FairGeoVector.h");
  G__add_compiledheader("FairGeoVolume.h");
  G__add_compiledheader("FairGeoCompositeVolume.h");
  G__add_compiledheader("FairGeoAsciiIo.h");
  G__add_compiledheader("FairGeoBrik.h");
  G__add_compiledheader("FairGeoBasicShape.h");
  G__cpp_reset_tagtableG__GeoBaseDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__GeoBaseDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FairGeoTransform */
static int G__G__GeoBaseDict_183_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTransform[n];
     } else {
       p = new((void*) gvp) FairGeoTransform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTransform;
     } else {
       p = new((void*) gvp) FairGeoTransform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoTransform(*(FairGeoTransform*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairGeoTransform(*(FairGeoTransform*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoTransform& obj = ((FairGeoTransform*) G__getstructoffset())->operator=(*(FairGeoTransform*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((const FairGeoTransform*) G__getstructoffset())->getRotMatrix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((const FairGeoTransform*) G__getstructoffset())->getTransVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setRotMatrix(*(FairGeoRotation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setRotMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setRotMatrix((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setTransVector(*(FairGeoVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setTransVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setTransVector((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoTransform*) G__getstructoffset())->transFrom(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoTransform*) G__getstructoffset())->transTo(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->transFrom(*(FairGeoTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->transTo(*(FairGeoTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->invert();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoTransform*) G__getstructoffset())->getTranslation();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((const FairGeoTransform*) G__getstructoffset())->getRotation();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->setTransform(*(FairGeoTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTransform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTransform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTransform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTransform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTransform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTransform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTransform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTransform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_183_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTransform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTransform G__TFairGeoTransform;
static int G__G__GeoBaseDict_183_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTransform*) (soff+(sizeof(FairGeoTransform)*i)))->~G__TFairGeoTransform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTransform*) (soff))->~G__TFairGeoTransform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoVolume */
static int G__G__GeoBaseDict_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoVolume[n];
     } else {
       p = new((void*) gvp) FairGeoVolume[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoVolume;
     } else {
       p = new((void*) gvp) FairGeoVolume;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoVolume(*(FairGeoVolume*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairGeoVolume(*(FairGeoVolume*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const FairGeoVolume*) G__getstructoffset())->getName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const FairGeoVolume*) G__getstructoffset())->getShape();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const FairGeoVolume*) G__getstructoffset())->getMother();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoTransform& obj = ((FairGeoVolume*) G__getstructoffset())->getTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoTransform& obj = ((FairGeoVolume*) G__getstructoffset())->getLabTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoMedium& obj = ((FairGeoVolume*) G__getstructoffset())->getMedium();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoVolume*) G__getstructoffset())->getNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoVolume*) G__getstructoffset())->getPoint((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setName((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setVolumePar(*(FairGeoVolume*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setShape((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setMother((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->createPoints((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setPoint((const Int_t) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setPoint((const Int_t) G__int(libp->para[0]), *(FairGeoVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setHadFormat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoVolume*) G__getstructoffset())->getVolParameter((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoVolume*) G__getstructoffset())->getMCid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->setMCid((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_184_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoVolume G__TFairGeoVolume;
static int G__G__GeoBaseDict_184_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoVolume*) (soff+(sizeof(FairGeoVolume)*i)))->~G__TFairGeoVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoVolume*) (soff))->~G__TFairGeoVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoBasicShape */
static int G__G__GeoBaseDict_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoBasicShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoBasicShape[n];
     } else {
       p = new((void*) gvp) FairGeoBasicShape[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoBasicShape;
     } else {
       p = new((void*) gvp) FairGeoBasicShape;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoBasicShape*) G__getstructoffset())->getNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoBasicShape*) G__getstructoffset())->getNumParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoBasicShape*) G__getstructoffset())->getParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoBasicShape*) G__getstructoffset())->getCenterPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoBasicShape*) G__getstructoffset())->getVoluPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoBasicShape*) G__getstructoffset())->readPoints((fstream*) G__int(libp->para[0]), (FairGeoVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoBasicShape*) G__getstructoffset())->writePoints((fstream*) G__int(libp->para[0]), (FairGeoVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBasicShape*) G__getstructoffset())->printPoints((FairGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoBasicShape*) G__getstructoffset())->calcVoluParam((FairGeoVolume*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBasicShape*) G__getstructoffset())->calcVoluPosition((FairGeoVolume*) G__int(libp->para[0]), *(FairGeoTransform*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBasicShape*) G__getstructoffset())->calcVoluPosition((FairGeoVolume*) G__int(libp->para[0]), *(FairGeoTransform*) libp->para[1].ref
, *(FairGeoTransform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBasicShape*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoBasicShape::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBasicShape::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoBasicShape::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoBasicShape::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBasicShape*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBasicShape::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBasicShape::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBasicShape::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBasicShape::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoBasicShape G__TFairGeoBasicShape;
static int G__G__GeoBaseDict_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoBasicShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoBasicShape*) (soff+(sizeof(FairGeoBasicShape)*i)))->~G__TFairGeoBasicShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoBasicShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoBasicShape*) (soff))->~G__TFairGeoBasicShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoAssembly */
static int G__G__GeoBaseDict_187_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoAssembly* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoAssembly[n];
     } else {
       p = new((void*) gvp) FairGeoAssembly[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoAssembly;
     } else {
       p = new((void*) gvp) FairGeoAssembly;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoAssembly::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAssembly::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoAssembly::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoAssembly::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoAssembly*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAssembly::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoAssembly::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAssembly::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoAssembly::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoAssembly G__TFairGeoAssembly;
static int G__G__GeoBaseDict_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoAssembly*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoAssembly*) (soff+(sizeof(FairGeoAssembly)*i)))->~G__TFairGeoAssembly();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoAssembly*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoAssembly*) (soff))->~G__TFairGeoAssembly();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoCone */
static int G__G__GeoBaseDict_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoCone* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCone[n];
     } else {
       p = new((void*) gvp) FairGeoCone[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCone;
     } else {
       p = new((void*) gvp) FairGeoCone;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoCone::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCone::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoCone::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoCone::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCone*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCone::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCone::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCone::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCone::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoCone G__TFairGeoCone;
static int G__G__GeoBaseDict_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoCone*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoCone*) (soff+(sizeof(FairGeoCone)*i)))->~G__TFairGeoCone();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoCone*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoCone*) (soff))->~G__TFairGeoCone();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoCons */
static int G__G__GeoBaseDict_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoCons* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCons[n];
     } else {
       p = new((void*) gvp) FairGeoCons[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCons;
     } else {
       p = new((void*) gvp) FairGeoCons;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoCons::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCons::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoCons::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoCons::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCons*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCons::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCons::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCons::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_189_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCons::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoCons G__TFairGeoCons;
static int G__G__GeoBaseDict_189_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoCons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoCons*) (soff+(sizeof(FairGeoCons)*i)))->~G__TFairGeoCons();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoCons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoCons*) (soff))->~G__TFairGeoCons();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoEltu */
static int G__G__GeoBaseDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoEltu* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoEltu[n];
     } else {
       p = new((void*) gvp) FairGeoEltu[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoEltu;
     } else {
       p = new((void*) gvp) FairGeoEltu;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoEltu::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoEltu::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoEltu::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoEltu::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoEltu*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoEltu::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoEltu::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoEltu::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoEltu::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoEltu G__TFairGeoEltu;
static int G__G__GeoBaseDict_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoEltu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoEltu*) (soff+(sizeof(FairGeoEltu)*i)))->~G__TFairGeoEltu();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoEltu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoEltu*) (soff))->~G__TFairGeoEltu();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoNode */
static int G__G__GeoBaseDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoNode[n];
     } else {
       p = new((void*) gvp) FairGeoNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoNode;
     } else {
       p = new((void*) gvp) FairGeoNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoNode(*(FairGeoNode*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairGeoNode(*(FairGeoNode*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->AddDaughter((FairGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->GetListOfDaughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoNode*) G__getstructoffset())->getVolumeType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isTopNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isRefNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isKeepin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoNode*) G__getstructoffset())->getCopyNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getShapePointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getMotherNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getMedium());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoTransform& obj = ((FairGeoNode*) G__getstructoffset())->getCenterPosition();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getLabTransform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getCopyNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getRootVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isSensitive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->isCreated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setCreated();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setName((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setVolumeType((EFairGeoNodeType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setVolumePar(*(FairGeoNode*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setShape((FairGeoBasicShape*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setMother((FairGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setMedium((FairGeoMedium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairGeoNode*) G__getstructoffset())->setActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairGeoNode*) G__getstructoffset())->setActive();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setCenterPosition(*(FairGeoTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setCopyNode((FairGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setRootVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoNode*) G__getstructoffset())->calcLabTransform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setLabTransform(*(FairGeoTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->calcModuleTransform(*(FairGeoTransform*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->calcRefPos(*(FairGeoVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoNode*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoNode*) G__getstructoffset())->compare(*(FairGeoNode*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->setTruncName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoNode*) G__getstructoffset())->getTruncName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_191_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoNode G__TFairGeoNode;
static int G__G__GeoBaseDict_191_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoNode*) (soff+(sizeof(FairGeoNode)*i)))->~G__TFairGeoNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoNode*) (soff))->~G__TFairGeoNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoMedium */
static int G__G__GeoBaseDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoMedium* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMedium((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairGeoMedium((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoMedium[n];
       } else {
         p = new((void*) gvp) FairGeoMedium[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoMedium;
       } else {
         p = new((void*) gvp) FairGeoMedium;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoMedium& obj = ((FairGeoMedium*) G__getstructoffset())->operator=(*(FairGeoMedium*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setMediumIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getMediumIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setAutoFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getAutoFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setNComponents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getNComponents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((FairGeoMedium*) G__getstructoffset())->setComponent((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((FairGeoMedium*) G__getstructoffset())->setComponent((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->getComponent((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getWeightFac());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setDensity((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoMedium*) G__getstructoffset())->getDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setRadiationLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoMedium*) G__getstructoffset())->getRadiationLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->setNpckov((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getNpckov());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoMedium*) G__getstructoffset())->setCerenkovPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->getCerenkovPar((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((FairGeoMedium*) G__getstructoffset())->setMediumPar(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((FairGeoMedium*) G__getstructoffset())->setMediumPar(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((FairGeoMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairGeoMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairGeoMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->getMediumPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoMedium*) G__getstructoffset())->isSensitive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getSensitivityFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoMedium*) G__getstructoffset())->getFieldFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoMedium*) G__getstructoffset())->getField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoMedium*) G__getstructoffset())->getEpsil());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoMedium*) G__getstructoffset())->calcRadiationLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoMedium::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedium::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoMedium::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoMedium::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedium*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedium::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMedium::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedium::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_192_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMedium::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoMedium G__TFairGeoMedium;
static int G__G__GeoBaseDict_192_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoMedium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoMedium*) (soff+(sizeof(FairGeoMedium)*i)))->~G__TFairGeoMedium();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoMedium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoMedium*) (soff))->~G__TFairGeoMedium();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoBuilder */
static int G__G__GeoBaseDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((FairGeoBuilder*) G__getstructoffset())->createNode((FairGeoNode*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairGeoBuilder*) G__getstructoffset())->createNode((FairGeoNode*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoBuilder*) G__getstructoffset())->createMedium((FairGeoMedium*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBuilder*) G__getstructoffset())->finalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const FairGeoBuilder*) G__getstructoffset())->GetNMedia();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBuilder*) G__getstructoffset())->SetNMedia(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoBuilder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBuilder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoBuilder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoBuilder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBuilder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBuilder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBuilder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBuilder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBuilder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoBuilder G__TFairGeoBuilder;
static int G__G__GeoBaseDict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoBuilder*) (soff+(sizeof(FairGeoBuilder)*i)))->~G__TFairGeoBuilder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoBuilder*) (soff))->~G__TFairGeoBuilder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeoBaseDict_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoBuilder* dest = (FairGeoBuilder*) G__getstructoffset();
   *dest = *(FairGeoBuilder*) libp->para[0].ref;
   const FairGeoBuilder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoIo */
static int G__G__GeoBaseDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->open((const char*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->open((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoIo*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoIo*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->isOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->isWritable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->read((FairGeoMedia*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->read((FairGeoSet*) G__int(libp->para[0]), (FairGeoMedia*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->write((FairGeoMedia*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->write((FairGeoSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->readGeomConfig((FairGeoInterface*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->setSimulRefRun((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoIo*) G__getstructoffset())->setHistoryDate((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoIo G__TFairGeoIo;
static int G__G__GeoBaseDict_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoIo*) (soff+(sizeof(FairGeoIo)*i)))->~G__TFairGeoIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoIo*) (soff))->~G__TFairGeoIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeoBaseDict_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoIo* dest = (FairGeoIo*) G__getstructoffset();
   *dest = *(FairGeoIo*) libp->para[0].ref;
   const FairGeoIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoSet */
static int G__G__GeoBaseDict_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setShapes((FairGeoShapes*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setMasterNodes((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setGeomFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoSet*) G__getstructoffset())->getGeomFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getMaxSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getMaxModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getMaxKeepinVolumes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setModules((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((FairGeoSet*) G__getstructoffset())->getModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoSet*) G__getstructoffset())->getVolume((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoSet*) G__getstructoffset())->getMasterNode((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoSet*) G__getstructoffset())->getListOfVolumes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoSet*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setAuthor(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->setDescription(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((FairGeoSet*) G__getstructoffset())->getAuthor();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((FairGeoSet*) G__getstructoffset())->getDescription();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoSet*) G__getstructoffset())->getKeepinName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoSet*) G__getstructoffset())->getModuleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoSet*) G__getstructoffset())->getEleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getSecNumInMod(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoSet*) G__getstructoffset())->getModNumInMod(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoSet*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref, (FairGeoMedia*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->addRefNodes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoSet*) G__getstructoffset())->create((FairGeoBuilder*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->compare(*(FairGeoSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_195_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoSet G__TFairGeoSet;
static int G__G__GeoBaseDict_195_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoSet*) (soff+(sizeof(FairGeoSet)*i)))->~G__TFairGeoSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoSet*) (soff))->~G__TFairGeoSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoMedia */
static int G__G__GeoBaseDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoMedia* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMedia[n];
     } else {
       p = new((void*) gvp) FairGeoMedia[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMedia;
     } else {
       p = new((void*) gvp) FairGeoMedia;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->setInputFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoMedia*) G__getstructoffset())->getInputFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->addMedium((FairGeoMedium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoMedia*) G__getstructoffset())->getMedium((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoMedia*) G__getstructoffset())->getListOfMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->list();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->setAuthor(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->setDescription(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((FairGeoMedia*) G__getstructoffset())->getAuthor();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((FairGeoMedia*) G__getstructoffset())->getDescription();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoMedia::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedia::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoMedia::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoMedia::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMedia*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedia::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMedia::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMedia::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMedia::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoMedia G__TFairGeoMedia;
static int G__G__GeoBaseDict_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoMedia*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoMedia*) (soff+(sizeof(FairGeoMedia)*i)))->~G__TFairGeoMedia();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoMedia*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoMedia*) (soff))->~G__TFairGeoMedia();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoShapes */
static int G__G__GeoBaseDict_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoShapes* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoShapes[n];
     } else {
       p = new((void*) gvp) FairGeoShapes[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoShapes;
     } else {
       p = new((void*) gvp) FairGeoShapes;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoShapes*) G__getstructoffset())->selectShape((FairGeoVolume*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoShapes*) G__getstructoffset())->selectShape(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoShapes*) G__getstructoffset())->readPoints((fstream*) G__int(libp->para[0]), (FairGeoVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoShapes*) G__getstructoffset())->writePoints((fstream*) G__int(libp->para[0]), (FairGeoVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoShapes*) G__getstructoffset())->printPoints((FairGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoShapes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoShapes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoShapes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoShapes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoShapes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoShapes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoShapes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoShapes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoShapes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoShapes G__TFairGeoShapes;
static int G__G__GeoBaseDict_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoShapes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoShapes*) (soff+(sizeof(FairGeoShapes)*i)))->~G__TFairGeoShapes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoShapes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoShapes*) (soff))->~G__TFairGeoShapes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoInterface */
static int G__G__GeoBaseDict_199_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoInterface* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoInterface[n];
     } else {
       p = new((void*) gvp) FairGeoInterface[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoInterface;
     } else {
       p = new((void*) gvp) FairGeoInterface;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->setOracleInput((FairGeoIo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->setOutput((FairGeoIo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->setGeomBuilder((FairGeoBuilder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getFileInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getOraInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->getMasterNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->addInputFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->addGeoModule((FairGeoSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->setMediaFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoInterface*) G__getstructoffset())->findSet((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->readSet((FairGeoSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->writeSet((FairGeoSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->writeSet((FairGeoSet*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->createSet((FairGeoSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->deleteSet((FairGeoSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->readMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->writeMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->writeMedia((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->readAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->writeAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->createAll((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->createAll());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->createGeometry((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->createGeometry());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->readGeomConfig((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->addSetupFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoInterface*) G__getstructoffset())->readSetupFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->SetNoOfSets((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoInterface::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoInterface::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoInterface::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoInterface::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoInterface*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoInterface::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoInterface::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoInterface::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_199_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoInterface::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoInterface G__TFairGeoInterface;
static int G__G__GeoBaseDict_199_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoInterface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoInterface*) (soff+(sizeof(FairGeoInterface)*i)))->~G__TFairGeoInterface();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoInterface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoInterface*) (soff))->~G__TFairGeoInterface();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoLoader */
static int G__G__GeoBaseDict_200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoLoader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) FairGeoLoader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoLoader[n];
     } else {
       p = new((void*) gvp) FairGeoLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoLoader;
     } else {
       p = new((void*) gvp) FairGeoLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoLoader*) G__getstructoffset())->getGeoInterface());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoLoader*) G__getstructoffset())->getGeoBuilder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoLoader::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoLoader G__TFairGeoLoader;
static int G__G__GeoBaseDict_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoLoader*) (soff+(sizeof(FairGeoLoader)*i)))->~G__TFairGeoLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoLoader*) (soff))->~G__TFairGeoLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoVector */
static int G__G__GeoBaseDict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoVector(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) FairGeoVector(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoVector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) FairGeoVector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoVector((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) FairGeoVector((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoVector[n];
       } else {
         p = new((void*) gvp) FairGeoVector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoVector;
       } else {
         p = new((void*) gvp) FairGeoVector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoVector(*(FairGeoVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairGeoVector(*(FairGeoVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((FairGeoVector*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((FairGeoVector*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((FairGeoVector*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoVector*) G__getstructoffset())->getValues((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setXYZ((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setX((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setY((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setZ((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->setVector((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->operator()((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoVector*) G__getstructoffset())->operator-();
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator=(*(FairGeoVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairGeoVector*) G__getstructoffset())->operator==(*(FairGeoVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairGeoVector*) G__getstructoffset())->operator!=(*(FairGeoVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoVector*) G__getstructoffset())->operator<((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoVector*) G__getstructoffset())->operator<=((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoVector*) G__getstructoffset())->operator>((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoVector*) G__getstructoffset())->operator>=((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator+=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator-=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator*=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator/=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator+=(*(FairGeoVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->operator-=(*(FairGeoVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoVector*) G__getstructoffset())->operator+(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoVector*) G__getstructoffset())->operator-(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector& obj = ((FairGeoVector*) G__getstructoffset())->abs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->scalarProduct(*(FairGeoVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoVector*) G__getstructoffset())->vectorProduct(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoVector*) G__getstructoffset())->length());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairGeoVector*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->round((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoVector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoVector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoVector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoVector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoVector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoVector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_201_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoVector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoVector G__TFairGeoVector;
static int G__G__GeoBaseDict_201_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoVector*) (soff+(sizeof(FairGeoVector)*i)))->~G__TFairGeoVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoVector*) (soff))->~G__TFairGeoVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoMatrix */
static int G__G__GeoBaseDict_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMatrix[n];
     } else {
       p = new((void*) gvp) FairGeoMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMatrix;
     } else {
       p = new((void*) gvp) FairGeoMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((FairGeoMatrix*) G__getstructoffset())->operator()((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairGeoMatrix*) G__getstructoffset())->det());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         FairGeoVector* pobj;
         FairGeoVector xobj = ((FairGeoMatrix*) G__getstructoffset())->operator*(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoMatrix& obj = ((FairGeoMatrix*) G__getstructoffset())->operator/=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeoBaseDict_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairGeoMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairGeoMatrix(*(FairGeoMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoMatrix G__TFairGeoMatrix;
static int G__G__GeoBaseDict_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoMatrix*) (soff+(sizeof(FairGeoMatrix)*i)))->~G__TFairGeoMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoMatrix*) (soff))->~G__TFairGeoMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeoBaseDict_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoMatrix* dest = (FairGeoMatrix*) G__getstructoffset();
   *dest = *(FairGeoMatrix*) libp->para[0].ref;
   const FairGeoMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoRotation */
static int G__G__GeoBaseDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoRotation[n];
     } else {
       p = new((void*) gvp) FairGeoRotation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoRotation;
     } else {
       p = new((void*) gvp) FairGeoRotation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoRotation(*(FairGeoRotation*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairGeoRotation(*(FairGeoRotation*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoRotation((Double_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairGeoRotation((Double_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoRotation(
(const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) FairGeoRotation(
(const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setMatrix((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setEulerAngles((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setElement((const Double_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoRotation*) G__getstructoffset())->operator()((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((FairGeoRotation*) G__getstructoffset())->operator=(*(FairGeoRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoRotation*) G__getstructoffset())->operator==(*(FairGeoRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoRotation*) G__getstructoffset())->operator!=(*(FairGeoRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoVector* pobj;
         const FairGeoVector xobj = ((const FairGeoRotation*) G__getstructoffset())->operator*(*(FairGeoVector*) libp->para[0].ref);
         pobj = new FairGeoVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation* pobj;
         const FairGeoRotation xobj = ((const FairGeoRotation*) G__getstructoffset())->operator*(*(FairGeoRotation*) libp->para[0].ref);
         pobj = new FairGeoRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((FairGeoRotation*) G__getstructoffset())->operator*=(*(FairGeoRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((FairGeoRotation*) G__getstructoffset())->transform(*(FairGeoRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoRotation*) G__getstructoffset())->isUnitMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation* pobj;
         const FairGeoRotation xobj = ((const FairGeoRotation*) G__getstructoffset())->inverse();
         pobj = new FairGeoRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairGeoRotation& obj = ((FairGeoRotation*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoRotation*) G__getstructoffset())->determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoRotation*) G__getstructoffset())->diff2(*(FairGeoRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairGeoRotation*) G__getstructoffset())->getElement((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setUnitMatrix();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->setZero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairGeoRotation*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((FairGeoRotation*) G__getstructoffset())->createTRotMatrix((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((FairGeoRotation*) G__getstructoffset())->createTRotMatrix((const Text_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((FairGeoRotation*) G__getstructoffset())->createTRotMatrix());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoRotation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRotation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoRotation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoRotation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRotation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRotation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoRotation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRotation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_204_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoRotation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoRotation G__TFairGeoRotation;
static int G__G__GeoBaseDict_204_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoRotation*) (soff+(sizeof(FairGeoRotation)*i)))->~G__TFairGeoRotation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoRotation*) (soff))->~G__TFairGeoRotation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoOldAsciiIo */
static int G__G__GeoBaseDict_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoOldAsciiIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoOldAsciiIo[n];
     } else {
       p = new((void*) gvp) FairGeoOldAsciiIo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoOldAsciiIo;
     } else {
       p = new((void*) gvp) FairGeoOldAsciiIo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoOldAsciiIo*) G__getstructoffset())->setDirectory((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoOldAsciiIo*) G__getstructoffset())->getDirectory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoOldAsciiIo*) G__getstructoffset())->getFilename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoOldAsciiIo*) G__getstructoffset())->readDetectorSetup((FairGeoInterface*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoOldAsciiIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoOldAsciiIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoOldAsciiIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoOldAsciiIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoOldAsciiIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoOldAsciiIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoOldAsciiIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoOldAsciiIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_214_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoOldAsciiIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoOldAsciiIo G__TFairGeoOldAsciiIo;
static int G__G__GeoBaseDict_214_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoOldAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoOldAsciiIo*) (soff+(sizeof(FairGeoOldAsciiIo)*i)))->~G__TFairGeoOldAsciiIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoOldAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoOldAsciiIo*) (soff))->~G__TFairGeoOldAsciiIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoPcon */
static int G__G__GeoBaseDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoPcon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPcon[n];
     } else {
       p = new((void*) gvp) FairGeoPcon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPcon;
     } else {
       p = new((void*) gvp) FairGeoPcon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoPcon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPcon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoPcon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoPcon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoPcon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPcon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPcon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPcon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPcon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoPcon G__TFairGeoPcon;
static int G__G__GeoBaseDict_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoPcon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoPcon*) (soff+(sizeof(FairGeoPcon)*i)))->~G__TFairGeoPcon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoPcon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoPcon*) (soff))->~G__TFairGeoPcon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoPgon */
static int G__G__GeoBaseDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoPgon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPgon[n];
     } else {
       p = new((void*) gvp) FairGeoPgon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPgon;
     } else {
       p = new((void*) gvp) FairGeoPgon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoPgon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPgon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoPgon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoPgon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoPgon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPgon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPgon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPgon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPgon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoPgon G__TFairGeoPgon;
static int G__G__GeoBaseDict_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoPgon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoPgon*) (soff+(sizeof(FairGeoPgon)*i)))->~G__TFairGeoPgon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoPgon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoPgon*) (soff))->~G__TFairGeoPgon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoRootBuilder */
static int G__G__GeoBaseDict_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRootBuilder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoRootBuilder[n];
     } else {
       p = new((void*) gvp) FairGeoRootBuilder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoRootBuilder;
     } else {
       p = new((void*) gvp) FairGeoRootBuilder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoRootBuilder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeoRootBuilder((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) FairGeoRootBuilder((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRootBuilder*) G__getstructoffset())->setGeoManager((TGeoManager*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairGeoRootBuilder*) G__getstructoffset())->checkOverlaps((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairGeoRootBuilder*) G__getstructoffset())->checkOverlaps();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoRootBuilder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRootBuilder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoRootBuilder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoRootBuilder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoRootBuilder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRootBuilder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoRootBuilder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoRootBuilder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoRootBuilder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoRootBuilder G__TFairGeoRootBuilder;
static int G__G__GeoBaseDict_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoRootBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoRootBuilder*) (soff+(sizeof(FairGeoRootBuilder)*i)))->~G__TFairGeoRootBuilder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoRootBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoRootBuilder*) (soff))->~G__TFairGeoRootBuilder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoSphe */
static int G__G__GeoBaseDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoSphe* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoSphe[n];
     } else {
       p = new((void*) gvp) FairGeoSphe[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoSphe;
     } else {
       p = new((void*) gvp) FairGeoSphe;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoSphe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSphe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoSphe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoSphe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoSphe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSphe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoSphe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoSphe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoSphe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoSphe G__TFairGeoSphe;
static int G__G__GeoBaseDict_224_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoSphe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoSphe*) (soff+(sizeof(FairGeoSphe)*i)))->~G__TFairGeoSphe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoSphe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoSphe*) (soff))->~G__TFairGeoSphe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTrap */
static int G__G__GeoBaseDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTrap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTrap[n];
     } else {
       p = new((void*) gvp) FairGeoTrap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTrap;
     } else {
       p = new((void*) gvp) FairGeoTrap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTrap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTrap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTrap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTrap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTrap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTrap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTrap G__TFairGeoTrap;
static int G__G__GeoBaseDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTrap*) (soff+(sizeof(FairGeoTrap)*i)))->~G__TFairGeoTrap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTrap*) (soff))->~G__TFairGeoTrap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTrd1 */
static int G__G__GeoBaseDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTrd1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTrd1[n];
     } else {
       p = new((void*) gvp) FairGeoTrd1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTrd1;
     } else {
       p = new((void*) gvp) FairGeoTrd1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTrd1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrd1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTrd1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTrd1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTrd1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrd1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTrd1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTrd1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTrd1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTrd1 G__TFairGeoTrd1;
static int G__G__GeoBaseDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTrd1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTrd1*) (soff+(sizeof(FairGeoTrd1)*i)))->~G__TFairGeoTrd1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTrd1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTrd1*) (soff))->~G__TFairGeoTrd1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTube */
static int G__G__GeoBaseDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTube* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTube[n];
     } else {
       p = new((void*) gvp) FairGeoTube[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTube;
     } else {
       p = new((void*) gvp) FairGeoTube;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTube::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTube::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTube::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTube::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTube*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTube::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTube::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTube::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTube::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTube G__TFairGeoTube;
static int G__G__GeoBaseDict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTube*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTube*) (soff+(sizeof(FairGeoTube)*i)))->~G__TFairGeoTube();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTube*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTube*) (soff))->~G__TFairGeoTube();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTubs */
static int G__G__GeoBaseDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTubs* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTubs[n];
     } else {
       p = new((void*) gvp) FairGeoTubs[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTubs;
     } else {
       p = new((void*) gvp) FairGeoTubs;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTubs::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTubs::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTubs::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTubs::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTubs*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTubs::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTubs::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTubs::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTubs::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTubs G__TFairGeoTubs;
static int G__G__GeoBaseDict_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTubs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTubs*) (soff+(sizeof(FairGeoTubs)*i)))->~G__TFairGeoTubs();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTubs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTubs*) (soff))->~G__TFairGeoTubs();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTorus */
static int G__G__GeoBaseDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTorus* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTorus[n];
     } else {
       p = new((void*) gvp) FairGeoTorus[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTorus;
     } else {
       p = new((void*) gvp) FairGeoTorus;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTorus::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTorus::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTorus::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTorus::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTorus*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTorus::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTorus::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTorus::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTorus::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTorus G__TFairGeoTorus;
static int G__G__GeoBaseDict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTorus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTorus*) (soff+(sizeof(FairGeoTorus)*i)))->~G__TFairGeoTorus();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTorus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTorus*) (soff))->~G__TFairGeoTorus();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoCompositeVolume */
static int G__G__GeoBaseDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoCompositeVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCompositeVolume((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairGeoCompositeVolume((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoCompositeVolume[n];
       } else {
         p = new((void*) gvp) FairGeoCompositeVolume[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoCompositeVolume;
       } else {
         p = new((void*) gvp) FairGeoCompositeVolume;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairGeoCompositeVolume*) G__getstructoffset())->getNumComponents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoCompositeVolume*) G__getstructoffset())->getComponent((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCompositeVolume*) G__getstructoffset())->createComponents((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCompositeVolume*) G__getstructoffset())->setComponent((FairGeoVolume*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoCompositeVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCompositeVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoCompositeVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoCompositeVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCompositeVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCompositeVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCompositeVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCompositeVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCompositeVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoCompositeVolume G__TFairGeoCompositeVolume;
static int G__G__GeoBaseDict_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoCompositeVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoCompositeVolume*) (soff+(sizeof(FairGeoCompositeVolume)*i)))->~G__TFairGeoCompositeVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoCompositeVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoCompositeVolume*) (soff))->~G__TFairGeoCompositeVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoAsciiIo */
static int G__G__GeoBaseDict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoAsciiIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoAsciiIo[n];
     } else {
       p = new((void*) gvp) FairGeoAsciiIo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoAsciiIo;
     } else {
       p = new((void*) gvp) FairGeoAsciiIo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoAsciiIo*) G__getstructoffset())->setDirectory((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoAsciiIo*) G__getstructoffset())->getDirectory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairGeoAsciiIo*) G__getstructoffset())->getFilename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGeoAsciiIo*) G__getstructoffset())->readDetectorSetup((FairGeoInterface*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoAsciiIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAsciiIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoAsciiIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoAsciiIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoAsciiIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAsciiIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoAsciiIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoAsciiIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_231_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoAsciiIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoAsciiIo G__TFairGeoAsciiIo;
static int G__G__GeoBaseDict_231_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoAsciiIo*) (soff+(sizeof(FairGeoAsciiIo)*i)))->~G__TFairGeoAsciiIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoAsciiIo*) (soff))->~G__TFairGeoAsciiIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoBrik */
static int G__G__GeoBaseDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoBrik* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoBrik[n];
     } else {
       p = new((void*) gvp) FairGeoBrik[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoBrik;
     } else {
       p = new((void*) gvp) FairGeoBrik;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoBrik::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBrik::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoBrik::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoBrik::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoBrik*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBrik::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBrik::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoBrik::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeoBaseDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoBrik::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoBrik G__TFairGeoBrik;
static int G__G__GeoBaseDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoBrik*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoBrik*) (soff+(sizeof(FairGeoBrik)*i)))->~G__TFairGeoBrik();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoBrik*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoBrik*) (soff))->~G__TFairGeoBrik();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FairGeoTransform */

/* FairGeoVolume */

/* FairGeoBasicShape */

/* FairGeoAssembly */

/* FairGeoCone */

/* FairGeoCons */

/* FairGeoEltu */

/* FairGeoNode */

/* FairGeoMedium */

/* FairGeoBuilder */

/* FairGeoIo */

/* FairGeoSet */

/* FairGeoMedia */

/* FairGeoShapes */

/* FairGeoInterface */

/* FairGeoLoader */

/* FairGeoVector */

/* FairGeoMatrix */

/* FairGeoRotation */

/* FairGeoOldAsciiIo */

/* FairGeoPcon */

/* FairGeoPgon */

/* FairGeoRootBuilder */

/* FairGeoSphe */

/* FairGeoTrap */

/* FairGeoTrd1 */

/* FairGeoTube */

/* FairGeoTubs */

/* FairGeoTorus */

/* FairGeoCompositeVolume */

/* FairGeoAsciiIo */

/* FairGeoBrik */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__GeoBaseDict {
 public:
  G__Sizep2memfuncG__GeoBaseDict(): p(&G__Sizep2memfuncG__GeoBaseDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__GeoBaseDict::*p)();
};

size_t G__get_sizep2memfuncG__GeoBaseDict()
{
  G__Sizep2memfuncG__GeoBaseDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__GeoBaseDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform))) {
     FairGeoTransform *G__Lderived;
     G__Lderived=(FairGeoTransform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume))) {
     FairGeoVolume *G__Lderived;
     G__Lderived=(FairGeoVolume*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape))) {
     FairGeoBasicShape *G__Lderived;
     G__Lderived=(FairGeoBasicShape*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly))) {
     FairGeoAssembly *G__Lderived;
     G__Lderived=(FairGeoAssembly*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone))) {
     FairGeoCone *G__Lderived;
     G__Lderived=(FairGeoCone*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons))) {
     FairGeoCons *G__Lderived;
     G__Lderived=(FairGeoCons*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu))) {
     FairGeoEltu *G__Lderived;
     G__Lderived=(FairGeoEltu*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode))) {
     FairGeoNode *G__Lderived;
     G__Lderived=(FairGeoNode*)0x1000;
     {
       FairGeoVolume *G__Lpbase=(FairGeoVolume*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium))) {
     FairGeoMedium *G__Lderived;
     G__Lderived=(FairGeoMedium*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder))) {
     FairGeoBuilder *G__Lderived;
     G__Lderived=(FairGeoBuilder*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo))) {
     FairGeoIo *G__Lderived;
     G__Lderived=(FairGeoIo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet))) {
     FairGeoSet *G__Lderived;
     G__Lderived=(FairGeoSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia))) {
     FairGeoMedia *G__Lderived;
     G__Lderived=(FairGeoMedia*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes))) {
     FairGeoShapes *G__Lderived;
     G__Lderived=(FairGeoShapes*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface))) {
     FairGeoInterface *G__Lderived;
     G__Lderived=(FairGeoInterface*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader))) {
     FairGeoLoader *G__Lderived;
     G__Lderived=(FairGeoLoader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector))) {
     FairGeoVector *G__Lderived;
     G__Lderived=(FairGeoVector*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix))) {
     FairGeoMatrix *G__Lderived;
     G__Lderived=(FairGeoMatrix*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation))) {
     FairGeoRotation *G__Lderived;
     G__Lderived=(FairGeoRotation*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo))) {
     FairGeoOldAsciiIo *G__Lderived;
     G__Lderived=(FairGeoOldAsciiIo*)0x1000;
     {
       FairGeoIo *G__Lpbase=(FairGeoIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon))) {
     FairGeoPcon *G__Lderived;
     G__Lderived=(FairGeoPcon*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon))) {
     FairGeoPgon *G__Lderived;
     G__Lderived=(FairGeoPgon*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder))) {
     FairGeoRootBuilder *G__Lderived;
     G__Lderived=(FairGeoRootBuilder*)0x1000;
     {
       FairGeoBuilder *G__Lpbase=(FairGeoBuilder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe))) {
     FairGeoSphe *G__Lderived;
     G__Lderived=(FairGeoSphe*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap))) {
     FairGeoTrap *G__Lderived;
     G__Lderived=(FairGeoTrap*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1))) {
     FairGeoTrd1 *G__Lderived;
     G__Lderived=(FairGeoTrd1*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube))) {
     FairGeoTube *G__Lderived;
     G__Lderived=(FairGeoTube*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs))) {
     FairGeoTubs *G__Lderived;
     G__Lderived=(FairGeoTubs*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus))) {
     FairGeoTorus *G__Lderived;
     G__Lderived=(FairGeoTorus*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume))) {
     FairGeoCompositeVolume *G__Lderived;
     G__Lderived=(FairGeoCompositeVolume*)0x1000;
     {
       FairGeoVolume *G__Lpbase=(FairGeoVolume*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo))) {
     FairGeoAsciiIo *G__Lderived;
     G__Lderived=(FairGeoAsciiIo*)0x1000;
     {
       FairGeoIo *G__Lpbase=(FairGeoIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik))) {
     FairGeoBrik *G__Lderived;
     G__Lderived=(FairGeoBrik*)0x1000;
     {
       FairGeoBasicShape *G__Lpbase=(FairGeoBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik),G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik),G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__GeoBaseDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FairGeoTransform */
static void G__setup_memvarFairGeoTransform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform));
   { FairGeoTransform *p; p=(FairGeoTransform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation),-1,-1,2,"rot=",0,"* rotation matrix, describing the orientation*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector),-1,-1,2,"trans=",0,"* translation vector, describing the position*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector),-1,-1,2,"trans_cm=",0,"* translation vector, describing the position in cm*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoVolume */
static void G__setup_memvarFairGeoVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume));
   { FairGeoVolume *p; p=(FairGeoVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"shape=",0,"*eant shape of the volume*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"mother=",0,"* Name of the mother volume*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObjArray),-1,-1,2,"points=",0,"* array of points (type FairGeoVector)*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"transform=",0,"* transformation relative to the mother system */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"fLabTransform=",0,"* transformation to the LAB system; */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium),-1,-1,2,"fMedium=",0,"* medium properties */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPoints=",0,"* number of points */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fHadFormat=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fgMCid=",0,"* Volume Id given by MC*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoBasicShape */
static void G__setup_memvarFairGeoBasicShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape));
   { FairGeoBasicShape *p; p=(FairGeoBasicShape*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPoints=",0,"number of points describing the shape");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParam=",0,"number of parameters needed to create the ROOT shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD),-1,-1,2,"param=",0,"parameters needed to create the ROOT shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"center=",0,"position of the volume center in the technical KS");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"position=",0,"position of the ROOT volume in its ROOT mother");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoAssembly */
static void G__setup_memvarFairGeoAssembly(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly));
   { FairGeoAssembly *p; p=(FairGeoAssembly*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoCone */
static void G__setup_memvarFairGeoCone(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone));
   { FairGeoCone *p; p=(FairGeoCone*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoCons */
static void G__setup_memvarFairGeoCons(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons));
   { FairGeoCons *p; p=(FairGeoCons*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoEltu */
static void G__setup_memvarFairGeoEltu(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu));
   { FairGeoEltu *p; p=(FairGeoEltu*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoNode */
static void G__setup_memvarFairGeoNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode));
   { FairGeoNode *p; p=(FairGeoNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"active=",0,"* in/out flag for creation */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"center=",0,"* position of the GEANT/ROOT center */");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_EFairGeoNodeType),-1,-1,2,"volumeType=",0,"* type of volume */");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"created=",0,"* Flag set kTRUE after creation of volume */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode),-1,-1,2,"copyNode=",0,"* pointer to the reference volume for a copy */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TGeoVolume),-1,-1,2,"rootVolume=",0,"* pointer to the ROOT node */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape),-1,-1,2,"pShape=",0,"* pointer to the shape */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode),-1,-1,2,"pMother=",0,"!    /** pointer to the mother volume */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium),-1,-1,2,"medium=",0,"* pointer to medium */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform),-1,-1,2,"labTransform=",0,"* Transformation to the LAB system */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObjArray),-1,-1,2,"fDaughterList=",0,"* List of daughter Nodes  */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"fTruncName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoMedium */
static void G__setup_memvarFairGeoMedium(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium));
   { FairGeoMedium *p; p=(FairGeoMedium*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"medId=",0,"* Unique number for the material and the medium */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"autoflag=",0,"* Flag for default values of madfld .. minstep*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nComponents=",0,"* Number of material components */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"weightFac=",0,"* Factor for weights (1: relative w., -1: w. by number of atoms)*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"ca=",0,"[nComponents] /** Atomic weights for the components*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"cz=",0,"[nComponents] /** Atomic numbers for the components*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"cw=",0,"[nComponents] /** Weights of the components in a mixture*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"density=",0,"* Density in g cm(**-3)*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"radLen=",0,"* Radiation lenght*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sensFlag=",0,"* Sensitivity flag*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fldFlag=",0,"* Field flag*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fld=",0,"* Maximum field value in kilogauss*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"epsil=",0,"* Boundary crossing precision*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"madfld=",0,"* Maximum angular deviation due to field*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"maxstep=",0,"* Maximum step permitted*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"maxde=",0,"* Maximum fractional energy loss*/");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"minstep=",0,"* Minimum value for step*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"npckov=",0,"* Number of optical parameters for Cerenkov*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"ppckov=",0,"[npckov]  /** Photon momentum*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"absco=",0,"[npckov] /** Absoption length*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"effic=",0,"[npckov] /** Detection efficiency*/");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"rindex=",0,"[npckov] /** Refraction index*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoBuilder */
static void G__setup_memvarFairGeoBuilder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder));
   { FairGeoBuilder *p; p=(FairGeoBuilder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nRot=",0,"number of defined rotations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMed=",0,"number of defined media");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoIo */
static void G__setup_memvarFairGeoIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo));
   { FairGeoIo *p; p=(FairGeoIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoSet */
static void G__setup_memvarFairGeoSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet));
   { FairGeoSet *p; p=(FairGeoSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"hadesGeo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList),-1,-1,2,"volumes=",0,"* list of volumes */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList),-1,-1,2,"masterNodes=",0,"* pointer to list of mother volumes from other detector parts*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxSectors=",0,"* maximum number of sectors (-1 for detectors outside any sector)*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxKeepinVolumes=",0,"* maximum number of keepin volumes per sector*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxModules=",0,"* maximum number of modules per sector*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayI),-1,-1,2,"modules=",0,"* Module's array.*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes),-1,-1,2,"pShapes=",0,"* pointer to the class FairGeoShapes*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"geoFile=",0,"* name of geometry input file or Oracle*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"author=",0,"* author of the media version*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,2,"description=",0,"* description of the version*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoMedia */
static void G__setup_memvarFairGeoMedia(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia));
   { FairGeoMedia *p; p=(FairGeoMedia*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList),-1,-1,4,"media=",0,"* list of media */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"inputFile=",0,"* name of input file or Oracle */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"author=",0,"* author of the media version */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"description=",0,"* description of the version */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoShapes */
static void G__setup_memvarFairGeoShapes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes));
   { FairGeoShapes *p; p=(FairGeoShapes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList),-1,-1,2,"shapes=",0,"list of already created shape classes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoInterface */
static void G__setup_memvarFairGeoInterface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface));
   { FairGeoInterface *p; p=(FairGeoInterface*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),-1,-1,4,"fileInput=",0,"* ASCII file I/O */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),-1,-1,4,"oraInput=",0,"* Oracle input */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo),-1,-1,4,"output=",0,"* Oracle output */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nSets=",0,"* number of geometry sets (detector parts) */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nActualSets=",0,"* number of set in actual geometry */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObjArray),-1,-1,4,"sets=",0,"* array of geometry  sets */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia),-1,-1,4,"media=",0,"* list of media */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes),-1,-1,4,"shapes=",0,"* list of shapes */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList),-1,-1,4,"masterNodes=",0,"* list of mother nodes used by several sets */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"setupFile=",0,"* file with detector setups (subsets) */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder),-1,-1,4,"geoBuilder=",0,"* actually used geometry builder */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoLoader */
static void G__setup_memvarFairGeoLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader));
   { FairGeoLoader *p; p=(FairGeoLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader),-1,-2,4,"fgInstance=",0,"!  /**Singleton instance*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface),-1,-1,4,"fInterface=",0,"!  /** Hades Geometry Interface*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder),-1,-1,4,"fGeoBuilder=",0,"!   /**Geometry builder*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoVector */
static void G__setup_memvarFairGeoVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector));
   { FairGeoVector *p; p=(FairGeoVector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoMatrix */
static void G__setup_memvarFairGeoMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix));
   { FairGeoMatrix *p; p=(FairGeoMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fM[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoRotation */
static void G__setup_memvarFairGeoRotation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   { FairGeoRotation *p; p=(FairGeoRotation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"rot[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoOldAsciiIo */
static void G__setup_memvarFairGeoOldAsciiIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo));
   { FairGeoOldAsciiIo *p; p=(FairGeoOldAsciiIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"filename=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"filedir=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"writable=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("fstream"),-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoPcon */
static void G__setup_memvarFairGeoPcon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon));
   { FairGeoPcon *p; p=(FairGeoPcon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoPgon */
static void G__setup_memvarFairGeoPgon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon));
   { FairGeoPgon *p; p=(FairGeoPgon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoRootBuilder */
static void G__setup_memvarFairGeoRootBuilder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder));
   { FairGeoRootBuilder *p; p=(FairGeoRootBuilder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TGeoManager),-1,-1,2,"geoManager=",0,"ROOT geometry manager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoSphe */
static void G__setup_memvarFairGeoSphe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe));
   { FairGeoSphe *p; p=(FairGeoSphe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTrap */
static void G__setup_memvarFairGeoTrap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap));
   { FairGeoTrap *p; p=(FairGeoTrap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation),-1,-1,4,"intrinsicRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTrd1 */
static void G__setup_memvarFairGeoTrd1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1));
   { FairGeoTrd1 *p; p=(FairGeoTrd1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation),-1,-1,4,"intrinsicRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTube */
static void G__setup_memvarFairGeoTube(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube));
   { FairGeoTube *p; p=(FairGeoTube*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTubs */
static void G__setup_memvarFairGeoTubs(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs));
   { FairGeoTubs *p; p=(FairGeoTubs*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTorus */
static void G__setup_memvarFairGeoTorus(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus));
   { FairGeoTorus *p; p=(FairGeoTorus*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoCompositeVolume */
static void G__setup_memvarFairGeoCompositeVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume));
   { FairGeoCompositeVolume *p; p=(FairGeoCompositeVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObjArray),-1,-1,2,"components=",0,"array of components (type FairGeoVolume)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoAsciiIo */
static void G__setup_memvarFairGeoAsciiIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo));
   { FairGeoAsciiIo *p; p=(FairGeoAsciiIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"filename=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString),-1,-1,4,"filedir=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"writable=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("fstream"),-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoBrik */
static void G__setup_memvarFairGeoBrik(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik));
   { FairGeoBrik *p; p=(FairGeoBrik*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__GeoBaseDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFairGeoTransform(void) {
   /* FairGeoTransform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform));
   G__memfunc_setup("FairGeoTransform",1625,G__G__GeoBaseDict_183_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoTransform",1625,G__G__GeoBaseDict_183_0_2, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__GeoBaseDict_183_0_3, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 1, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotMatrix",1258,G__G__GeoBaseDict_183_0_4, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransVector",1467,G__G__GeoBaseDict_183_0_5, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__G__GeoBaseDict_183_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__G__GeoBaseDict_183_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__G__GeoBaseDict_183_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__G__GeoBaseDict_183_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoVector' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__G__GeoBaseDict_183_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__G__GeoBaseDict_183_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__G__GeoBaseDict_183_0_12, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__G__GeoBaseDict_183_0_13, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__G__GeoBaseDict_183_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__G__GeoBaseDict_183_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__G__GeoBaseDict_183_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__G__GeoBaseDict_183_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_183_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTranslation",1487,G__G__GeoBaseDict_183_0_19, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotation",1168,G__G__GeoBaseDict_183_0_20, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransform",1288,G__G__GeoBaseDict_183_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_183_0_22, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTransform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_183_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTransform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_183_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTransform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_183_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTransform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_183_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_183_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTransform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_183_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTransform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_183_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTransform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_183_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTransform::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTransform", 1751, G__G__GeoBaseDict_183_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoVolume(void) {
   /* FairGeoVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume));
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume), -1, 1, 1, 1, 4, 0, "u 'FairGeoVolume' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoVolume",1301,G__G__GeoBaseDict_184_0_2, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoVolume",1301,G__G__GeoBaseDict_184_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume), -1, 0, 1, 1, 1, 0, "u 'FairGeoVolume' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__G__GeoBaseDict_184_0_4, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShape",817,G__G__GeoBaseDict_184_0_5, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__G__GeoBaseDict_184_0_6, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransform",1276,G__G__GeoBaseDict_184_0_7, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__G__GeoBaseDict_184_0_8, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__G__GeoBaseDict_184_0_9, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPoints",1261,G__G__GeoBaseDict_184_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint",842,G__G__GeoBaseDict_184_0_11, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__G__GeoBaseDict_184_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumePar",1255,G__G__GeoBaseDict_184_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoVolume' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShape",829,G__G__GeoBaseDict_184_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__G__GeoBaseDict_184_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createPoints",1265,G__G__GeoBaseDict_184_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPoint",854,G__G__GeoBaseDict_184_0_17, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - - d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPoint",854,G__G__GeoBaseDict_184_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - u 'FairGeoVector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__G__GeoBaseDict_184_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_184_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setHadFormat",1218,G__G__GeoBaseDict_184_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getVolParameter",1554,G__G__GeoBaseDict_184_0_22, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nPoint i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCid",669,G__G__GeoBaseDict_184_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMCid",681,G__G__GeoBaseDict_184_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - MCid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_184_0_25, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_184_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_184_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_184_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_184_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_184_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_184_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_184_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_184_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoVolume::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoVolume", 1427, G__G__GeoBaseDict_184_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoBasicShape(void) {
   /* FairGeoBasicShape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape));
   G__memfunc_setup("FairGeoBasicShape",1648,G__G__GeoBaseDict_186_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPoints",1261,G__G__GeoBaseDict_186_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumParam",1121,G__G__GeoBaseDict_186_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam",817,G__G__GeoBaseDict_186_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCenterPosition",1782,G__G__GeoBaseDict_186_0_5, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVoluPosition",1595,G__G__GeoBaseDict_186_0_6, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readPoints",1049,G__G__GeoBaseDict_186_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,G__G__GeoBaseDict_186_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,G__G__GeoBaseDict_186_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluParam",1322,G__G__GeoBaseDict_186_0_10, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,G__G__GeoBaseDict_186_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,G__G__GeoBaseDict_186_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__G__GeoBaseDict_186_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("posInMother",1144,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'FairGeoTransform' - 11 - - u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_186_0_15, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoBasicShape::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_186_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBasicShape::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_186_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoBasicShape::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_186_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoBasicShape::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_186_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_186_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBasicShape::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_186_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBasicShape::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_186_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBasicShape::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_186_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBasicShape::DeclFileLine) ), 0);
   G__memfunc_setup("FairGeoBasicShape",1648,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 0, 1, 1, 4, 0, "u 'FairGeoBasicShape' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 1, 1, 1, 4, 0, "u 'FairGeoBasicShape' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoBasicShape", 1774, G__G__GeoBaseDict_186_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoAssembly(void) {
   /* FairGeoAssembly */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly));
   G__memfunc_setup("FairGeoAssembly",1501,G__G__GeoBaseDict_187_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAssembly), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - pFile U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_187_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoAssembly::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_187_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAssembly::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_187_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoAssembly::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_187_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoAssembly::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_187_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_187_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAssembly::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_187_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoAssembly::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_187_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAssembly::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_187_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoAssembly::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoAssembly", 1627, G__G__GeoBaseDict_187_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoCone(void) {
   /* FairGeoCone */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone));
   G__memfunc_setup("FairGeoCone",1058,G__G__GeoBaseDict_188_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCone), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_188_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoCone::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_188_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCone::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_188_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoCone::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_188_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoCone::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_188_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_188_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCone::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_188_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCone::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_188_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCone::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_188_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCone::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoCone", 1184, G__G__GeoBaseDict_188_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoCons(void) {
   /* FairGeoCons */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons));
   G__memfunc_setup("FairGeoCons",1072,G__G__GeoBaseDict_189_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCons), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_189_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoCons::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_189_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCons::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_189_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoCons::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_189_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoCons::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_189_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_189_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCons::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_189_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCons::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_189_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCons::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_189_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCons::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoCons", 1198, G__G__GeoBaseDict_189_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoEltu(void) {
   /* FairGeoEltu */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu));
   G__memfunc_setup("FairGeoEltu",1079,G__G__GeoBaseDict_190_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoEltu), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_190_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoEltu::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_190_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoEltu::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_190_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoEltu::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_190_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoEltu::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_190_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_190_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoEltu::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_190_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoEltu::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_190_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoEltu::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_190_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoEltu::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoEltu", 1205, G__G__GeoBaseDict_190_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoNode(void) {
   /* FairGeoNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode));
   G__memfunc_setup("FairGeoNode",1059,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 1, 1, 4, 0, "u 'FairGeoNode' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 1, 1, 1, 4, 0, "u 'FairGeoNode' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoNode",1059,G__G__GeoBaseDict_191_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoNode",1059,G__G__GeoBaseDict_191_0_4, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 1, 1, 1, 0, "u 'FairGeoNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughter",1085,G__G__GeoBaseDict_191_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoNode' - 0 - fNode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfDaughters",1816,G__G__GeoBaseDict_191_0_6, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolumeType",1370,G__G__GeoBaseDict_191_0_7, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_EFairGeoNodeType), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTopNode",917,G__G__GeoBaseDict_191_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRefNode",895,G__G__GeoBaseDict_191_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isKeepin",824,G__G__GeoBaseDict_191_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModule",834,G__G__GeoBaseDict_191_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNo",920,G__G__GeoBaseDict_191_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapePointer",1554,G__G__GeoBaseDict_191_0_13, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherNode",1333,G__G__GeoBaseDict_191_0_14, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__G__GeoBaseDict_191_0_15, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isActive",824,G__G__GeoBaseDict_191_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCenterPosition",1782,G__G__GeoBaseDict_191_0_17, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameters",1364,G__G__GeoBaseDict_191_0_18, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosition",1173,G__G__GeoBaseDict_191_0_19, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__G__GeoBaseDict_191_0_20, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNode",1121,G__G__GeoBaseDict_191_0_21, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRootVolume",1372,G__G__GeoBaseDict_191_0_22, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__G__GeoBaseDict_191_0_23, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSensitive",1174,G__G__GeoBaseDict_191_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCreated",916,G__G__GeoBaseDict_191_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCreated",1028,G__G__GeoBaseDict_191_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__G__GeoBaseDict_191_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumeType",1382,G__G__GeoBaseDict_191_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i 'EFairGeoNodeType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumePar",1255,G__G__GeoBaseDict_191_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShape",829,G__G__GeoBaseDict_191_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoBasicShape' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__G__GeoBaseDict_191_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoNode' - 0 - moth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMedium",941,G__G__GeoBaseDict_191_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoMedium' - 0 - med", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setActive",936,G__G__GeoBaseDict_191_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCenterPosition",1794,G__G__GeoBaseDict_191_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyNode",1133,G__G__GeoBaseDict_191_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoNode' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRootVolume",1384,G__G__GeoBaseDict_191_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLabTransform",1630,G__G__GeoBaseDict_191_0_37, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabTransform",1559,G__G__GeoBaseDict_191_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcModuleTransform",1973,G__G__GeoBaseDict_191_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'FairGeoTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRefPos",994,G__G__GeoBaseDict_191_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'FairGeoVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_191_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__G__GeoBaseDict_191_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'FairGeoNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTruncName",1241,G__G__GeoBaseDict_191_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - aName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTruncName",1229,G__G__GeoBaseDict_191_0_46, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_191_0_47, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_191_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_191_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_191_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_191_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_191_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_191_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_191_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_191_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoNode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoNode", 1185, G__G__GeoBaseDict_191_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoMedium(void) {
   /* FairGeoMedium */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium));
   G__memfunc_setup("FairGeoMedium",1278,G__G__GeoBaseDict_192_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__GeoBaseDict_192_0_2, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 1, 1, 1, 1, 0, "u 'FairGeoMedium' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediumIndex",1445,G__G__GeoBaseDict_192_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMediumIndex",1433,G__G__GeoBaseDict_192_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAutoFlag",1119,G__G__GeoBaseDict_192_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAutoFlag",1107,G__G__GeoBaseDict_192_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNComponents",1472,G__G__GeoBaseDict_192_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNComponents",1460,G__G__GeoBaseDict_192_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setComponent",1279,G__G__GeoBaseDict_192_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 '1.' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComponent",1267,G__G__GeoBaseDict_192_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeightFac",1202,G__G__GeoBaseDict_192_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDensity",1068,G__G__GeoBaseDict_192_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDensity",1056,G__G__GeoBaseDict_192_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRadiationLength",1865,G__G__GeoBaseDict_192_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRadiationLength",1853,G__G__GeoBaseDict_192_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNpckov",957,G__G__GeoBaseDict_192_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNpckov",945,G__G__GeoBaseDict_192_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCerenkovPar",1452,G__G__GeoBaseDict_192_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCerenkovPar",1440,G__G__GeoBaseDict_192_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediumPar",1232,G__G__GeoBaseDict_192_0_20, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 '-1.' maxDeviation d - 'Double_t' 0 '-1.' maxStep "
"d - 'Double_t' 0 '-1.' maxDE d - 'Double_t' 0 '-1.' minStepDouble_t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMediumPar",1220,G__G__GeoBaseDict_192_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSensitive",1174,G__G__GeoBaseDict_192_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSensitivityFlag",1893,G__G__GeoBaseDict_192_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFieldFlag",1182,G__G__GeoBaseDict_192_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getField",804,G__G__GeoBaseDict_192_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpsil",829,G__G__GeoBaseDict_192_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__G__GeoBaseDict_192_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - i - 'Int_t' 0 - autoflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_192_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_192_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRadiationLength",1936,G__G__GeoBaseDict_192_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoMedium",1278,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 0, 1, 1, 4, 0, "u 'FairGeoMedium' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_192_0_32, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoMedium::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_192_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedium::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_192_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoMedium::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_192_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoMedium::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_192_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_192_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedium::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_192_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMedium::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_192_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedium::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_192_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMedium::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoMedium", 1404, G__G__GeoBaseDict_192_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoBuilder(void) {
   /* FairGeoBuilder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder));
   G__memfunc_setup("createNode",1018,G__G__GeoBaseDict_193_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoNode' - 0 - - i - 'Int_t' 0 '0' hadFormat", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("createMedium",1237,G__G__GeoBaseDict_193_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedium' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("finalize",850,G__G__GeoBaseDict_193_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNMedia",846,G__G__GeoBaseDict_193_0_6, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMedia",858,G__G__GeoBaseDict_193_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - nmed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_193_0_8, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoBuilder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_193_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBuilder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_193_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoBuilder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_193_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoBuilder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_193_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_193_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBuilder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_193_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBuilder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_193_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBuilder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_193_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBuilder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoBuilder", 1506, G__G__GeoBaseDict_193_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__GeoBaseDict_193_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder), -1, 1, 1, 1, 1, 0, "u 'FairGeoBuilder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoIo(void) {
   /* FairGeoIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo));
   G__memfunc_setup("open",434,G__G__GeoBaseDict_194_0_1, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - - C - 'Text_t' 10 '\"in\"' status", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("close",534,G__G__GeoBaseDict_194_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_194_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("isOpen",622,G__G__GeoBaseDict_194_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("isWritable",1046,G__G__GeoBaseDict_194_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read",412,G__G__GeoBaseDict_194_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read",412,G__G__GeoBaseDict_194_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoSet' - 0 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_194_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_194_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("readGeomConfig",1402,G__G__GeoBaseDict_194_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoInterface' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setSimulRefRun",1448,G__G__GeoBaseDict_194_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setHistoryDate",1468,G__G__GeoBaseDict_194_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_194_0_13, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_194_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_194_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_194_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_194_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_194_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_194_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_194_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_194_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoIo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoIo", 979, G__G__GeoBaseDict_194_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__GeoBaseDict_194_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo), -1, 1, 1, 1, 1, 0, "u 'FairGeoIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoSet(void) {
   /* FairGeoSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet));
   G__memfunc_setup("FairGeoSet",969,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInout",939,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readTransform",1368,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - u 'FairGeoTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readVolumeParams",1656,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - - "
"U 'FairGeoNode' - 0 - - U 'TList' - 0 '0' l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readKeepIn",984,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - - "
"u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readModule",1026,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - - "
"u 'TString' - 1 - - u 'TString' - 1 - - "
"g - 'Bool_t' 0 'kFALSE' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShapes",944,G__G__GeoBaseDict_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoShapes' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMasterNodes",1457,G__G__GeoBaseDict_195_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeomFile",1108,G__G__GeoBaseDict_195_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeomFile",1096,G__G__GeoBaseDict_195_0_10, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSectors",1353,G__G__GeoBaseDict_195_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxModules",1343,G__G__GeoBaseDict_195_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxKeepinVolumes",1965,G__G__GeoBaseDict_195_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModules",1061,G__G__GeoBaseDict_195_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModules",1049,G__G__GeoBaseDict_195_0_15, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__G__GeoBaseDict_195_0_16, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolume",952,G__G__GeoBaseDict_195_0_17, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMasterNode",1330,G__G__GeoBaseDict_195_0_18, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoNode), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfVolumes",1660,G__G__GeoBaseDict_195_0_19, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapes",932,G__G__GeoBaseDict_195_0_20, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAuthor",959,G__G__GeoBaseDict_195_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDescription",1488,G__G__GeoBaseDict_195_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuthor",947,G__G__GeoBaseDict_195_0_23, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDescription",1476,G__G__GeoBaseDict_195_0_24, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKeepinName",1309,G__G__GeoBaseDict_195_0_25, 67, -1, -1, 0, 2, 1, 1, 1, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModuleName",1319,G__G__GeoBaseDict_195_0_26, 67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,G__G__GeoBaseDict_195_0_27, 67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,G__G__GeoBaseDict_195_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,G__G__GeoBaseDict_195_0_29, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__G__GeoBaseDict_195_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,G__G__GeoBaseDict_195_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_195_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_195_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("create",628,G__G__GeoBaseDict_195_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoBuilder' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__G__GeoBaseDict_195_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairGeoSet' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_195_0_36, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_195_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_195_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_195_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_195_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_195_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_195_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_195_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_195_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoSet::DeclFileLine) ), 0);
   G__memfunc_setup("FairGeoSet",969,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet), -1, 0, 1, 1, 4, 0, "u 'FairGeoSet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet), -1, 1, 1, 1, 4, 0, "u 'FairGeoSet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoSet", 1095, G__G__GeoBaseDict_195_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoMedia(void) {
   /* FairGeoMedia */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia));
   G__memfunc_setup("FairGeoMedia",1149,G__G__GeoBaseDict_196_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInputFile",1244,G__G__GeoBaseDict_196_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputFile",1232,G__G__GeoBaseDict_196_0_3, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMedium",906,G__G__GeoBaseDict_196_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoMedium' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__G__GeoBaseDict_196_0_5, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedium), -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfMedia",1393,G__G__GeoBaseDict_196_0_6, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__G__GeoBaseDict_196_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_196_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list",444,G__G__GeoBaseDict_196_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__G__GeoBaseDict_196_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAuthor",959,G__G__GeoBaseDict_196_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDescription",1488,G__G__GeoBaseDict_196_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuthor",947,G__G__GeoBaseDict_196_0_13, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDescription",1476,G__G__GeoBaseDict_196_0_14, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoMedia",1149,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia), -1, 0, 1, 1, 4, 0, "u 'FairGeoMedia' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia), -1, 1, 1, 1, 4, 0, "u 'FairGeoMedia' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_196_0_17, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoMedia::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_196_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedia::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_196_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoMedia::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_196_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoMedia::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_196_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_196_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedia::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_196_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMedia::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_196_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMedia::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_196_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMedia::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoMedia", 1275, G__G__GeoBaseDict_196_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoShapes(void) {
   /* FairGeoShapes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes));
   G__memfunc_setup("FairGeoShapes",1281,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes), -1, 0, 1, 1, 4, 0, "u 'FairGeoShapes' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes), -1, 1, 1, 1, 4, 0, "u 'FairGeoShapes' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoShapes",1281,G__G__GeoBaseDict_197_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectShape",1137,G__G__GeoBaseDict_197_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectShape",1137,G__G__GeoBaseDict_197_0_5, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBasicShape), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readPoints",1049,G__G__GeoBaseDict_197_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writePoints",1192,G__G__GeoBaseDict_197_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printPoints",1194,G__G__GeoBaseDict_197_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_197_0_9, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoShapes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_197_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoShapes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_197_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoShapes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_197_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoShapes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_197_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_197_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoShapes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_197_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoShapes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_197_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoShapes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_197_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoShapes::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoShapes", 1407, G__G__GeoBaseDict_197_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoInterface(void) {
   /* FairGeoInterface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface));
   G__memfunc_setup("FairGeoInterface",1582,G__G__GeoBaseDict_199_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOracleInput",1458,G__G__GeoBaseDict_199_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoIo' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutput",989,G__G__GeoBaseDict_199_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoIo' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeomBuilder",1435,G__G__GeoBaseDict_199_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoBuilder' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFileInput",1232,G__G__GeoBaseDict_199_0_5, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOraInput",1138,G__G__GeoBaseDict_199_0_6, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutput",977,G__G__GeoBaseDict_199_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapes",932,G__G__GeoBaseDict_199_0_8, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedia",800,G__G__GeoBaseDict_199_0_9, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMedia), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMasterNodes",1445,G__G__GeoBaseDict_199_0_10, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addInputFile",1209,G__G__GeoBaseDict_199_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addGeoModule",1194,G__G__GeoBaseDict_199_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediaFile",1196,G__G__GeoBaseDict_199_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSet",717,G__G__GeoBaseDict_199_0_14, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSet), -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSet",712,G__G__GeoBaseDict_199_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeSet",855,G__G__GeoBaseDict_199_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeSet",855,G__G__GeoBaseDict_199_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoSet' - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createSet",928,G__G__GeoBaseDict_199_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteSet",927,G__G__GeoBaseDict_199_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - pSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readMedia",892,G__G__GeoBaseDict_199_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeMedia",1035,G__G__GeoBaseDict_199_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeMedia",1035,G__G__GeoBaseDict_199_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readAll",693,G__G__GeoBaseDict_199_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeAll",836,G__G__GeoBaseDict_199_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createAll",909,G__G__GeoBaseDict_199_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' withCleanup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createGeometry",1472,G__G__GeoBaseDict_199_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' withCleanup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readGeomConfig",1402,G__G__GeoBaseDict_199_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSetupFile",1210,G__G__GeoBaseDict_199_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSetupFile",1325,G__G__GeoBaseDict_199_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_199_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoOfSets",1085,G__G__GeoBaseDict_199_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoInterface",1582,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface), -1, 0, 1, 1, 4, 0, "u 'FairGeoInterface' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface), -1, 1, 1, 1, 4, 0, "u 'FairGeoInterface' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("connectInput",1274,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoIo), -1, 0, 1, 1, 4, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("connectOutput",1403,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_199_0_36, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoInterface::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_199_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoInterface::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_199_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoInterface::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_199_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoInterface::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_199_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_199_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoInterface::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_199_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoInterface::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_199_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoInterface::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_199_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoInterface::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoInterface", 1708, G__G__GeoBaseDict_199_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoLoader(void) {
   /* FairGeoLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader));
   G__memfunc_setup("FairGeoLoader",1268,G__G__GeoBaseDict_200_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader), -1, 0, 2, 1, 1, 0, 
"C - - 10 - Name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoLoader",1268,G__G__GeoBaseDict_200_0_2, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeoInterface",1516,G__G__GeoBaseDict_200_0_3, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoInterface), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeoBuilder",1314,G__G__GeoBaseDict_200_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBuilder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__GeoBaseDict_200_0_5, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairGeoLoader* (*)())(&FairGeoLoader::Instance) ), 0);
   G__memfunc_setup("FairGeoLoader",1268,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader), -1, 0, 1, 1, 4, 0, "u 'FairGeoLoader' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoLoader), -1, 1, 1, 1, 4, 0, "u 'FairGeoLoader' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_200_0_8, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_200_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_200_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_200_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_200_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_200_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_200_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_200_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_200_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoLoader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoLoader", 1394, G__G__GeoBaseDict_200_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoVector(void) {
   /* FairGeoVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector));
   G__memfunc_setup("round",552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - d i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoVector",1296,G__G__GeoBaseDict_201_0_2, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0' dx d - 'Double_t' 0 '0' dy "
"d - 'Double_t' 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoVector",1296,G__G__GeoBaseDict_201_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 0, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__GeoBaseDict_201_0_4, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__GeoBaseDict_201_0_5, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__G__GeoBaseDict_201_0_6, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__G__GeoBaseDict_201_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__G__GeoBaseDict_201_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__G__GeoBaseDict_201_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getValues",944,G__G__GeoBaseDict_201_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ",599,G__G__GeoBaseDict_201_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - xx d - 'Double_t' 10 - yy "
"d - 'Double_t' 10 - zz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__G__GeoBaseDict_201_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__G__GeoBaseDict_201_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__G__GeoBaseDict_201_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVector",959,G__G__GeoBaseDict_201_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVector",959,G__G__GeoBaseDict_201_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__G__GeoBaseDict_201_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__G__GeoBaseDict_201_0_18, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__GeoBaseDict_201_0_19, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__G__GeoBaseDict_201_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__G__GeoBaseDict_201_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__G__GeoBaseDict_201_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__G__GeoBaseDict_201_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__G__GeoBaseDict_201_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__G__GeoBaseDict_201_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__GeoBaseDict_201_0_26, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__GeoBaseDict_201_0_27, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__G__GeoBaseDict_201_0_28, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__G__GeoBaseDict_201_0_29, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__GeoBaseDict_201_0_30, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__GeoBaseDict_201_0_31, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 1, 1, 1, 0, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__G__GeoBaseDict_201_0_32, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__G__GeoBaseDict_201_0_33, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("abs",310,G__G__GeoBaseDict_201_0_34, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scalarProduct",1367,G__G__GeoBaseDict_201_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vectorProduct",1396,G__G__GeoBaseDict_201_0_36, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("length",642,G__G__GeoBaseDict_201_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__G__GeoBaseDict_201_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_201_0_39, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("round",552,G__G__GeoBaseDict_201_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_201_0_41, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoVector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_201_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_201_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoVector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_201_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoVector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_201_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_201_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_201_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoVector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_201_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoVector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_201_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoVector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoVector", 1422, G__G__GeoBaseDict_201_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoMatrix(void) {
   /* FairGeoMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix));
   G__memfunc_setup("FairGeoMatrix",1298,G__G__GeoBaseDict_202_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__G__GeoBaseDict_202_0_2, 100, -1, G__defined_typename("Double_t"), 1, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("det",317,G__G__GeoBaseDict_202_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__G__GeoBaseDict_202_0_4, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 0, "u 'FairGeoVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__G__GeoBaseDict_202_0_5, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_202_0_6, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_202_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_202_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_202_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_202_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_202_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_202_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_202_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_202_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairGeoMatrix", 1298, G__G__GeoBaseDict_202_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix), -1, 0, 1, 1, 1, 0, "u 'FairGeoMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoMatrix", 1424, G__G__GeoBaseDict_202_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__GeoBaseDict_202_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoMatrix), -1, 1, 1, 1, 1, 0, "u 'FairGeoMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoRotation(void) {
   /* FairGeoRotation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation));
   G__memfunc_setup("FairGeoRotation",1517,G__G__GeoBaseDict_204_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoRotation",1517,G__G__GeoBaseDict_204_0_2, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoRotation",1517,G__G__GeoBaseDict_204_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoRotation",1517,G__G__GeoBaseDict_204_0_4, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrix",961,G__G__GeoBaseDict_204_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrix",961,G__G__GeoBaseDict_204_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEulerAngles",1443,G__G__GeoBaseDict_204_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__G__GeoBaseDict_204_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 10 - a i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__G__GeoBaseDict_204_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__GeoBaseDict_204_0_10, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__G__GeoBaseDict_204_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__G__GeoBaseDict_204_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__G__GeoBaseDict_204_0_13, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVector), -1, 0, 1, 1, 1, 8, "u 'FairGeoVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__G__GeoBaseDict_204_0_14, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 1, 1, 1, 8, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__G__GeoBaseDict_204_0_15, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__G__GeoBaseDict_204_0_16, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 1, 1, 1, 0, "u 'FairGeoRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isUnitMatrix",1265,G__G__GeoBaseDict_204_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__G__GeoBaseDict_204_0_18, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__G__GeoBaseDict_204_0_19, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRotation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("determinant",1179,G__G__GeoBaseDict_204_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diff2",459,G__G__GeoBaseDict_204_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'FairGeoRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__G__GeoBaseDict_204_0_22, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnitMatrix",1377,G__G__GeoBaseDict_204_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZero",748,G__G__GeoBaseDict_204_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__GeoBaseDict_204_0_25, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createTRotMatrix",1650,G__G__GeoBaseDict_204_0_26, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TRotMatrix), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"\"' name C - 'Text_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_204_0_27, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoRotation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_204_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRotation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_204_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoRotation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_204_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoRotation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_204_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_204_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRotation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_204_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoRotation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_204_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRotation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_204_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoRotation::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoRotation", 1643, G__G__GeoBaseDict_204_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoOldAsciiIo(void) {
   /* FairGeoOldAsciiIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo));
   G__memfunc_setup("FairGeoOldAsciiIo",1629,G__G__GeoBaseDict_214_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirectory",1281,G__G__GeoBaseDict_214_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirectory",1269,G__G__GeoBaseDict_214_0_3, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFilename",1121,G__G__GeoBaseDict_214_0_4, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - - C - 'Text_t' 10 '\"in\"' status", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isOpen",622,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isWritable",1046,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoSet' - 0 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readGeomConfig",1402,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoInterface' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readDetectorSetup",1767,G__G__GeoBaseDict_214_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoInterface' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSimulRefRun",1448,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setHistoryDate",1468,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calculateShapePoints",2076,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"D - 'Double_t' 0 - - U 'FairGeoNode' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoOldAsciiIo",1629,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo), -1, 0, 1, 1, 4, 0, "u 'FairGeoOldAsciiIo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo), -1, 1, 1, 1, 4, 0, "u 'FairGeoOldAsciiIo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_214_0_21, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoOldAsciiIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_214_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoOldAsciiIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_214_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoOldAsciiIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_214_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoOldAsciiIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_214_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_214_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoOldAsciiIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_214_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoOldAsciiIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_214_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoOldAsciiIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_214_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoOldAsciiIo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoOldAsciiIo", 1755, G__G__GeoBaseDict_214_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoPcon(void) {
   /* FairGeoPcon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon));
   G__memfunc_setup("FairGeoPcon",1069,G__G__GeoBaseDict_215_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPcon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_215_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoPcon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_215_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPcon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_215_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoPcon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_215_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoPcon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_215_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_215_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPcon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_215_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPcon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_215_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPcon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_215_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPcon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoPcon", 1195, G__G__GeoBaseDict_215_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoPgon(void) {
   /* FairGeoPgon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon));
   G__memfunc_setup("FairGeoPgon",1073,G__G__GeoBaseDict_216_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoPgon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_216_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoPgon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_216_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPgon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_216_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoPgon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_216_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoPgon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_216_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_216_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPgon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_216_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPgon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_216_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPgon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_216_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPgon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoPgon", 1199, G__G__GeoBaseDict_216_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoRootBuilder(void) {
   /* FairGeoRootBuilder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder));
   G__memfunc_setup("FairGeoRootBuilder",1800,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder), -1, 0, 1, 1, 4, 0, "u 'FairGeoRootBuilder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder), -1, 1, 1, 1, 4, 0, "u 'FairGeoRootBuilder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoRootBuilder",1800,G__G__GeoBaseDict_218_0_3, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoRootBuilder",1800,G__G__GeoBaseDict_218_0_4, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoRootBuilder), -1, 0, 2, 1, 1, 0, 
"C - - 10 - - C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeoManager",1314,G__G__GeoBaseDict_218_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - me", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createNode",1018,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoNode' - 0 - - i - 'Int_t' 0 '0' hadFormat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createMedium",1237,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedium' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkOverlaps",1354,G__G__GeoBaseDict_218_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.0001' ovlp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_218_0_10, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoRootBuilder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_218_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRootBuilder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_218_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoRootBuilder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_218_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoRootBuilder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_218_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_218_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRootBuilder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_218_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoRootBuilder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_218_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoRootBuilder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_218_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoRootBuilder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoRootBuilder", 1926, G__G__GeoBaseDict_218_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoSphe(void) {
   /* FairGeoSphe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe));
   G__memfunc_setup("FairGeoSphe",1069,G__G__GeoBaseDict_224_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoSphe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_224_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoSphe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_224_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSphe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_224_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoSphe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_224_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoSphe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_224_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_224_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSphe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_224_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoSphe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_224_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoSphe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_224_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoSphe::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoSphe", 1195, G__G__GeoBaseDict_224_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTrap(void) {
   /* FairGeoTrap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap));
   G__memfunc_setup("FairGeoTrap",1076,G__G__GeoBaseDict_225_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_225_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTrap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_225_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_225_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTrap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_225_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTrap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_225_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_225_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_225_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTrap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_225_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_225_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTrap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTrap", 1202, G__G__GeoBaseDict_225_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTrd1(void) {
   /* FairGeoTrd1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1));
   G__memfunc_setup("FairGeoTrd1",1016,G__G__GeoBaseDict_226_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTrd1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_226_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTrd1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrd1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTrd1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTrd1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrd1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTrd1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTrd1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTrd1::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTrd1", 1142, G__G__GeoBaseDict_226_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTube(void) {
   /* FairGeoTube */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube));
   G__memfunc_setup("FairGeoTube",1069,G__G__GeoBaseDict_227_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTube), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_227_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTube::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_227_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTube::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_227_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTube::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_227_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTube::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_227_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_227_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTube::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_227_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTube::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_227_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTube::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_227_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTube::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTube", 1195, G__G__GeoBaseDict_227_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTubs(void) {
   /* FairGeoTubs */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs));
   G__memfunc_setup("FairGeoTubs",1083,G__G__GeoBaseDict_228_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTubs), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_228_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTubs::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_228_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTubs::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_228_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTubs::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_228_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTubs::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_228_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_228_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTubs::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_228_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTubs::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_228_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTubs::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_228_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTubs::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTubs", 1209, G__G__GeoBaseDict_228_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTorus(void) {
   /* FairGeoTorus */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus));
   G__memfunc_setup("FairGeoTorus",1210,G__G__GeoBaseDict_229_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoTorus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - pFile U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_229_0_7, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTorus::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_229_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTorus::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_229_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTorus::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_229_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTorus::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_229_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_229_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTorus::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_229_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTorus::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_229_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTorus::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_229_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTorus::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTorus", 1336, G__G__GeoBaseDict_229_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoCompositeVolume(void) {
   /* FairGeoCompositeVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume));
   G__memfunc_setup("FairGeoCompositeVolume",2248,G__G__GeoBaseDict_230_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' nComp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumComponents",1686,G__G__GeoBaseDict_230_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComponent",1267,G__G__GeoBaseDict_230_0_3, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createComponents",1690,G__G__GeoBaseDict_230_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setComponent",1279,G__G__GeoBaseDict_230_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_230_0_8, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoCompositeVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_230_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCompositeVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_230_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoCompositeVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_230_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoCompositeVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_230_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_230_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCompositeVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_230_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCompositeVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_230_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCompositeVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_230_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCompositeVolume::DeclFileLine) ), 0);
   G__memfunc_setup("FairGeoCompositeVolume",2248,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume), -1, 0, 1, 1, 4, 0, "u 'FairGeoCompositeVolume' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoCompositeVolume), -1, 1, 1, 1, 4, 0, "u 'FairGeoCompositeVolume' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoCompositeVolume", 2374, G__G__GeoBaseDict_230_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoAsciiIo(void) {
   /* FairGeoAsciiIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo));
   G__memfunc_setup("FairGeoAsciiIo",1342,G__G__GeoBaseDict_231_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirectory",1281,G__G__GeoBaseDict_231_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirectory",1269,G__G__GeoBaseDict_231_0_3, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFilename",1121,G__G__GeoBaseDict_231_0_4, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - - C - 'Text_t' 10 '\"in\"' status", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isOpen",622,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isWritable",1046,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'FairGeoSet' - 0 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoSet' - 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readGeomConfig",1402,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoInterface' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readDetectorSetup",1767,G__G__GeoBaseDict_231_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoInterface' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSimulRefRun",1448,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setHistoryDate",1468,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairGeoAsciiIo",1342,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo), -1, 0, 1, 1, 4, 0, "u 'FairGeoAsciiIo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoAsciiIo), -1, 1, 1, 1, 4, 0, "u 'FairGeoAsciiIo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_231_0_20, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoAsciiIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_231_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAsciiIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_231_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoAsciiIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_231_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoAsciiIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_231_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_231_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAsciiIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_231_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoAsciiIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_231_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoAsciiIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_231_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoAsciiIo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoAsciiIo", 1468, G__G__GeoBaseDict_231_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoBrik(void) {
   /* FairGeoBrik */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik));
   G__memfunc_setup("FairGeoBrik",1061,G__G__GeoBaseDict_232_0_1, 105, G__get_linked_tagnum(&G__G__GeoBaseDictLN_FairGeoBrik), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'FairGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairGeoVolume' - 0 - - u 'FairGeoTransform' - 11 - - "
"u 'FairGeoTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeoBaseDict_232_0_4, 85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoBrik::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeoBaseDict_232_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBrik::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeoBaseDict_232_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoBrik::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeoBaseDict_232_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoBrik::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeoBaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeoBaseDict_232_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeoBaseDict_232_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBrik::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeoBaseDict_232_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBrik::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeoBaseDict_232_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoBrik::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeoBaseDict_232_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoBrik::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoBrik", 1187, G__G__GeoBaseDict_232_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__GeoBaseDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__GeoBaseDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__GeoBaseDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__GeoBaseDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTransform = { "FairGeoTransform" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoVolume = { "FairGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoBasicShape = { "FairGeoBasicShape" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoAssembly = { "FairGeoAssembly" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoCone = { "FairGeoCone" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoCons = { "FairGeoCons" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoEltu = { "FairGeoEltu" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoNode = { "FairGeoNode" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoMedium = { "FairGeoMedium" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoBuilder = { "FairGeoBuilder" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoIo = { "FairGeoIo" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoSet = { "FairGeoSet" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoMedia = { "FairGeoMedia" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoShapes = { "FairGeoShapes" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoInterface = { "FairGeoInterface" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoLoader = { "FairGeoLoader" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoVector = { "FairGeoVector" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoMatrix = { "FairGeoMatrix" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TRotMatrix = { "TRotMatrix" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoRotation = { "FairGeoRotation" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_EFairGeoNodeType = { "EFairGeoNodeType" , 101 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoOldAsciiIo = { "FairGeoOldAsciiIo" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoPcon = { "FairGeoPcon" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoPgon = { "FairGeoPgon" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoRootBuilder = { "FairGeoRootBuilder" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoSphe = { "FairGeoSphe" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTrap = { "FairGeoTrap" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTrd1 = { "FairGeoTrd1" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTube = { "FairGeoTube" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTubs = { "FairGeoTubs" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoTorus = { "FairGeoTorus" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoCompositeVolume = { "FairGeoCompositeVolume" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoAsciiIo = { "FairGeoAsciiIo" , 99 , -1 };
G__linked_taginfo G__G__GeoBaseDictLN_FairGeoBrik = { "FairGeoBrik" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__GeoBaseDict() {
  G__G__GeoBaseDictLN_TClass.tagnum = -1 ;
  G__G__GeoBaseDictLN_TBuffer.tagnum = -1 ;
  G__G__GeoBaseDictLN_TMemberInspector.tagnum = -1 ;
  G__G__GeoBaseDictLN_TObject.tagnum = -1 ;
  G__G__GeoBaseDictLN_TNamed.tagnum = -1 ;
  G__G__GeoBaseDictLN_TString.tagnum = -1 ;
  G__G__GeoBaseDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_TList.tagnum = -1 ;
  G__G__GeoBaseDictLN_TObjArray.tagnum = -1 ;
  G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTransform.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoVolume.tagnum = -1 ;
  G__G__GeoBaseDictLN_TArrayD.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoBasicShape.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoAssembly.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoCone.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoCons.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoEltu.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoNode.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoMedium.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoBuilder.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoIo.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoSet.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoMedia.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoShapes.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoInterface.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoLoader.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoVector.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoMatrix.tagnum = -1 ;
  G__G__GeoBaseDictLN_TRotMatrix.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoRotation.tagnum = -1 ;
  G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__GeoBaseDictLN_TGeoVolume.tagnum = -1 ;
  G__G__GeoBaseDictLN_EFairGeoNodeType.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoOldAsciiIo.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoPcon.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoPgon.tagnum = -1 ;
  G__G__GeoBaseDictLN_TGeoManager.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoRootBuilder.tagnum = -1 ;
  G__G__GeoBaseDictLN_TArrayI.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoSphe.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTrap.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTrd1.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTube.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTubs.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoTorus.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoCompositeVolume.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoAsciiIo.tagnum = -1 ;
  G__G__GeoBaseDictLN_FairGeoBrik.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__GeoBaseDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TList);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTransform),sizeof(FairGeoTransform),-1,32512,(char*)NULL,G__setup_memvarFairGeoTransform,G__setup_memfuncFairGeoTransform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoVolume),sizeof(FairGeoVolume),-1,327424,(char*)NULL,G__setup_memvarFairGeoVolume,G__setup_memfuncFairGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TArrayD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoBasicShape),sizeof(FairGeoBasicShape),-1,65280,"base class for all shapes",G__setup_memvarFairGeoBasicShape,G__setup_memfuncFairGeoBasicShape);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoAssembly),sizeof(FairGeoAssembly),-1,62720,"class for geometry shape ASSEMBLY",G__setup_memvarFairGeoAssembly,G__setup_memfuncFairGeoAssembly);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoCone),sizeof(FairGeoCone),-1,62720,(char*)NULL,G__setup_memvarFairGeoCone,G__setup_memfuncFairGeoCone);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoCons),sizeof(FairGeoCons),-1,62720,(char*)NULL,G__setup_memvarFairGeoCons,G__setup_memfuncFairGeoCons);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoEltu),sizeof(FairGeoEltu),-1,62720,(char*)NULL,G__setup_memvarFairGeoEltu,G__setup_memfuncFairGeoEltu);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoNode),sizeof(FairGeoNode),-1,327424,(char*)NULL,G__setup_memvarFairGeoNode,G__setup_memfuncFairGeoNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoMedium),sizeof(FairGeoMedium),-1,65280,(char*)NULL,G__setup_memvarFairGeoMedium,G__setup_memfuncFairGeoMedium);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoBuilder),sizeof(FairGeoBuilder),-1,62722,(char*)NULL,G__setup_memvarFairGeoBuilder,G__setup_memfuncFairGeoBuilder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoIo),sizeof(FairGeoIo),-1,28684,(char*)NULL,G__setup_memvarFairGeoIo,G__setup_memfuncFairGeoIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoSet),sizeof(FairGeoSet),-1,65280,(char*)NULL,G__setup_memvarFairGeoSet,G__setup_memfuncFairGeoSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoMedia),sizeof(FairGeoMedia),-1,65280,(char*)NULL,G__setup_memvarFairGeoMedia,G__setup_memfuncFairGeoMedia);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoShapes),sizeof(FairGeoShapes),-1,32512,(char*)NULL,G__setup_memvarFairGeoShapes,G__setup_memfuncFairGeoShapes);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoInterface),sizeof(FairGeoInterface),-1,32512,(char*)NULL,G__setup_memvarFairGeoInterface,G__setup_memfuncFairGeoInterface);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoLoader),sizeof(FairGeoLoader),-1,65280,(char*)NULL,G__setup_memvarFairGeoLoader,G__setup_memfuncFairGeoLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoVector),sizeof(FairGeoVector),-1,32512,"vector with 3 components",G__setup_memvarFairGeoVector,G__setup_memfuncFairGeoVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoMatrix),sizeof(FairGeoMatrix),-1,29952,(char*)NULL,G__setup_memvarFairGeoMatrix,G__setup_memfuncFairGeoMatrix);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TRotMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoRotation),sizeof(FairGeoRotation),-1,65280,(char*)NULL,G__setup_memvarFairGeoRotation,G__setup_memfuncFairGeoRotation);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_EFairGeoNodeType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoOldAsciiIo),sizeof(FairGeoOldAsciiIo),-1,32512,(char*)NULL,G__setup_memvarFairGeoOldAsciiIo,G__setup_memfuncFairGeoOldAsciiIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoPcon),sizeof(FairGeoPcon),-1,62720,(char*)NULL,G__setup_memvarFairGeoPcon,G__setup_memfuncFairGeoPcon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoPgon),sizeof(FairGeoPgon),-1,62720,(char*)NULL,G__setup_memvarFairGeoPgon,G__setup_memfuncFairGeoPgon);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TGeoManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoRootBuilder),sizeof(FairGeoRootBuilder),-1,65280,(char*)NULL,G__setup_memvarFairGeoRootBuilder,G__setup_memfuncFairGeoRootBuilder);
   G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_TArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoSphe),sizeof(FairGeoSphe),-1,62720,(char*)NULL,G__setup_memvarFairGeoSphe,G__setup_memfuncFairGeoSphe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTrap),sizeof(FairGeoTrap),-1,62720,"class for geometry shape TRAP",G__setup_memvarFairGeoTrap,G__setup_memfuncFairGeoTrap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTrd1),sizeof(FairGeoTrd1),-1,62720,"class for geometry shape TRD1",G__setup_memvarFairGeoTrd1,G__setup_memfuncFairGeoTrd1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTube),sizeof(FairGeoTube),-1,62720,"class for geometry shape TUBE",G__setup_memvarFairGeoTube,G__setup_memfuncFairGeoTube);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTubs),sizeof(FairGeoTubs),-1,62720,"class for geometry shape TUBS",G__setup_memvarFairGeoTubs,G__setup_memfuncFairGeoTubs);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoTorus),sizeof(FairGeoTorus),-1,62720,"class for geometry shape TORUS",G__setup_memvarFairGeoTorus,G__setup_memfuncFairGeoTorus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoCompositeVolume),sizeof(FairGeoCompositeVolume),-1,65280,(char*)NULL,G__setup_memvarFairGeoCompositeVolume,G__setup_memfuncFairGeoCompositeVolume);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoAsciiIo),sizeof(FairGeoAsciiIo),-1,32512,"Class for geometry I/O from ASCII file",G__setup_memvarFairGeoAsciiIo,G__setup_memfuncFairGeoAsciiIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GeoBaseDictLN_FairGeoBrik),sizeof(FairGeoBrik),-1,62720,"class for geometry shape BOX or BRIK",G__setup_memvarFairGeoBrik,G__setup_memfuncFairGeoBrik);
}
extern "C" void G__cpp_setupG__GeoBaseDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__GeoBaseDict()");
  G__set_cpp_environmentG__GeoBaseDict();
  G__cpp_setup_tagtableG__GeoBaseDict();

  G__cpp_setup_inheritanceG__GeoBaseDict();

  G__cpp_setup_typetableG__GeoBaseDict();

  G__cpp_setup_memvarG__GeoBaseDict();

  G__cpp_setup_memfuncG__GeoBaseDict();
  G__cpp_setup_globalG__GeoBaseDict();
  G__cpp_setup_funcG__GeoBaseDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__GeoBaseDict();
  return;
}
class G__cpp_setup_initG__GeoBaseDict {
  public:
    G__cpp_setup_initG__GeoBaseDict() { G__add_setup_func("G__GeoBaseDict",(G__incsetup)(&G__cpp_setupG__GeoBaseDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__GeoBaseDict() { G__remove_setup_func("G__GeoBaseDict"); }
};
G__cpp_setup_initG__GeoBaseDict G__cpp_setup_initializerG__GeoBaseDict;

