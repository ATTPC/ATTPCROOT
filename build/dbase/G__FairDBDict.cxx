//
// File generated by /Users/yassidayyad/fair_install/FairSoftInst/bin/rootcint at Fri Mar  6 16:10:47 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIUsersdIyassidayyaddIfair_installdIATTPCROOT_Mar_devdIbuilddIdbasedIG__FairDBDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__FairDBDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbResultKey FairDbResultKey;
      #else
      class FairDbResultKey  :  public ::TObject {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::FairDbResultKey::VRecKey VRecKey;
         #else
         class VRecKey  {
            public:
            //friend XX;
            unsigned int SeqNo; //
            ::ValTimeStamp CreationDate; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbResultKey() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbReader< ::FairDbConfigData > FairDbReaderlEFairDbConfigDatagR;
      #else
      class FairDbReaderlEFairDbConfigDatagR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbReaderlEFairDbConfigDatagR() throw() {};
         ::FairDb::AbortTest fAbortTest; //
         ::FairDbTableInterface* fTableInterface; //
         :: FairDbResult* fResult; //
         ::FairDbDetector::EDetector fDetType; //
         ::DataType::EDataType fSimType; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbReader< ::FairDbLogEntry > FairDbReaderlEFairDbLogEntrygR;
      #else
      class FairDbReaderlEFairDbLogEntrygR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbReaderlEFairDbLogEntrygR() throw() {};
         ::FairDb::AbortTest fAbortTest; //
         ::FairDbTableInterface* fTableInterface; //
         :: FairDbResult* fResult; //
         ::FairDbDetector::EDetector fDetType; //
         ::DataType::EDataType fSimType; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbWriter< ::FairDbLogEntry > FairDbWriterlEFairDbLogEntrygR;
      #else
      class FairDbWriterlEFairDbLogEntrygR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbWriterlEFairDbLogEntrygR() throw() {};
         int fAggregateNo; //
         unsigned int fDbNo; //
         ::FairDbSqlValidityData* fPacket; //
         int fRequireGlobalSeqno; //
         ::FairDbTableInterface* fTableInterface; //
         string fTableName; //
         bool fUseOverlayCreationDate; //
         ::FairDbValRecord* fValidRec; //
         ::FairDbLogEntry fLogEntry; //
         int fVersion; //
         string fLogTitle; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbWriter< ::FairDbConfigData > FairDbWriterlEFairDbConfigDatagR;
      #else
      class FairDbWriterlEFairDbConfigDatagR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbWriterlEFairDbConfigDatagR() throw() {};
         int fAggregateNo; //
         unsigned int fDbNo; //
         ::FairDbSqlValidityData* fPacket; //
         int fRequireGlobalSeqno; //
         ::FairDbTableInterface* fTableInterface; //
         string fTableName; //
         bool fUseOverlayCreationDate; //
         ::FairDbValRecord* fValidRec; //
         ::FairDbLogEntry fLogEntry; //
         int fVersion; //
         string fLogTitle; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairDbReader< ::FairDbValRecord > FairDbReaderlEFairDbValRecordgR;
      #else
      class FairDbReaderlEFairDbValRecordgR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairDbReaderlEFairDbValRecordgR() throw() {};
         ::FairDb::AbortTest fAbortTest; //
         ::FairDbTableInterface* fTableInterface; //
         :: FairDbResult* fResult; //
         ::FairDbDetector::EDetector fDetType; //
         ::DataType::EDataType fSimType; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairRegistryElementGeneric< int > FairRegistryElementGenericlEintgR;
      #else
      class FairRegistryElementGenericlEintgR  :  public ::FairRegistryElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairRegistryElementGenericlEintgR() throw() {};
         int* fData; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairRegistryElementGeneric< double > FairRegistryElementGenericlEdoublegR;
      #else
      class FairRegistryElementGenericlEdoublegR  :  public ::FairRegistryElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairRegistryElementGenericlEdoublegR() throw() {};
         double* fData; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairRegistryElementGeneric< ::FairRegistry > FairRegistryElementGenericlEFairRegistrygR;
      #else
      class FairRegistryElementGenericlEFairRegistrygR  :  public ::FairRegistryElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairRegistryElementGenericlEFairRegistrygR() throw() {};
         ::FairRegistry* fData; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairRegistryElementGeneric< char > FairRegistryElementGenericlEchargR;
      #else
      class FairRegistryElementGenericlEchargR  :  public ::FairRegistryElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairRegistryElementGenericlEchargR() throw() {};
         char* fData; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::FairRegistryElementGeneric< const char* > FairRegistryElementGenericlEconstsPcharmUgR;
      #else
      class FairRegistryElementGenericlEconstsPcharmUgR  :  public ::FairRegistryElement {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~FairRegistryElementGenericlEconstsPcharmUgR() throw() {};
          char** fData; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace Experiment {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Experiment_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Experiment", 0 /*version*/, "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbValidation/Experiment.h", 28,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Experiment_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Experiment_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void FairDbDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbDetector_Dictionary();
   static void *new_FairDbDetector(void *p = 0);
   static void *newArray_FairDbDetector(Long_t size, void *p);
   static void delete_FairDbDetector(void *p);
   static void deleteArray_FairDbDetector(void *p);
   static void destruct_FairDbDetector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbDetector*)
   {
      ::FairDbDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::FairDbDetector),0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbDetector", "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInput/db_detector_def.h", 29,
                  typeid(::FairDbDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &FairDbDetector_Dictionary, isa_proxy, 0,
                  sizeof(::FairDbDetector) );
      instance.SetNew(&new_FairDbDetector);
      instance.SetNewArray(&newArray_FairDbDetector);
      instance.SetDelete(&delete_FairDbDetector);
      instance.SetDeleteArray(&deleteArray_FairDbDetector);
      instance.SetDestructor(&destruct_FairDbDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbDetector*)
   {
      return GenerateInitInstanceLocal((::FairDbDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbDetector_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbDetector*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace DataType {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void DataType_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("DataType", 0 /*version*/, "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbValidation/DataType.h", 19,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &DataType_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void DataType_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void ValTimeStamp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ValTimeStamp(void *p = 0);
   static void *newArray_ValTimeStamp(Long_t size, void *p);
   static void delete_ValTimeStamp(void *p);
   static void deleteArray_ValTimeStamp(void *p);
   static void destruct_ValTimeStamp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ValTimeStamp*)
   {
      ::ValTimeStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ValTimeStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ValTimeStamp", ::ValTimeStamp::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbValidation/ValTimeStamp.h", 18,
                  typeid(::ValTimeStamp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ValTimeStamp::Dictionary, isa_proxy, 4,
                  sizeof(::ValTimeStamp) );
      instance.SetNew(&new_ValTimeStamp);
      instance.SetNewArray(&newArray_ValTimeStamp);
      instance.SetDelete(&delete_ValTimeStamp);
      instance.SetDeleteArray(&deleteArray_ValTimeStamp);
      instance.SetDestructor(&destruct_ValTimeStamp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ValTimeStamp*)
   {
      return GenerateInitInstanceLocal((::ValTimeStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ValTimeStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ValCondition_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ValCondition(void *p = 0);
   static void *newArray_ValCondition(Long_t size, void *p);
   static void delete_ValCondition(void *p);
   static void deleteArray_ValCondition(void *p);
   static void destruct_ValCondition(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ValCondition*)
   {
      ::ValCondition *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ValCondition >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ValCondition", ::ValCondition::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbValidation/ValCondition.h", 23,
                  typeid(::ValCondition), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ValCondition::Dictionary, isa_proxy, 4,
                  sizeof(::ValCondition) );
      instance.SetNew(&new_ValCondition);
      instance.SetNewArray(&newArray_ValCondition);
      instance.SetDelete(&delete_ValCondition);
      instance.SetDeleteArray(&deleteArray_ValCondition);
      instance.SetDestructor(&destruct_ValCondition);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ValCondition*)
   {
      return GenerateInitInstanceLocal((::ValCondition*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ValCondition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ValInterval_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ValInterval(void *p = 0);
   static void *newArray_ValInterval(Long_t size, void *p);
   static void delete_ValInterval(void *p);
   static void deleteArray_ValInterval(void *p);
   static void destruct_ValInterval(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ValInterval*)
   {
      ::ValInterval *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ValInterval >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ValInterval", ::ValInterval::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbValidation/ValInterval.h", 25,
                  typeid(::ValInterval), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ValInterval::Dictionary, isa_proxy, 4,
                  sizeof(::ValInterval) );
      instance.SetNew(&new_ValInterval);
      instance.SetNewArray(&newArray_ValInterval);
      instance.SetDelete(&delete_ValInterval);
      instance.SetDeleteArray(&deleteArray_ValInterval);
      instance.SetDestructor(&destruct_ValInterval);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ValInterval*)
   {
      return GenerateInitInstanceLocal((::ValInterval*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ValInterval*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace FairDb {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void FairDb_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("FairDb", 0 /*version*/, "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDb.h", 26,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &FairDb_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void FairDb_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void FairDbException_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbException(void *p = 0);
   static void *newArray_FairDbException(Long_t size, void *p);
   static void delete_FairDbException(void *p);
   static void deleteArray_FairDbException(void *p);
   static void destruct_FairDbException(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbException*)
   {
      ::FairDbException *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbException >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbException", ::FairDbException::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbException.h", 25,
                  typeid(::FairDbException), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbException::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbException) );
      instance.SetNew(&new_FairDbException);
      instance.SetNewArray(&newArray_FairDbException);
      instance.SetDelete(&delete_FairDbException);
      instance.SetDeleteArray(&deleteArray_FairDbException);
      instance.SetDestructor(&destruct_FairDbException);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbException*)
   {
      return GenerateInitInstanceLocal((::FairDbException*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbException*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbExceptionLog_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbExceptionLog(void *p = 0);
   static void *newArray_FairDbExceptionLog(Long_t size, void *p);
   static void delete_FairDbExceptionLog(void *p);
   static void deleteArray_FairDbExceptionLog(void *p);
   static void destruct_FairDbExceptionLog(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbExceptionLog*)
   {
      ::FairDbExceptionLog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbExceptionLog >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbExceptionLog", ::FairDbExceptionLog::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbExceptionLog.h", 26,
                  typeid(::FairDbExceptionLog), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbExceptionLog::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbExceptionLog) );
      instance.SetNew(&new_FairDbExceptionLog);
      instance.SetNewArray(&newArray_FairDbExceptionLog);
      instance.SetDelete(&delete_FairDbExceptionLog);
      instance.SetDeleteArray(&deleteArray_FairDbExceptionLog);
      instance.SetDestructor(&destruct_FairDbExceptionLog);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbExceptionLog*)
   {
      return GenerateInitInstanceLocal((::FairDbExceptionLog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbExceptionLog*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConnection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbConnection(void *p = 0);
   static void *newArray_FairDbConnection(Long_t size, void *p);
   static void delete_FairDbConnection(void *p);
   static void deleteArray_FairDbConnection(void *p);
   static void destruct_FairDbConnection(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConnection*)
   {
      ::FairDbConnection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConnection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConnection", ::FairDbConnection::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConnection.h", 29,
                  typeid(::FairDbConnection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConnection::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConnection) );
      instance.SetNew(&new_FairDbConnection);
      instance.SetNewArray(&newArray_FairDbConnection);
      instance.SetDelete(&delete_FairDbConnection);
      instance.SetDeleteArray(&deleteArray_FairDbConnection);
      instance.SetDestructor(&destruct_FairDbConnection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConnection*)
   {
      return GenerateInitInstanceLocal((::FairDbConnection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConnection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbObjTableMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbObjTableMap(void *p = 0);
   static void *newArray_FairDbObjTableMap(Long_t size, void *p);
   static void delete_FairDbObjTableMap(void *p);
   static void deleteArray_FairDbObjTableMap(void *p);
   static void destruct_FairDbObjTableMap(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbObjTableMap*)
   {
      ::FairDbObjTableMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbObjTableMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbObjTableMap", ::FairDbObjTableMap::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbObjTableMap.h", 34,
                  typeid(::FairDbObjTableMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbObjTableMap::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbObjTableMap) );
      instance.SetNew(&new_FairDbObjTableMap);
      instance.SetNewArray(&newArray_FairDbObjTableMap);
      instance.SetDelete(&delete_FairDbObjTableMap);
      instance.SetDeleteArray(&deleteArray_FairDbObjTableMap);
      instance.SetDestructor(&destruct_FairDbObjTableMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbObjTableMap*)
   {
      return GenerateInitInstanceLocal((::FairDbObjTableMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbObjTableMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResult_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbResult(void *p);
   static void deleteArray_FairDbResult(void *p);
   static void destruct_FairDbResult(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResult*)
   {
      ::FairDbResult *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbResult >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResult", ::FairDbResult::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 162,
                  typeid(::FairDbResult), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbResult::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResult) );
      instance.SetDelete(&delete_FairDbResult);
      instance.SetDeleteArray(&deleteArray_FairDbResult);
      instance.SetDestructor(&destruct_FairDbResult);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResult*)
   {
      return GenerateInitInstanceLocal((::FairDbResult*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResult*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbTableInterface_ShowMembers(void *obj, TMemberInspector &R__insp);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbTableInterface*)
   {
      ::FairDbTableInterface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbTableInterface >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbTableInterface", ::FairDbTableInterface::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbTableInterface.h", 30,
                  typeid(::FairDbTableInterface), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbTableInterface::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbTableInterface) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbTableInterface*)
   {
      return GenerateInitInstanceLocal((::FairDbTableInterface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbTableInterface*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbValRecord_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbValRecord(void *p = 0);
   static void *newArray_FairDbValRecord(Long_t size, void *p);
   static void delete_FairDbValRecord(void *p);
   static void deleteArray_FairDbValRecord(void *p);
   static void destruct_FairDbValRecord(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbValRecord*)
   {
      ::FairDbValRecord *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbValRecord >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbValRecord", ::FairDbValRecord::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbValRecord.h", 30,
                  typeid(::FairDbValRecord), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbValRecord::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbValRecord) );
      instance.SetNew(&new_FairDbValRecord);
      instance.SetNewArray(&newArray_FairDbValRecord);
      instance.SetDelete(&delete_FairDbValRecord);
      instance.SetDeleteArray(&deleteArray_FairDbValRecord);
      instance.SetDestructor(&destruct_FairDbValRecord);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbValRecord*)
   {
      return GenerateInitInstanceLocal((::FairDbValRecord*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbValRecord*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbCache_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbCache(void *p);
   static void deleteArray_FairDbCache(void *p);
   static void destruct_FairDbCache(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbCache*)
   {
      ::FairDbCache *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbCache >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbCache", ::FairDbCache::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbCache.h", 26,
                  typeid(::FairDbCache), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbCache::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbCache) );
      instance.SetDelete(&delete_FairDbCache);
      instance.SetDeleteArray(&deleteArray_FairDbCache);
      instance.SetDestructor(&destruct_FairDbCache);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbCache*)
   {
      return GenerateInitInstanceLocal((::FairDbCache*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbCache*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRegistry(void *p = 0);
   static void *newArray_FairRegistry(Long_t size, void *p);
   static void delete_FairRegistry(void *p);
   static void deleteArray_FairRegistry(void *p);
   static void destruct_FairRegistry(void *p);
   static void streamer_FairRegistry(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistry*)
   {
      ::FairRegistry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistry", ::FairRegistry::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistry.h", 27,
                  typeid(::FairRegistry), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRegistry::Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistry) );
      instance.SetNew(&new_FairRegistry);
      instance.SetNewArray(&newArray_FairRegistry);
      instance.SetDelete(&delete_FairRegistry);
      instance.SetDeleteArray(&deleteArray_FairRegistry);
      instance.SetDestructor(&destruct_FairRegistry);
      instance.SetStreamerFunc(&streamer_FairRegistry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistry*)
   {
      return GenerateInitInstanceLocal((::FairRegistry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairRegistryElement(void *p);
   static void deleteArray_FairRegistryElement(void *p);
   static void destruct_FairRegistryElement(void *p);
   static void streamer_FairRegistryElement(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElement*)
   {
      ::FairRegistryElement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElement", ::FairRegistryElement::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElement.h", 22,
                  typeid(::FairRegistryElement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRegistryElement::Dictionary, isa_proxy, 0,
                  sizeof(::FairRegistryElement) );
      instance.SetDelete(&delete_FairRegistryElement);
      instance.SetDeleteArray(&deleteArray_FairRegistryElement);
      instance.SetDestructor(&destruct_FairRegistryElement);
      instance.SetStreamerFunc(&streamer_FairRegistryElement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElement*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConfigurable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbConfigurable(void *p);
   static void deleteArray_FairDbConfigurable(void *p);
   static void destruct_FairDbConfigurable(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConfigurable*)
   {
      ::FairDbConfigurable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConfigurable >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConfigurable", ::FairDbConfigurable::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConfigurable.h", 25,
                  typeid(::FairDbConfigurable), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConfigurable::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConfigurable) );
      instance.SetDelete(&delete_FairDbConfigurable);
      instance.SetDeleteArray(&deleteArray_FairDbConfigurable);
      instance.SetDestructor(&destruct_FairDbConfigurable);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConfigurable*)
   {
      return GenerateInitInstanceLocal((::FairDbConfigurable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConfigurable*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbStreamer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbStreamer(void *p = 0);
   static void *newArray_FairDbStreamer(Long_t size, void *p);
   static void delete_FairDbStreamer(void *p);
   static void deleteArray_FairDbStreamer(void *p);
   static void destruct_FairDbStreamer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbStreamer*)
   {
      ::FairDbStreamer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbStreamer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbStreamer", ::FairDbStreamer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbStreamer.h", 23,
                  typeid(::FairDbStreamer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbStreamer::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbStreamer) );
      instance.SetNew(&new_FairDbStreamer);
      instance.SetNewArray(&newArray_FairDbStreamer);
      instance.SetDelete(&delete_FairDbStreamer);
      instance.SetDeleteArray(&deleteArray_FairDbStreamer);
      instance.SetDestructor(&destruct_FairDbStreamer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbStreamer*)
   {
      return GenerateInitInstanceLocal((::FairDbStreamer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbStreamer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbOutTableBuffer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbOutTableBuffer(void *p);
   static void deleteArray_FairDbOutTableBuffer(void *p);
   static void destruct_FairDbOutTableBuffer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbOutTableBuffer*)
   {
      ::FairDbOutTableBuffer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbOutTableBuffer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbOutTableBuffer", ::FairDbOutTableBuffer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbOutTableBuffer.h", 24,
                  typeid(::FairDbOutTableBuffer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbOutTableBuffer::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbOutTableBuffer) );
      instance.SetDelete(&delete_FairDbOutTableBuffer);
      instance.SetDeleteArray(&deleteArray_FairDbOutTableBuffer);
      instance.SetDestructor(&destruct_FairDbOutTableBuffer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbOutTableBuffer*)
   {
      return GenerateInitInstanceLocal((::FairDbOutTableBuffer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbOutTableBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResultPool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbResultPool(void *p);
   static void deleteArray_FairDbResultPool(void *p);
   static void destruct_FairDbResultPool(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResultPool*)
   {
      ::FairDbResultPool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbResultPool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResultPool", ::FairDbResultPool::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 92,
                  typeid(::FairDbResultPool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbResultPool::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResultPool) );
      instance.SetDelete(&delete_FairDbResultPool);
      instance.SetDeleteArray(&deleteArray_FairDbResultPool);
      instance.SetDestructor(&destruct_FairDbResultPool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResultPool*)
   {
      return GenerateInitInstanceLocal((::FairDbResultPool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResultPool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbFieldType_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbFieldType(void *p = 0);
   static void *newArray_FairDbFieldType(Long_t size, void *p);
   static void delete_FairDbFieldType(void *p);
   static void deleteArray_FairDbFieldType(void *p);
   static void destruct_FairDbFieldType(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbFieldType*)
   {
      ::FairDbFieldType *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbFieldType >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbFieldType", ::FairDbFieldType::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbFieldType.h", 16,
                  typeid(::FairDbFieldType), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbFieldType::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbFieldType) );
      instance.SetNew(&new_FairDbFieldType);
      instance.SetNewArray(&newArray_FairDbFieldType);
      instance.SetDelete(&delete_FairDbFieldType);
      instance.SetDeleteArray(&deleteArray_FairDbFieldType);
      instance.SetDestructor(&destruct_FairDbFieldType);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbFieldType*)
   {
      return GenerateInitInstanceLocal((::FairDbFieldType*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbFieldType*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConfigData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbConfigData(void *p = 0);
   static void *newArray_FairDbConfigData(Long_t size, void *p);
   static void delete_FairDbConfigData(void *p);
   static void deleteArray_FairDbConfigData(void *p);
   static void destruct_FairDbConfigData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConfigData*)
   {
      ::FairDbConfigData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConfigData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConfigData", ::FairDbConfigData::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConfigData.h", 27,
                  typeid(::FairDbConfigData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConfigData::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConfigData) );
      instance.SetNew(&new_FairDbConfigData);
      instance.SetNewArray(&newArray_FairDbConfigData);
      instance.SetDelete(&delete_FairDbConfigData);
      instance.SetDeleteArray(&deleteArray_FairDbConfigData);
      instance.SetDestructor(&destruct_FairDbConfigData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConfigData*)
   {
      return GenerateInitInstanceLocal((::FairDbConfigData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConfigData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbTableMetaData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbTableMetaData(void *p = 0);
   static void *newArray_FairDbTableMetaData(Long_t size, void *p);
   static void delete_FairDbTableMetaData(void *p);
   static void deleteArray_FairDbTableMetaData(void *p);
   static void destruct_FairDbTableMetaData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbTableMetaData*)
   {
      ::FairDbTableMetaData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbTableMetaData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbTableMetaData", ::FairDbTableMetaData::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbTableMetaData.h", 20,
                  typeid(::FairDbTableMetaData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbTableMetaData::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbTableMetaData) );
      instance.SetNew(&new_FairDbTableMetaData);
      instance.SetNewArray(&newArray_FairDbTableMetaData);
      instance.SetDelete(&delete_FairDbTableMetaData);
      instance.SetDeleteArray(&deleteArray_FairDbTableMetaData);
      instance.SetDestructor(&destruct_FairDbTableMetaData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbTableMetaData*)
   {
      return GenerateInitInstanceLocal((::FairDbTableMetaData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbTableMetaData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbProxy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbProxy(void *p);
   static void deleteArray_FairDbProxy(void *p);
   static void destruct_FairDbProxy(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbProxy*)
   {
      ::FairDbProxy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbProxy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbProxy", ::FairDbProxy::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbProxy.h", 27,
                  typeid(::FairDbProxy), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbProxy::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbProxy) );
      instance.SetDelete(&delete_FairDbProxy);
      instance.SetDeleteArray(&deleteArray_FairDbProxy);
      instance.SetDestructor(&destruct_FairDbProxy);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbProxy*)
   {
      return GenerateInitInstanceLocal((::FairDbProxy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbProxy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbStatement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbStatement(void *p);
   static void deleteArray_FairDbStatement(void *p);
   static void destruct_FairDbStatement(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbStatement*)
   {
      ::FairDbStatement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbStatement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbStatement", ::FairDbStatement::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbStatement.h", 23,
                  typeid(::FairDbStatement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbStatement::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbStatement) );
      instance.SetDelete(&delete_FairDbStatement);
      instance.SetDeleteArray(&deleteArray_FairDbStatement);
      instance.SetDestructor(&destruct_FairDbStatement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbStatement*)
   {
      return GenerateInitInstanceLocal((::FairDbStatement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbStatement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConnectionPool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbConnectionPool(void *p = 0);
   static void *newArray_FairDbConnectionPool(Long_t size, void *p);
   static void delete_FairDbConnectionPool(void *p);
   static void deleteArray_FairDbConnectionPool(void *p);
   static void destruct_FairDbConnectionPool(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConnectionPool*)
   {
      ::FairDbConnectionPool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConnectionPool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConnectionPool", ::FairDbConnectionPool::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConnectionPool.h", 26,
                  typeid(::FairDbConnectionPool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConnectionPool::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConnectionPool) );
      instance.SetNew(&new_FairDbConnectionPool);
      instance.SetNewArray(&newArray_FairDbConnectionPool);
      instance.SetDelete(&delete_FairDbConnectionPool);
      instance.SetDeleteArray(&deleteArray_FairDbConnectionPool);
      instance.SetDestructor(&destruct_FairDbConnectionPool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConnectionPool*)
   {
      return GenerateInitInstanceLocal((::FairDbConnectionPool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConnectionPool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbTableBuffer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbTableBuffer(void *p);
   static void deleteArray_FairDbTableBuffer(void *p);
   static void destruct_FairDbTableBuffer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbTableBuffer*)
   {
      ::FairDbTableBuffer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbTableBuffer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbTableBuffer", ::FairDbTableBuffer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbTableBuffer.h", 19,
                  typeid(::FairDbTableBuffer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbTableBuffer::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbTableBuffer) );
      instance.SetDelete(&delete_FairDbTableBuffer);
      instance.SetDeleteArray(&deleteArray_FairDbTableBuffer);
      instance.SetDestructor(&destruct_FairDbTableBuffer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbTableBuffer*)
   {
      return GenerateInitInstanceLocal((::FairDbTableBuffer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbTableBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbString_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbString(void *p = 0);
   static void *newArray_FairDbString(Long_t size, void *p);
   static void delete_FairDbString(void *p);
   static void deleteArray_FairDbString(void *p);
   static void destruct_FairDbString(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbString*)
   {
      ::FairDbString *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbString >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbString", ::FairDbString::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbString.h", 59,
                  typeid(::FairDbString), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbString::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbString) );
      instance.SetNew(&new_FairDbString);
      instance.SetNewArray(&newArray_FairDbString);
      instance.SetDelete(&delete_FairDbString);
      instance.SetDeleteArray(&deleteArray_FairDbString);
      instance.SetDestructor(&destruct_FairDbString);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbString*)
   {
      return GenerateInitInstanceLocal((::FairDbString*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbString*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbValRecordFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbValRecordFactory(void *p);
   static void deleteArray_FairDbValRecordFactory(void *p);
   static void destruct_FairDbValRecordFactory(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbValRecordFactory*)
   {
      ::FairDbValRecordFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbValRecordFactory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbValRecordFactory", ::FairDbValRecordFactory::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbValRecordFactory.h", 25,
                  typeid(::FairDbValRecordFactory), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbValRecordFactory::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbValRecordFactory) );
      instance.SetDelete(&delete_FairDbValRecordFactory);
      instance.SetDeleteArray(&deleteArray_FairDbValRecordFactory);
      instance.SetDestructor(&destruct_FairDbValRecordFactory);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbValRecordFactory*)
   {
      return GenerateInitInstanceLocal((::FairDbValRecordFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbValRecordFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResultKey_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbResultKey(void *p = 0);
   static void *newArray_FairDbResultKey(Long_t size, void *p);
   static void delete_FairDbResultKey(void *p);
   static void deleteArray_FairDbResultKey(void *p);
   static void destruct_FairDbResultKey(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResultKey*)
   {
      ::FairDbResultKey *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbResultKey >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResultKey", ::FairDbResultKey::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 44,
                  typeid(::FairDbResultKey), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbResultKey::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResultKey) );
      instance.SetNew(&new_FairDbResultKey);
      instance.SetNewArray(&newArray_FairDbResultKey);
      instance.SetDelete(&delete_FairDbResultKey);
      instance.SetDeleteArray(&deleteArray_FairDbResultKey);
      instance.SetDestructor(&destruct_FairDbResultKey);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResultKey*)
   {
      return GenerateInitInstanceLocal((::FairDbResultKey*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResultKey*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResultKeycLcLVRecKey_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbResultKeycLcLVRecKey_Dictionary();
   static void *new_FairDbResultKeycLcLVRecKey(void *p = 0);
   static void *newArray_FairDbResultKeycLcLVRecKey(Long_t size, void *p);
   static void delete_FairDbResultKeycLcLVRecKey(void *p);
   static void deleteArray_FairDbResultKeycLcLVRecKey(void *p);
   static void destruct_FairDbResultKeycLcLVRecKey(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResultKey::VRecKey*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbResultKey::VRecKey) == sizeof( ::ROOTShadow::Shadow::FairDbResultKey::VRecKey));
      ::FairDbResultKey::VRecKey *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::FairDbResultKey::VRecKey),0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResultKey::VRecKey", "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 68,
                  typeid(::FairDbResultKey::VRecKey), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbResultKeycLcLVRecKey_ShowMembers, &FairDbResultKeycLcLVRecKey_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResultKey::VRecKey) );
      instance.SetNew(&new_FairDbResultKeycLcLVRecKey);
      instance.SetNewArray(&newArray_FairDbResultKeycLcLVRecKey);
      instance.SetDelete(&delete_FairDbResultKeycLcLVRecKey);
      instance.SetDeleteArray(&deleteArray_FairDbResultKeycLcLVRecKey);
      instance.SetDestructor(&destruct_FairDbResultKeycLcLVRecKey);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResultKey::VRecKey*)
   {
      return GenerateInitInstanceLocal((::FairDbResultKey::VRecKey*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResultKey::VRecKey*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbResultKeycLcLVRecKey_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey::VRecKey*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResultCombo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbResultCombo(void *p = 0);
   static void *newArray_FairDbResultCombo(Long_t size, void *p);
   static void delete_FairDbResultCombo(void *p);
   static void deleteArray_FairDbResultCombo(void *p);
   static void destruct_FairDbResultCombo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResultCombo*)
   {
      ::FairDbResultCombo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbResultCombo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResultCombo", ::FairDbResultCombo::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 257,
                  typeid(::FairDbResultCombo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbResultCombo::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResultCombo) );
      instance.SetNew(&new_FairDbResultCombo);
      instance.SetNewArray(&newArray_FairDbResultCombo);
      instance.SetDelete(&delete_FairDbResultCombo);
      instance.SetDeleteArray(&deleteArray_FairDbResultCombo);
      instance.SetDestructor(&destruct_FairDbResultCombo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResultCombo*)
   {
      return GenerateInitInstanceLocal((::FairDbResultCombo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResultCombo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbResultNonCombo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbResultNonCombo(void *p = 0);
   static void *newArray_FairDbResultNonCombo(Long_t size, void *p);
   static void delete_FairDbResultNonCombo(void *p);
   static void deleteArray_FairDbResultNonCombo(void *p);
   static void destruct_FairDbResultNonCombo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbResultNonCombo*)
   {
      ::FairDbResultNonCombo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbResultNonCombo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbResultNonCombo", ::FairDbResultNonCombo::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbResult.h", 298,
                  typeid(::FairDbResultNonCombo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbResultNonCombo::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbResultNonCombo) );
      instance.SetNew(&new_FairDbResultNonCombo);
      instance.SetNewArray(&newArray_FairDbResultNonCombo);
      instance.SetDelete(&delete_FairDbResultNonCombo);
      instance.SetDeleteArray(&deleteArray_FairDbResultNonCombo);
      instance.SetDestructor(&destruct_FairDbResultNonCombo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbResultNonCombo*)
   {
      return GenerateInitInstanceLocal((::FairDbResultNonCombo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbResultNonCombo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbRollbackTimes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbRollbackTimes(void *p = 0);
   static void *newArray_FairDbRollbackTimes(Long_t size, void *p);
   static void delete_FairDbRollbackTimes(void *p);
   static void deleteArray_FairDbRollbackTimes(void *p);
   static void destruct_FairDbRollbackTimes(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbRollbackTimes*)
   {
      ::FairDbRollbackTimes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbRollbackTimes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbRollbackTimes", ::FairDbRollbackTimes::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbRollbackTimes.h", 23,
                  typeid(::FairDbRollbackTimes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbRollbackTimes::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbRollbackTimes) );
      instance.SetNew(&new_FairDbRollbackTimes);
      instance.SetNewArray(&newArray_FairDbRollbackTimes);
      instance.SetDelete(&delete_FairDbRollbackTimes);
      instance.SetDeleteArray(&deleteArray_FairDbRollbackTimes);
      instance.SetDestructor(&destruct_FairDbRollbackTimes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbRollbackTimes*)
   {
      return GenerateInitInstanceLocal((::FairDbRollbackTimes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbRollbackTimes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbTableInterfaceStore_ShowMembers(void *obj, TMemberInspector &R__insp);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbTableInterfaceStore*)
   {
      ::FairDbTableInterfaceStore *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbTableInterfaceStore >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbTableInterfaceStore", ::FairDbTableInterfaceStore::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbTableInterfaceStore.h", 28,
                  typeid(::FairDbTableInterfaceStore), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbTableInterfaceStore::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbTableInterfaceStore) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbTableInterfaceStore*)
   {
      return GenerateInitInstanceLocal((::FairDbTableInterfaceStore*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbTableInterfaceStore*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbDataTypeUnion_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbDataTypeUnion(void *p = 0);
   static void *newArray_FairDbDataTypeUnion(Long_t size, void *p);
   static void delete_FairDbDataTypeUnion(void *p);
   static void deleteArray_FairDbDataTypeUnion(void *p);
   static void destruct_FairDbDataTypeUnion(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbDataTypeUnion*)
   {
      ::FairDbDataTypeUnion *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbDataTypeUnion >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbDataTypeUnion", ::FairDbDataTypeUnion::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbDataTypeUnion.h", 24,
                  typeid(::FairDbDataTypeUnion), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbDataTypeUnion::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbDataTypeUnion) );
      instance.SetNew(&new_FairDbDataTypeUnion);
      instance.SetNewArray(&newArray_FairDbDataTypeUnion);
      instance.SetDelete(&delete_FairDbDataTypeUnion);
      instance.SetDeleteArray(&deleteArray_FairDbDataTypeUnion);
      instance.SetDestructor(&destruct_FairDbDataTypeUnion);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbDataTypeUnion*)
   {
      return GenerateInitInstanceLocal((::FairDbDataTypeUnion*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbDataTypeUnion*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbStopWatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbStopWatch(void *p = 0);
   static void *newArray_FairDbStopWatch(Long_t size, void *p);
   static void delete_FairDbStopWatch(void *p);
   static void deleteArray_FairDbStopWatch(void *p);
   static void destruct_FairDbStopWatch(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbStopWatch*)
   {
      ::FairDbStopWatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbStopWatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbStopWatch", ::FairDbStopWatch::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbStopWatch.h", 18,
                  typeid(::FairDbStopWatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbStopWatch::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbStopWatch) );
      instance.SetNew(&new_FairDbStopWatch);
      instance.SetNewArray(&newArray_FairDbStopWatch);
      instance.SetDelete(&delete_FairDbStopWatch);
      instance.SetDeleteArray(&deleteArray_FairDbStopWatch);
      instance.SetDestructor(&destruct_FairDbStopWatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbStopWatch*)
   {
      return GenerateInitInstanceLocal((::FairDbStopWatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbStopWatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbStopWatchManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbStopWatchManager(void *p = 0);
   static void *newArray_FairDbStopWatchManager(Long_t size, void *p);
   static void delete_FairDbStopWatchManager(void *p);
   static void deleteArray_FairDbStopWatchManager(void *p);
   static void destruct_FairDbStopWatchManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbStopWatchManager*)
   {
      ::FairDbStopWatchManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbStopWatchManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbStopWatchManager", ::FairDbStopWatchManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbStopWatchManager.h", 19,
                  typeid(::FairDbStopWatchManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbStopWatchManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbStopWatchManager) );
      instance.SetNew(&new_FairDbStopWatchManager);
      instance.SetNewArray(&newArray_FairDbStopWatchManager);
      instance.SetDelete(&delete_FairDbStopWatchManager);
      instance.SetDeleteArray(&deleteArray_FairDbStopWatchManager);
      instance.SetDestructor(&destruct_FairDbStopWatchManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbStopWatchManager*)
   {
      return GenerateInitInstanceLocal((::FairDbStopWatchManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbStopWatchManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbLogEntry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbLogEntry(void *p = 0);
   static void *newArray_FairDbLogEntry(Long_t size, void *p);
   static void delete_FairDbLogEntry(void *p);
   static void deleteArray_FairDbLogEntry(void *p);
   static void destruct_FairDbLogEntry(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbLogEntry*)
   {
      ::FairDbLogEntry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbLogEntry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbLogEntry", ::FairDbLogEntry::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbLogEntry.h", 30,
                  typeid(::FairDbLogEntry), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbLogEntry::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbLogEntry) );
      instance.SetNew(&new_FairDbLogEntry);
      instance.SetNewArray(&newArray_FairDbLogEntry);
      instance.SetDelete(&delete_FairDbLogEntry);
      instance.SetDeleteArray(&deleteArray_FairDbLogEntry);
      instance.SetDestructor(&destruct_FairDbLogEntry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbLogEntry*)
   {
      return GenerateInitInstanceLocal((::FairDbLogEntry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbLogEntry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbExtSqlContent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbExtSqlContent(void *p = 0);
   static void *newArray_FairDbExtSqlContent(Long_t size, void *p);
   static void delete_FairDbExtSqlContent(void *p);
   static void deleteArray_FairDbExtSqlContent(void *p);
   static void destruct_FairDbExtSqlContent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbExtSqlContent*)
   {
      ::FairDbExtSqlContent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbExtSqlContent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbExtSqlContent", ::FairDbExtSqlContent::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbExtSqlContent.h", 24,
                  typeid(::FairDbExtSqlContent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbExtSqlContent::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbExtSqlContent) );
      instance.SetNew(&new_FairDbExtSqlContent);
      instance.SetNewArray(&newArray_FairDbExtSqlContent);
      instance.SetDelete(&delete_FairDbExtSqlContent);
      instance.SetDeleteArray(&deleteArray_FairDbExtSqlContent);
      instance.SetDestructor(&destruct_FairDbExtSqlContent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbExtSqlContent*)
   {
      return GenerateInitInstanceLocal((::FairDbExtSqlContent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbExtSqlContent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConfigBuffer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbConfigBuffer(void *p = 0);
   static void *newArray_FairDbConfigBuffer(Long_t size, void *p);
   static void delete_FairDbConfigBuffer(void *p);
   static void deleteArray_FairDbConfigBuffer(void *p);
   static void destruct_FairDbConfigBuffer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConfigBuffer*)
   {
      ::FairDbConfigBuffer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConfigBuffer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConfigBuffer", ::FairDbConfigBuffer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConfigBuffer.h", 26,
                  typeid(::FairDbConfigBuffer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConfigBuffer::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConfigBuffer) );
      instance.SetNew(&new_FairDbConfigBuffer);
      instance.SetNewArray(&newArray_FairDbConfigBuffer);
      instance.SetDelete(&delete_FairDbConfigBuffer);
      instance.SetDeleteArray(&deleteArray_FairDbConfigBuffer);
      instance.SetDestructor(&destruct_FairDbConfigBuffer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConfigBuffer*)
   {
      return GenerateInitInstanceLocal((::FairDbConfigBuffer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConfigBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbReaderlEFairDbConfigDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbReaderlEFairDbConfigDatagR_Dictionary();
   static void *new_FairDbReaderlEFairDbConfigDatagR(void *p = 0);
   static void *newArray_FairDbReaderlEFairDbConfigDatagR(Long_t size, void *p);
   static void delete_FairDbReaderlEFairDbConfigDatagR(void *p);
   static void deleteArray_FairDbReaderlEFairDbConfigDatagR(void *p);
   static void destruct_FairDbReaderlEFairDbConfigDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbReader<FairDbConfigData>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbReader<FairDbConfigData>) == sizeof( ::ROOTShadow::Shadow::FairDbReaderlEFairDbConfigDatagR));
      ::FairDbReader<FairDbConfigData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbReader<FairDbConfigData> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbReader<FairDbConfigData>", ::FairDbReader<FairDbConfigData>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbReader.h", 29,
                  typeid(::FairDbReader<FairDbConfigData>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbReaderlEFairDbConfigDatagR_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbReader<FairDbConfigData>) );
      instance.SetNew(&new_FairDbReaderlEFairDbConfigDatagR);
      instance.SetNewArray(&newArray_FairDbReaderlEFairDbConfigDatagR);
      instance.SetDelete(&delete_FairDbReaderlEFairDbConfigDatagR);
      instance.SetDeleteArray(&deleteArray_FairDbReaderlEFairDbConfigDatagR);
      instance.SetDestructor(&destruct_FairDbReaderlEFairDbConfigDatagR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbReader<FairDbConfigData>*)
   {
      return GenerateInitInstanceLocal((::FairDbReader<FairDbConfigData>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbReaderlEFairDbConfigDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbConnectionManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbConnectionManager(void *p = 0);
   static void *newArray_FairDbConnectionManager(Long_t size, void *p);
   static void delete_FairDbConnectionManager(void *p);
   static void deleteArray_FairDbConnectionManager(void *p);
   static void destruct_FairDbConnectionManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbConnectionManager*)
   {
      ::FairDbConnectionManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbConnectionManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbConnectionManager", ::FairDbConnectionManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbConnectionManager.h", 16,
                  typeid(::FairDbConnectionManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbConnectionManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbConnectionManager) );
      instance.SetNew(&new_FairDbConnectionManager);
      instance.SetNewArray(&newArray_FairDbConnectionManager);
      instance.SetDelete(&delete_FairDbConnectionManager);
      instance.SetDeleteArray(&deleteArray_FairDbConnectionManager);
      instance.SetDestructor(&destruct_FairDbConnectionManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbConnectionManager*)
   {
      return GenerateInitInstanceLocal((::FairDbConnectionManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbConnectionManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbSqlValidityData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDbSqlValidityData(void *p = 0);
   static void *newArray_FairDbSqlValidityData(Long_t size, void *p);
   static void delete_FairDbSqlValidityData(void *p);
   static void deleteArray_FairDbSqlValidityData(void *p);
   static void destruct_FairDbSqlValidityData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbSqlValidityData*)
   {
      ::FairDbSqlValidityData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbSqlValidityData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbSqlValidityData", ::FairDbSqlValidityData::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbSqlValidityData.h", 31,
                  typeid(::FairDbSqlValidityData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbSqlValidityData::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbSqlValidityData) );
      instance.SetNew(&new_FairDbSqlValidityData);
      instance.SetNewArray(&newArray_FairDbSqlValidityData);
      instance.SetDelete(&delete_FairDbSqlValidityData);
      instance.SetDeleteArray(&deleteArray_FairDbSqlValidityData);
      instance.SetDestructor(&destruct_FairDbSqlValidityData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbSqlValidityData*)
   {
      return GenerateInitInstanceLocal((::FairDbSqlValidityData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbSqlValidityData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbValRecordMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDbValRecordMap(void *p);
   static void deleteArray_FairDbValRecordMap(void *p);
   static void destruct_FairDbValRecordMap(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbValRecordMap*)
   {
      ::FairDbValRecordMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbValRecordMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbValRecordMap", ::FairDbValRecordMap::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbValRecordMap.h", 20,
                  typeid(::FairDbValRecordMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDbValRecordMap::Dictionary, isa_proxy, 4,
                  sizeof(::FairDbValRecordMap) );
      instance.SetDelete(&delete_FairDbValRecordMap);
      instance.SetDeleteArray(&deleteArray_FairDbValRecordMap);
      instance.SetDestructor(&destruct_FairDbValRecordMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbValRecordMap*)
   {
      return GenerateInitInstanceLocal((::FairDbValRecordMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbValRecordMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDBObjectMemberValue_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairDBObjectMemberValue(void *p = 0);
   static void *newArray_FairDBObjectMemberValue(Long_t size, void *p);
   static void delete_FairDBObjectMemberValue(void *p);
   static void deleteArray_FairDBObjectMemberValue(void *p);
   static void destruct_FairDBObjectMemberValue(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDBObjectMemberValue*)
   {
      ::FairDBObjectMemberValue *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDBObjectMemberValue >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDBObjectMemberValue", ::FairDBObjectMemberValue::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbUtils/FairTSQLObject.h", 71,
                  typeid(::FairDBObjectMemberValue), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDBObjectMemberValue::Dictionary, isa_proxy, 4,
                  sizeof(::FairDBObjectMemberValue) );
      instance.SetNew(&new_FairDBObjectMemberValue);
      instance.SetNewArray(&newArray_FairDBObjectMemberValue);
      instance.SetDelete(&delete_FairDBObjectMemberValue);
      instance.SetDeleteArray(&deleteArray_FairDBObjectMemberValue);
      instance.SetDestructor(&destruct_FairDBObjectMemberValue);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDBObjectMemberValue*)
   {
      return GenerateInitInstanceLocal((::FairDBObjectMemberValue*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDBObjectMemberValue*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTSQLObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTSQLObject(void *p = 0);
   static void *newArray_FairTSQLObject(Long_t size, void *p);
   static void delete_FairTSQLObject(void *p);
   static void deleteArray_FairTSQLObject(void *p);
   static void destruct_FairTSQLObject(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTSQLObject*)
   {
      ::FairTSQLObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTSQLObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTSQLObject", ::FairTSQLObject::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbUtils/FairTSQLObject.h", 109,
                  typeid(::FairTSQLObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTSQLObject::Dictionary, isa_proxy, 4,
                  sizeof(::FairTSQLObject) );
      instance.SetNew(&new_FairTSQLObject);
      instance.SetNewArray(&newArray_FairTSQLObject);
      instance.SetDelete(&delete_FairTSQLObject);
      instance.SetDeleteArray(&deleteArray_FairTSQLObject);
      instance.SetDestructor(&destruct_FairTSQLObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTSQLObject*)
   {
      return GenerateInitInstanceLocal((::FairTSQLObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTSQLObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbReaderlEFairDbLogEntrygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbReaderlEFairDbLogEntrygR_Dictionary();
   static void *new_FairDbReaderlEFairDbLogEntrygR(void *p = 0);
   static void *newArray_FairDbReaderlEFairDbLogEntrygR(Long_t size, void *p);
   static void delete_FairDbReaderlEFairDbLogEntrygR(void *p);
   static void deleteArray_FairDbReaderlEFairDbLogEntrygR(void *p);
   static void destruct_FairDbReaderlEFairDbLogEntrygR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbReader<FairDbLogEntry>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbReader<FairDbLogEntry>) == sizeof( ::ROOTShadow::Shadow::FairDbReaderlEFairDbLogEntrygR));
      ::FairDbReader<FairDbLogEntry> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbReader<FairDbLogEntry> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbReader<FairDbLogEntry>", ::FairDbReader<FairDbLogEntry>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbReader.h", 29,
                  typeid(::FairDbReader<FairDbLogEntry>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbReaderlEFairDbLogEntrygR_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbReader<FairDbLogEntry>) );
      instance.SetNew(&new_FairDbReaderlEFairDbLogEntrygR);
      instance.SetNewArray(&newArray_FairDbReaderlEFairDbLogEntrygR);
      instance.SetDelete(&delete_FairDbReaderlEFairDbLogEntrygR);
      instance.SetDeleteArray(&deleteArray_FairDbReaderlEFairDbLogEntrygR);
      instance.SetDestructor(&destruct_FairDbReaderlEFairDbLogEntrygR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbReader<FairDbLogEntry>*)
   {
      return GenerateInitInstanceLocal((::FairDbReader<FairDbLogEntry>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbReaderlEFairDbLogEntrygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbWriterlEFairDbLogEntrygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbWriterlEFairDbLogEntrygR_Dictionary();
   static void *new_FairDbWriterlEFairDbLogEntrygR(void *p = 0);
   static void *newArray_FairDbWriterlEFairDbLogEntrygR(Long_t size, void *p);
   static void delete_FairDbWriterlEFairDbLogEntrygR(void *p);
   static void deleteArray_FairDbWriterlEFairDbLogEntrygR(void *p);
   static void destruct_FairDbWriterlEFairDbLogEntrygR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbWriter<FairDbLogEntry>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbWriter<FairDbLogEntry>) == sizeof( ::ROOTShadow::Shadow::FairDbWriterlEFairDbLogEntrygR));
      ::FairDbWriter<FairDbLogEntry> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbWriter<FairDbLogEntry> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbWriter<FairDbLogEntry>", ::FairDbWriter<FairDbLogEntry>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbWriter.h", 25,
                  typeid(::FairDbWriter<FairDbLogEntry>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbWriterlEFairDbLogEntrygR_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbWriter<FairDbLogEntry>) );
      instance.SetNew(&new_FairDbWriterlEFairDbLogEntrygR);
      instance.SetNewArray(&newArray_FairDbWriterlEFairDbLogEntrygR);
      instance.SetDelete(&delete_FairDbWriterlEFairDbLogEntrygR);
      instance.SetDeleteArray(&deleteArray_FairDbWriterlEFairDbLogEntrygR);
      instance.SetDestructor(&destruct_FairDbWriterlEFairDbLogEntrygR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbWriter<FairDbLogEntry>*)
   {
      return GenerateInitInstanceLocal((::FairDbWriter<FairDbLogEntry>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbWriterlEFairDbLogEntrygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbWriterlEFairDbConfigDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbWriterlEFairDbConfigDatagR_Dictionary();
   static void *new_FairDbWriterlEFairDbConfigDatagR(void *p = 0);
   static void *newArray_FairDbWriterlEFairDbConfigDatagR(Long_t size, void *p);
   static void delete_FairDbWriterlEFairDbConfigDatagR(void *p);
   static void deleteArray_FairDbWriterlEFairDbConfigDatagR(void *p);
   static void destruct_FairDbWriterlEFairDbConfigDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbWriter<FairDbConfigData>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbWriter<FairDbConfigData>) == sizeof( ::ROOTShadow::Shadow::FairDbWriterlEFairDbConfigDatagR));
      ::FairDbWriter<FairDbConfigData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbWriter<FairDbConfigData> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbWriter<FairDbConfigData>", ::FairDbWriter<FairDbConfigData>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbWriter.h", 25,
                  typeid(::FairDbWriter<FairDbConfigData>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbWriterlEFairDbConfigDatagR_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbWriter<FairDbConfigData>) );
      instance.SetNew(&new_FairDbWriterlEFairDbConfigDatagR);
      instance.SetNewArray(&newArray_FairDbWriterlEFairDbConfigDatagR);
      instance.SetDelete(&delete_FairDbWriterlEFairDbConfigDatagR);
      instance.SetDeleteArray(&deleteArray_FairDbWriterlEFairDbConfigDatagR);
      instance.SetDestructor(&destruct_FairDbWriterlEFairDbConfigDatagR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbWriter<FairDbConfigData>*)
   {
      return GenerateInitInstanceLocal((::FairDbWriter<FairDbConfigData>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbWriterlEFairDbConfigDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDbReaderlEFairDbValRecordgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairDbReaderlEFairDbValRecordgR_Dictionary();
   static void *new_FairDbReaderlEFairDbValRecordgR(void *p = 0);
   static void *newArray_FairDbReaderlEFairDbValRecordgR(Long_t size, void *p);
   static void delete_FairDbReaderlEFairDbValRecordgR(void *p);
   static void deleteArray_FairDbReaderlEFairDbValRecordgR(void *p);
   static void destruct_FairDbReaderlEFairDbValRecordgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDbReader<FairDbValRecord>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairDbReader<FairDbValRecord>) == sizeof( ::ROOTShadow::Shadow::FairDbReaderlEFairDbValRecordgR));
      ::FairDbReader<FairDbValRecord> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDbReader<FairDbValRecord> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDbReader<FairDbValRecord>", ::FairDbReader<FairDbValRecord>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbReader.h", 29,
                  typeid(::FairDbReader<FairDbValRecord>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairDbReaderlEFairDbValRecordgR_Dictionary, isa_proxy, 4,
                  sizeof(::FairDbReader<FairDbValRecord>) );
      instance.SetNew(&new_FairDbReaderlEFairDbValRecordgR);
      instance.SetNewArray(&newArray_FairDbReaderlEFairDbValRecordgR);
      instance.SetDelete(&delete_FairDbReaderlEFairDbValRecordgR);
      instance.SetDeleteArray(&deleteArray_FairDbReaderlEFairDbValRecordgR);
      instance.SetDestructor(&destruct_FairDbReaderlEFairDbValRecordgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDbReader<FairDbValRecord>*)
   {
      return GenerateInitInstanceLocal((::FairDbReader<FairDbValRecord>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairDbReaderlEFairDbValRecordgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElementGenericlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRegistryElementGenericlEintgR_Dictionary();
   static void *new_FairRegistryElementGenericlEintgR(void *p = 0);
   static void *newArray_FairRegistryElementGenericlEintgR(Long_t size, void *p);
   static void delete_FairRegistryElementGenericlEintgR(void *p);
   static void deleteArray_FairRegistryElementGenericlEintgR(void *p);
   static void destruct_FairRegistryElementGenericlEintgR(void *p);
   static void streamer_FairRegistryElementGenericlEintgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElementGeneric<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairRegistryElementGeneric<int>) == sizeof( ::ROOTShadow::Shadow::FairRegistryElementGenericlEintgR));
      ::FairRegistryElementGeneric<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElementGeneric<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElementGeneric<int>", ::FairRegistryElementGeneric<int>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElementGeneric.h", 24,
                  typeid(::FairRegistryElementGeneric<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairRegistryElementGenericlEintgR_Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistryElementGeneric<int>) );
      instance.SetNew(&new_FairRegistryElementGenericlEintgR);
      instance.SetNewArray(&newArray_FairRegistryElementGenericlEintgR);
      instance.SetDelete(&delete_FairRegistryElementGenericlEintgR);
      instance.SetDeleteArray(&deleteArray_FairRegistryElementGenericlEintgR);
      instance.SetDestructor(&destruct_FairRegistryElementGenericlEintgR);
      instance.SetStreamerFunc(&streamer_FairRegistryElementGenericlEintgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElementGeneric<int>*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElementGeneric<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRegistryElementGenericlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElementGenericlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRegistryElementGenericlEdoublegR_Dictionary();
   static void *new_FairRegistryElementGenericlEdoublegR(void *p = 0);
   static void *newArray_FairRegistryElementGenericlEdoublegR(Long_t size, void *p);
   static void delete_FairRegistryElementGenericlEdoublegR(void *p);
   static void deleteArray_FairRegistryElementGenericlEdoublegR(void *p);
   static void destruct_FairRegistryElementGenericlEdoublegR(void *p);
   static void streamer_FairRegistryElementGenericlEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElementGeneric<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairRegistryElementGeneric<double>) == sizeof( ::ROOTShadow::Shadow::FairRegistryElementGenericlEdoublegR));
      ::FairRegistryElementGeneric<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElementGeneric<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElementGeneric<double>", ::FairRegistryElementGeneric<double>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElementGeneric.h", 24,
                  typeid(::FairRegistryElementGeneric<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairRegistryElementGenericlEdoublegR_Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistryElementGeneric<double>) );
      instance.SetNew(&new_FairRegistryElementGenericlEdoublegR);
      instance.SetNewArray(&newArray_FairRegistryElementGenericlEdoublegR);
      instance.SetDelete(&delete_FairRegistryElementGenericlEdoublegR);
      instance.SetDeleteArray(&deleteArray_FairRegistryElementGenericlEdoublegR);
      instance.SetDestructor(&destruct_FairRegistryElementGenericlEdoublegR);
      instance.SetStreamerFunc(&streamer_FairRegistryElementGenericlEdoublegR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElementGeneric<double>*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElementGeneric<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRegistryElementGenericlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElementGenericlEFairRegistrygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRegistryElementGenericlEFairRegistrygR_Dictionary();
   static void *new_FairRegistryElementGenericlEFairRegistrygR(void *p = 0);
   static void *newArray_FairRegistryElementGenericlEFairRegistrygR(Long_t size, void *p);
   static void delete_FairRegistryElementGenericlEFairRegistrygR(void *p);
   static void deleteArray_FairRegistryElementGenericlEFairRegistrygR(void *p);
   static void destruct_FairRegistryElementGenericlEFairRegistrygR(void *p);
   static void streamer_FairRegistryElementGenericlEFairRegistrygR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElementGeneric<FairRegistry>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairRegistryElementGeneric<FairRegistry>) == sizeof( ::ROOTShadow::Shadow::FairRegistryElementGenericlEFairRegistrygR));
      ::FairRegistryElementGeneric<FairRegistry> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElementGeneric<FairRegistry> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElementGeneric<FairRegistry>", ::FairRegistryElementGeneric<FairRegistry>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElementGeneric.h", 24,
                  typeid(::FairRegistryElementGeneric<FairRegistry>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairRegistryElementGenericlEFairRegistrygR_Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistryElementGeneric<FairRegistry>) );
      instance.SetNew(&new_FairRegistryElementGenericlEFairRegistrygR);
      instance.SetNewArray(&newArray_FairRegistryElementGenericlEFairRegistrygR);
      instance.SetDelete(&delete_FairRegistryElementGenericlEFairRegistrygR);
      instance.SetDeleteArray(&deleteArray_FairRegistryElementGenericlEFairRegistrygR);
      instance.SetDestructor(&destruct_FairRegistryElementGenericlEFairRegistrygR);
      instance.SetStreamerFunc(&streamer_FairRegistryElementGenericlEFairRegistrygR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElementGeneric<FairRegistry>*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElementGeneric<FairRegistry>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRegistryElementGenericlEFairRegistrygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElementGenericlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRegistryElementGenericlEchargR_Dictionary();
   static void *new_FairRegistryElementGenericlEchargR(void *p = 0);
   static void *newArray_FairRegistryElementGenericlEchargR(Long_t size, void *p);
   static void delete_FairRegistryElementGenericlEchargR(void *p);
   static void deleteArray_FairRegistryElementGenericlEchargR(void *p);
   static void destruct_FairRegistryElementGenericlEchargR(void *p);
   static void streamer_FairRegistryElementGenericlEchargR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElementGeneric<char>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairRegistryElementGeneric<char>) == sizeof( ::ROOTShadow::Shadow::FairRegistryElementGenericlEchargR));
      ::FairRegistryElementGeneric<char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElementGeneric<char> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElementGeneric<char>", ::FairRegistryElementGeneric<char>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElementGeneric.h", 24,
                  typeid(::FairRegistryElementGeneric<char>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairRegistryElementGenericlEchargR_Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistryElementGeneric<char>) );
      instance.SetNew(&new_FairRegistryElementGenericlEchargR);
      instance.SetNewArray(&newArray_FairRegistryElementGenericlEchargR);
      instance.SetDelete(&delete_FairRegistryElementGenericlEchargR);
      instance.SetDeleteArray(&deleteArray_FairRegistryElementGenericlEchargR);
      instance.SetDestructor(&destruct_FairRegistryElementGenericlEchargR);
      instance.SetStreamerFunc(&streamer_FairRegistryElementGenericlEchargR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElementGeneric<char>*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElementGeneric<char>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRegistryElementGenericlEchargR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRegistryElementGenericlEconstsPcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRegistryElementGenericlEconstsPcharmUgR_Dictionary();
   static void *new_FairRegistryElementGenericlEconstsPcharmUgR(void *p = 0);
   static void *newArray_FairRegistryElementGenericlEconstsPcharmUgR(Long_t size, void *p);
   static void delete_FairRegistryElementGenericlEconstsPcharmUgR(void *p);
   static void deleteArray_FairRegistryElementGenericlEconstsPcharmUgR(void *p);
   static void destruct_FairRegistryElementGenericlEconstsPcharmUgR(void *p);
   static void streamer_FairRegistryElementGenericlEconstsPcharmUgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRegistryElementGeneric<const char*>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::FairRegistryElementGeneric<const char*>) == sizeof( ::ROOTShadow::Shadow::FairRegistryElementGenericlEconstsPcharmUgR));
      ::FairRegistryElementGeneric<const char*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRegistryElementGeneric<const char*> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRegistryElementGeneric<const char*>", ::FairRegistryElementGeneric<const char*>::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairRegistryElementGeneric.h", 24,
                  typeid(::FairRegistryElementGeneric<const char*>), ::ROOT::DefineBehavior(ptr, ptr),
                  &FairRegistryElementGenericlEconstsPcharmUgR_Dictionary, isa_proxy, 1,
                  sizeof(::FairRegistryElementGeneric<const char*>) );
      instance.SetNew(&new_FairRegistryElementGenericlEconstsPcharmUgR);
      instance.SetNewArray(&newArray_FairRegistryElementGenericlEconstsPcharmUgR);
      instance.SetDelete(&delete_FairRegistryElementGenericlEconstsPcharmUgR);
      instance.SetDeleteArray(&deleteArray_FairRegistryElementGenericlEconstsPcharmUgR);
      instance.SetDestructor(&destruct_FairRegistryElementGenericlEconstsPcharmUgR);
      instance.SetStreamerFunc(&streamer_FairRegistryElementGenericlEconstsPcharmUgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRegistryElementGeneric<const char*>*)
   {
      return GenerateInitInstanceLocal((::FairRegistryElementGeneric<const char*>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRegistryElementGenericlEconstsPcharmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr ValTimeStamp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ValTimeStamp::Class_Name()
{
   return "ValTimeStamp";
}

//______________________________________________________________________________
const char *ValTimeStamp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValTimeStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ValTimeStamp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValTimeStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ValTimeStamp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValTimeStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ValTimeStamp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValTimeStamp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ValCondition::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ValCondition::Class_Name()
{
   return "ValCondition";
}

//______________________________________________________________________________
const char *ValCondition::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValCondition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ValCondition::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValCondition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ValCondition::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValCondition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ValCondition::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValCondition*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ValInterval::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ValInterval::Class_Name()
{
   return "ValInterval";
}

//______________________________________________________________________________
const char *ValInterval::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValInterval*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ValInterval::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ValInterval*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ValInterval::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValInterval*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ValInterval::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ValInterval*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbException::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbException::Class_Name()
{
   return "FairDbException";
}

//______________________________________________________________________________
const char *FairDbException::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbException*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbException::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbException*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbException::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbException*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbException::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbException*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbExceptionLog::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbExceptionLog::Class_Name()
{
   return "FairDbExceptionLog";
}

//______________________________________________________________________________
const char *FairDbExceptionLog::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExceptionLog*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbExceptionLog::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExceptionLog*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbExceptionLog::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExceptionLog*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbExceptionLog::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExceptionLog*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConnection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConnection::Class_Name()
{
   return "FairDbConnection";
}

//______________________________________________________________________________
const char *FairDbConnection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConnection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConnection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConnection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbObjTableMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbObjTableMap::Class_Name()
{
   return "FairDbObjTableMap";
}

//______________________________________________________________________________
const char *FairDbObjTableMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbObjTableMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbObjTableMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbObjTableMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbObjTableMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbObjTableMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbObjTableMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbObjTableMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbResult::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbResult::Class_Name()
{
   return "FairDbResult";
}

//______________________________________________________________________________
const char *FairDbResult::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResult*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbResult::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResult*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbResult::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResult*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbResult::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResult*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbTableInterface::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbTableInterface::Class_Name()
{
   return "FairDbTableInterface";
}

//______________________________________________________________________________
const char *FairDbTableInterface::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterface*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbTableInterface::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterface*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbTableInterface::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterface*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbTableInterface::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterface*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbValRecord::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbValRecord::Class_Name()
{
   return "FairDbValRecord";
}

//______________________________________________________________________________
const char *FairDbValRecord::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecord*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbValRecord::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecord*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbValRecord::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecord*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbValRecord::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecord*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbCache::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbCache::Class_Name()
{
   return "FairDbCache";
}

//______________________________________________________________________________
const char *FairDbCache::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbCache*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbCache::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbCache*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbCache::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbCache*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbCache::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbCache*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRegistry::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRegistry::Class_Name()
{
   return "FairRegistry";
}

//______________________________________________________________________________
const char *FairRegistry::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRegistry::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRegistry::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRegistry::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistry*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRegistryElement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRegistryElement::Class_Name()
{
   return "FairRegistryElement";
}

//______________________________________________________________________________
const char *FairRegistryElement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRegistryElement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRegistryElement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRegistryElement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElement*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConfigurable::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConfigurable::Class_Name()
{
   return "FairDbConfigurable";
}

//______________________________________________________________________________
const char *FairDbConfigurable::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigurable*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConfigurable::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigurable*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConfigurable::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigurable*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConfigurable::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigurable*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbStreamer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbStreamer::Class_Name()
{
   return "FairDbStreamer";
}

//______________________________________________________________________________
const char *FairDbStreamer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStreamer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbStreamer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStreamer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbStreamer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStreamer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbStreamer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStreamer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbOutTableBuffer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbOutTableBuffer::Class_Name()
{
   return "FairDbOutTableBuffer";
}

//______________________________________________________________________________
const char *FairDbOutTableBuffer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbOutTableBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbOutTableBuffer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbOutTableBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbOutTableBuffer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbOutTableBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbOutTableBuffer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbOutTableBuffer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbResultPool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbResultPool::Class_Name()
{
   return "FairDbResultPool";
}

//______________________________________________________________________________
const char *FairDbResultPool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultPool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbResultPool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultPool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbResultPool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultPool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbResultPool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultPool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbFieldType::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbFieldType::Class_Name()
{
   return "FairDbFieldType";
}

//______________________________________________________________________________
const char *FairDbFieldType::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbFieldType*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbFieldType::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbFieldType*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbFieldType::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbFieldType*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbFieldType::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbFieldType*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConfigData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConfigData::Class_Name()
{
   return "FairDbConfigData";
}

//______________________________________________________________________________
const char *FairDbConfigData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConfigData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConfigData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConfigData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbTableMetaData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbTableMetaData::Class_Name()
{
   return "FairDbTableMetaData";
}

//______________________________________________________________________________
const char *FairDbTableMetaData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableMetaData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbTableMetaData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableMetaData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbTableMetaData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableMetaData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbTableMetaData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableMetaData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbProxy::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbProxy::Class_Name()
{
   return "FairDbProxy";
}

//______________________________________________________________________________
const char *FairDbProxy::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbProxy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbProxy::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbProxy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbProxy::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbProxy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbProxy::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbProxy*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbStatement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbStatement::Class_Name()
{
   return "FairDbStatement";
}

//______________________________________________________________________________
const char *FairDbStatement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStatement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbStatement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStatement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbStatement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStatement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbStatement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStatement*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConnectionPool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConnectionPool::Class_Name()
{
   return "FairDbConnectionPool";
}

//______________________________________________________________________________
const char *FairDbConnectionPool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionPool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConnectionPool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionPool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConnectionPool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionPool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConnectionPool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionPool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbTableBuffer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbTableBuffer::Class_Name()
{
   return "FairDbTableBuffer";
}

//______________________________________________________________________________
const char *FairDbTableBuffer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbTableBuffer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbTableBuffer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbTableBuffer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableBuffer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbString::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbString::Class_Name()
{
   return "FairDbString";
}

//______________________________________________________________________________
const char *FairDbString::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbString*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbString::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbString*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbString::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbString*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbString::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbString*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbValRecordFactory::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbValRecordFactory::Class_Name()
{
   return "FairDbValRecordFactory";
}

//______________________________________________________________________________
const char *FairDbValRecordFactory::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbValRecordFactory::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbValRecordFactory::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbValRecordFactory::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordFactory*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbResultKey::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbResultKey::Class_Name()
{
   return "FairDbResultKey";
}

//______________________________________________________________________________
const char *FairDbResultKey::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbResultKey::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbResultKey::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbResultKey::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbResultCombo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbResultCombo::Class_Name()
{
   return "FairDbResultCombo";
}

//______________________________________________________________________________
const char *FairDbResultCombo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultCombo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbResultCombo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultCombo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbResultCombo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultCombo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbResultCombo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultCombo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbResultNonCombo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbResultNonCombo::Class_Name()
{
   return "FairDbResultNonCombo";
}

//______________________________________________________________________________
const char *FairDbResultNonCombo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultNonCombo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbResultNonCombo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultNonCombo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbResultNonCombo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultNonCombo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbResultNonCombo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultNonCombo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbRollbackTimes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbRollbackTimes::Class_Name()
{
   return "FairDbRollbackTimes";
}

//______________________________________________________________________________
const char *FairDbRollbackTimes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbRollbackTimes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbRollbackTimes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbRollbackTimes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbRollbackTimes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbRollbackTimes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbRollbackTimes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbRollbackTimes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbTableInterfaceStore::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbTableInterfaceStore::Class_Name()
{
   return "FairDbTableInterfaceStore";
}

//______________________________________________________________________________
const char *FairDbTableInterfaceStore::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterfaceStore*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbTableInterfaceStore::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterfaceStore*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbTableInterfaceStore::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterfaceStore*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbTableInterfaceStore::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbTableInterfaceStore*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbDataTypeUnion::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbDataTypeUnion::Class_Name()
{
   return "FairDbDataTypeUnion";
}

//______________________________________________________________________________
const char *FairDbDataTypeUnion::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbDataTypeUnion*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbDataTypeUnion::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbDataTypeUnion*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbDataTypeUnion::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbDataTypeUnion*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbDataTypeUnion::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbDataTypeUnion*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbStopWatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbStopWatch::Class_Name()
{
   return "FairDbStopWatch";
}

//______________________________________________________________________________
const char *FairDbStopWatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbStopWatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbStopWatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbStopWatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbStopWatchManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbStopWatchManager::Class_Name()
{
   return "FairDbStopWatchManager";
}

//______________________________________________________________________________
const char *FairDbStopWatchManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatchManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbStopWatchManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatchManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbStopWatchManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatchManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbStopWatchManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbStopWatchManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbLogEntry::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbLogEntry::Class_Name()
{
   return "FairDbLogEntry";
}

//______________________________________________________________________________
const char *FairDbLogEntry::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbLogEntry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbLogEntry::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbLogEntry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbLogEntry::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbLogEntry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbLogEntry::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbLogEntry*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbExtSqlContent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbExtSqlContent::Class_Name()
{
   return "FairDbExtSqlContent";
}

//______________________________________________________________________________
const char *FairDbExtSqlContent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExtSqlContent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbExtSqlContent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExtSqlContent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbExtSqlContent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExtSqlContent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbExtSqlContent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbExtSqlContent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConfigBuffer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConfigBuffer::Class_Name()
{
   return "FairDbConfigBuffer";
}

//______________________________________________________________________________
const char *FairDbConfigBuffer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConfigBuffer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConfigBuffer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConfigBuffer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConfigBuffer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairDbReader<FairDbConfigData>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbConfigData>::Class_Name()
{
   return "FairDbReader<FairDbConfigData>";
}

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbConfigData>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairDbReader<FairDbConfigData>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairDbReader<FairDbConfigData>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairDbReader<FairDbConfigData>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbConnectionManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbConnectionManager::Class_Name()
{
   return "FairDbConnectionManager";
}

//______________________________________________________________________________
const char *FairDbConnectionManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbConnectionManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbConnectionManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbConnectionManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbConnectionManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbSqlValidityData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbSqlValidityData::Class_Name()
{
   return "FairDbSqlValidityData";
}

//______________________________________________________________________________
const char *FairDbSqlValidityData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbSqlValidityData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbSqlValidityData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbSqlValidityData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbSqlValidityData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbSqlValidityData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbSqlValidityData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbSqlValidityData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDbValRecordMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDbValRecordMap::Class_Name()
{
   return "FairDbValRecordMap";
}

//______________________________________________________________________________
const char *FairDbValRecordMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDbValRecordMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDbValRecordMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDbValRecordMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbValRecordMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDBObjectMemberValue::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDBObjectMemberValue::Class_Name()
{
   return "FairDBObjectMemberValue";
}

//______________________________________________________________________________
const char *FairDBObjectMemberValue::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDBObjectMemberValue*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDBObjectMemberValue::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDBObjectMemberValue*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDBObjectMemberValue::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDBObjectMemberValue*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDBObjectMemberValue::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDBObjectMemberValue*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTSQLObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTSQLObject::Class_Name()
{
   return "FairTSQLObject";
}

//______________________________________________________________________________
const char *FairTSQLObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSQLObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTSQLObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSQLObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTSQLObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSQLObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTSQLObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSQLObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairDbReader<FairDbLogEntry>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbLogEntry>::Class_Name()
{
   return "FairDbReader<FairDbLogEntry>";
}

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbLogEntry>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairDbReader<FairDbLogEntry>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairDbReader<FairDbLogEntry>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairDbReader<FairDbLogEntry>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairDbWriter<FairDbLogEntry>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairDbWriter<FairDbLogEntry>::Class_Name()
{
   return "FairDbWriter<FairDbLogEntry>";
}

//______________________________________________________________________________
template <> const char *FairDbWriter<FairDbLogEntry>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairDbWriter<FairDbLogEntry>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairDbWriter<FairDbLogEntry>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairDbWriter<FairDbLogEntry>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairDbWriter<FairDbConfigData>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairDbWriter<FairDbConfigData>::Class_Name()
{
   return "FairDbWriter<FairDbConfigData>";
}

//______________________________________________________________________________
template <> const char *FairDbWriter<FairDbConfigData>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairDbWriter<FairDbConfigData>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairDbWriter<FairDbConfigData>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairDbWriter<FairDbConfigData>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairDbReader<FairDbValRecord>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbValRecord>::Class_Name()
{
   return "FairDbReader<FairDbValRecord>";
}

//______________________________________________________________________________
template <> const char *FairDbReader<FairDbValRecord>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairDbReader<FairDbValRecord>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairDbReader<FairDbValRecord>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairDbReader<FairDbValRecord>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairRegistryElementGeneric<int>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<int>::Class_Name()
{
   return "FairRegistryElementGeneric<int>";
}

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<int>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairRegistryElementGeneric<int>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairRegistryElementGeneric<int>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairRegistryElementGeneric<int>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairRegistryElementGeneric<double>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<double>::Class_Name()
{
   return "FairRegistryElementGeneric<double>";
}

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<double>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairRegistryElementGeneric<double>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairRegistryElementGeneric<double>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairRegistryElementGeneric<double>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairRegistryElementGeneric<FairRegistry>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<FairRegistry>::Class_Name()
{
   return "FairRegistryElementGeneric<FairRegistry>";
}

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<FairRegistry>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairRegistryElementGeneric<FairRegistry>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairRegistryElementGeneric<FairRegistry>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairRegistryElementGeneric<FairRegistry>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairRegistryElementGeneric<char>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<char>::Class_Name()
{
   return "FairRegistryElementGeneric<char>";
}

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<char>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairRegistryElementGeneric<char>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairRegistryElementGeneric<char>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairRegistryElementGeneric<char>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr FairRegistryElementGeneric<const char*>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<const char*>::Class_Name()
{
   return "FairRegistryElementGeneric<const char*>";
}

//______________________________________________________________________________
template <> const char *FairRegistryElementGeneric<const char*>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int FairRegistryElementGeneric<const char*>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void FairRegistryElementGeneric<const char*>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *FairRegistryElementGeneric<const char*>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetClass();} }
   return fgIsA;
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbDetector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbDetector : new ::FairDbDetector;
   }
   static void *newArray_FairDbDetector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbDetector[nElements] : new ::FairDbDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbDetector(void *p) {
      delete ((::FairDbDetector*)p);
   }
   static void deleteArray_FairDbDetector(void *p) {
      delete [] ((::FairDbDetector*)p);
   }
   static void destruct_FairDbDetector(void *p) {
      typedef ::FairDbDetector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbDetector

//______________________________________________________________________________
void ValTimeStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class ValTimeStamp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ValTimeStamp::Class(),this);
   } else {
      R__b.WriteClassBuffer(ValTimeStamp::Class(),this);
   }
}

//______________________________________________________________________________
void ValTimeStamp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ValTimeStamp.
      TClass *R__cl = ::ValTimeStamp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSec", &fSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNanoSec", &fNanoSec);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ValTimeStamp(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ValTimeStamp : new ::ValTimeStamp;
   }
   static void *newArray_ValTimeStamp(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ValTimeStamp[nElements] : new ::ValTimeStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_ValTimeStamp(void *p) {
      delete ((::ValTimeStamp*)p);
   }
   static void deleteArray_ValTimeStamp(void *p) {
      delete [] ((::ValTimeStamp*)p);
   }
   static void destruct_ValTimeStamp(void *p) {
      typedef ::ValTimeStamp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ValTimeStamp

//______________________________________________________________________________
void ValCondition::Streamer(TBuffer &R__b)
{
   // Stream an object of class ValCondition.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ValCondition::Class(),this);
   } else {
      R__b.WriteClassBuffer(ValCondition::Class(),this);
   }
}

//______________________________________________________________________________
void ValCondition::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ValCondition.
      TClass *R__cl = ::ValCondition::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetector", &fDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataType", &fDataType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.InspectMember(fTimeStamp, "fTimeStamp.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ValCondition(void *p) {
      return  p ? new(p) ::ValCondition : new ::ValCondition;
   }
   static void *newArray_ValCondition(Long_t nElements, void *p) {
      return p ? new(p) ::ValCondition[nElements] : new ::ValCondition[nElements];
   }
   // Wrapper around operator delete
   static void delete_ValCondition(void *p) {
      delete ((::ValCondition*)p);
   }
   static void deleteArray_ValCondition(void *p) {
      delete [] ((::ValCondition*)p);
   }
   static void destruct_ValCondition(void *p) {
      typedef ::ValCondition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ValCondition

//______________________________________________________________________________
void ValInterval::Streamer(TBuffer &R__b)
{
   // Stream an object of class ValInterval.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ValInterval::Class(),this);
   } else {
      R__b.WriteClassBuffer(ValInterval::Class(),this);
   }
}

//______________________________________________________________________________
void ValInterval::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ValInterval.
      TClass *R__cl = ::ValInterval::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorMask", &fDetectorMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimMask", &fSimMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStart", &fTimeStart);
      R__insp.InspectMember(fTimeStart, "fTimeStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeEnd", &fTimeEnd);
      R__insp.InspectMember(fTimeEnd, "fTimeEnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataSource", &fDataSource);
      R__insp.InspectMember(fDataSource, "fDataSource.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ValInterval(void *p) {
      return  p ? new(p) ::ValInterval : new ::ValInterval;
   }
   static void *newArray_ValInterval(Long_t nElements, void *p) {
      return p ? new(p) ::ValInterval[nElements] : new ::ValInterval[nElements];
   }
   // Wrapper around operator delete
   static void delete_ValInterval(void *p) {
      delete ((::ValInterval*)p);
   }
   static void deleteArray_ValInterval(void *p) {
      delete [] ((::ValInterval*)p);
   }
   static void destruct_ValInterval(void *p) {
      typedef ::ValInterval current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ValInterval

//______________________________________________________________________________
template <> void FairDbReader<FairDbLogEntry>::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbReader<FairDbLogEntry>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbReader<FairDbLogEntry>::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbReader<FairDbLogEntry>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbReaderlEFairDbLogEntrygR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbReader<FairDbLogEntry>.
      typedef ::ROOTShadow::Shadow::FairDbReaderlEFairDbLogEntrygR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbLogEntry>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbortTest", &sobj->fAbortTest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &sobj->fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetType", &sobj->fDetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimType", &sobj->fSimType);
   }

}

template <> void FairDbReader<FairDbLogEntry>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairDbReaderlEFairDbLogEntrygR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbReaderlEFairDbLogEntrygR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbLogEntry> : new ::FairDbReader<FairDbLogEntry>;
   }
   static void *newArray_FairDbReaderlEFairDbLogEntrygR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbLogEntry>[nElements] : new ::FairDbReader<FairDbLogEntry>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbReaderlEFairDbLogEntrygR(void *p) {
      delete ((::FairDbReader<FairDbLogEntry>*)p);
   }
   static void deleteArray_FairDbReaderlEFairDbLogEntrygR(void *p) {
      delete [] ((::FairDbReader<FairDbLogEntry>*)p);
   }
   static void destruct_FairDbReaderlEFairDbLogEntrygR(void *p) {
      typedef ::FairDbReader<FairDbLogEntry> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbReader<FairDbLogEntry>

//______________________________________________________________________________
template <> void FairDbWriter<FairDbLogEntry>::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbWriter<FairDbLogEntry>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbWriter<FairDbLogEntry>::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbWriter<FairDbLogEntry>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbWriterlEFairDbLogEntrygR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbWriter<FairDbLogEntry>.
      typedef ::ROOTShadow::Shadow::FairDbWriterlEFairDbLogEntrygR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbLogEntry>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAggregateNo", &sobj->fAggregateNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &sobj->fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPacket", &sobj->fPacket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequireGlobalSeqno", &sobj->fRequireGlobalSeqno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTableInterface", &sobj->fTableInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&sobj->fTableName);
      R__insp.InspectMember("string", (void*)&sobj->fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseOverlayCreationDate", &sobj->fUseOverlayCreationDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fValidRec", &sobj->fValidRec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogEntry", &sobj->fLogEntry);
      R__insp.InspectMember(sobj->fLogEntry, "fLogEntry.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &sobj->fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogTitle", (void*)&sobj->fLogTitle);
      R__insp.InspectMember("string", (void*)&sobj->fLogTitle, "fLogTitle.", false);
   }

}

template <> void FairDbWriter<FairDbLogEntry>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairDbWriterlEFairDbLogEntrygR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbWriterlEFairDbLogEntrygR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbWriter<FairDbLogEntry> : new ::FairDbWriter<FairDbLogEntry>;
   }
   static void *newArray_FairDbWriterlEFairDbLogEntrygR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbWriter<FairDbLogEntry>[nElements] : new ::FairDbWriter<FairDbLogEntry>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbWriterlEFairDbLogEntrygR(void *p) {
      delete ((::FairDbWriter<FairDbLogEntry>*)p);
   }
   static void deleteArray_FairDbWriterlEFairDbLogEntrygR(void *p) {
      delete [] ((::FairDbWriter<FairDbLogEntry>*)p);
   }
   static void destruct_FairDbWriterlEFairDbLogEntrygR(void *p) {
      typedef ::FairDbWriter<FairDbLogEntry> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbWriter<FairDbLogEntry>

//______________________________________________________________________________
template <> void FairDbReader<FairDbConfigData>::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbReader<FairDbConfigData>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbReader<FairDbConfigData>::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbReader<FairDbConfigData>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbReaderlEFairDbConfigDatagR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbReader<FairDbConfigData>.
      typedef ::ROOTShadow::Shadow::FairDbReaderlEFairDbConfigDatagR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbConfigData>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbortTest", &sobj->fAbortTest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &sobj->fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetType", &sobj->fDetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimType", &sobj->fSimType);
   }

}

template <> void FairDbReader<FairDbConfigData>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairDbReaderlEFairDbConfigDatagR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbReaderlEFairDbConfigDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbConfigData> : new ::FairDbReader<FairDbConfigData>;
   }
   static void *newArray_FairDbReaderlEFairDbConfigDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbConfigData>[nElements] : new ::FairDbReader<FairDbConfigData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbReaderlEFairDbConfigDatagR(void *p) {
      delete ((::FairDbReader<FairDbConfigData>*)p);
   }
   static void deleteArray_FairDbReaderlEFairDbConfigDatagR(void *p) {
      delete [] ((::FairDbReader<FairDbConfigData>*)p);
   }
   static void destruct_FairDbReaderlEFairDbConfigDatagR(void *p) {
      typedef ::FairDbReader<FairDbConfigData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbReader<FairDbConfigData>

//______________________________________________________________________________
template <> void FairDbWriter<FairDbConfigData>::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbWriter<FairDbConfigData>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbWriter<FairDbConfigData>::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbWriter<FairDbConfigData>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbWriterlEFairDbConfigDatagR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbWriter<FairDbConfigData>.
      typedef ::ROOTShadow::Shadow::FairDbWriterlEFairDbConfigDatagR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbWriter<FairDbConfigData>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAggregateNo", &sobj->fAggregateNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &sobj->fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPacket", &sobj->fPacket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequireGlobalSeqno", &sobj->fRequireGlobalSeqno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTableInterface", &sobj->fTableInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&sobj->fTableName);
      R__insp.InspectMember("string", (void*)&sobj->fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseOverlayCreationDate", &sobj->fUseOverlayCreationDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fValidRec", &sobj->fValidRec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogEntry", &sobj->fLogEntry);
      R__insp.InspectMember(sobj->fLogEntry, "fLogEntry.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &sobj->fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogTitle", (void*)&sobj->fLogTitle);
      R__insp.InspectMember("string", (void*)&sobj->fLogTitle, "fLogTitle.", false);
   }

}

template <> void FairDbWriter<FairDbConfigData>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairDbWriterlEFairDbConfigDatagR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbWriterlEFairDbConfigDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbWriter<FairDbConfigData> : new ::FairDbWriter<FairDbConfigData>;
   }
   static void *newArray_FairDbWriterlEFairDbConfigDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbWriter<FairDbConfigData>[nElements] : new ::FairDbWriter<FairDbConfigData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbWriterlEFairDbConfigDatagR(void *p) {
      delete ((::FairDbWriter<FairDbConfigData>*)p);
   }
   static void deleteArray_FairDbWriterlEFairDbConfigDatagR(void *p) {
      delete [] ((::FairDbWriter<FairDbConfigData>*)p);
   }
   static void destruct_FairDbWriterlEFairDbConfigDatagR(void *p) {
      typedef ::FairDbWriter<FairDbConfigData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbWriter<FairDbConfigData>

//______________________________________________________________________________
template <> void FairDbReader<FairDbValRecord>::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbReader<FairDbValRecord>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbReader<FairDbValRecord>::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbReader<FairDbValRecord>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbReaderlEFairDbValRecordgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbReader<FairDbValRecord>.
      typedef ::ROOTShadow::Shadow::FairDbReaderlEFairDbValRecordgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbReader<FairDbValRecord>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbortTest", &sobj->fAbortTest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &sobj->fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetType", &sobj->fDetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimType", &sobj->fSimType);
   }

}

template <> void FairDbReader<FairDbValRecord>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairDbReaderlEFairDbValRecordgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbReaderlEFairDbValRecordgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbValRecord> : new ::FairDbReader<FairDbValRecord>;
   }
   static void *newArray_FairDbReaderlEFairDbValRecordgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbReader<FairDbValRecord>[nElements] : new ::FairDbReader<FairDbValRecord>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbReaderlEFairDbValRecordgR(void *p) {
      delete ((::FairDbReader<FairDbValRecord>*)p);
   }
   static void deleteArray_FairDbReaderlEFairDbValRecordgR(void *p) {
      delete [] ((::FairDbReader<FairDbValRecord>*)p);
   }
   static void destruct_FairDbReaderlEFairDbValRecordgR(void *p) {
      typedef ::FairDbReader<FairDbValRecord> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbReader<FairDbValRecord>

//______________________________________________________________________________
void FairDbCache::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbCache.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbCache::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbCache::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbCache::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbCache.
      TClass *R__cl = ::FairDbCache::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCache", (void*)&fCache);
      R__insp.InspectMember("map<Int_t,ResultList_t>", (void*)&fCache, "fCache.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurSize", &fCurSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxSize", &fMaxSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumAccepted", &fNumAccepted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumReused", &fNumReused);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbCache(void *p) {
      delete ((::FairDbCache*)p);
   }
   static void deleteArray_FairDbCache(void *p) {
      delete [] ((::FairDbCache*)p);
   }
   static void destruct_FairDbCache(void *p) {
      typedef ::FairDbCache current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbCache

//______________________________________________________________________________
void FairDbConnectionPool::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConnectionPool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConnectionPool::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConnectionPool::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConnectionPool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConnectionPool.
      TClass *R__cl = ::FairDbConnectionPool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGlobalSeqNoDbNo", &fGlobalSeqNoDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConnections", (void*)&fConnections);
      R__insp.InspectMember("vector<FairDbConnection*>", (void*)&fConnections, "fConnections.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTemporaryTables", (void*)&fTemporaryTables);
      R__insp.InspectMember("map<std::string,Int_t>", (void*)&fTemporaryTables, "fTemporaryTables.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbConnectionPool(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnectionPool : new ::FairDbConnectionPool;
   }
   static void *newArray_FairDbConnectionPool(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnectionPool[nElements] : new ::FairDbConnectionPool[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbConnectionPool(void *p) {
      delete ((::FairDbConnectionPool*)p);
   }
   static void deleteArray_FairDbConnectionPool(void *p) {
      delete [] ((::FairDbConnectionPool*)p);
   }
   static void destruct_FairDbConnectionPool(void *p) {
      typedef ::FairDbConnectionPool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConnectionPool

//______________________________________________________________________________
void FairDbConfigData::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConfigData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConfigData::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConfigData::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConfigData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConfigData.
      TClass *R__cl = ::FairDbConfigData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParams", (void*)&fParams);
      R__insp.InspectMember("vector<Param*>", (void*)&fParams, "fParams.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAggregateNo", &fAggregateNo);
      FairDbObjTableMap::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbConfigData(void *p) {
      return  p ? new(p) ::FairDbConfigData : new ::FairDbConfigData;
   }
   static void *newArray_FairDbConfigData(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbConfigData[nElements] : new ::FairDbConfigData[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbConfigData(void *p) {
      delete ((::FairDbConfigData*)p);
   }
   static void deleteArray_FairDbConfigData(void *p) {
      delete [] ((::FairDbConfigData*)p);
   }
   static void destruct_FairDbConfigData(void *p) {
      typedef ::FairDbConfigData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConfigData

//______________________________________________________________________________
void FairDbConfigBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConfigBuffer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConfigBuffer::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConfigBuffer::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConfigBuffer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConfigBuffer.
      TClass *R__cl = ::FairDbConfigBuffer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCFSet", &fCFSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCFSetTable", &fCFSetTable);
      R__insp.InspectMember(fCFSetTable, "fCFSetTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCFSetModified", &fCFSetModified);
      R__insp.InspectMember(fCFSetModified, "fCFSetModified.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVRec", &fVRec);
      R__insp.InspectMember(fVRec, "fVRec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConfigName", (void*)&fConfigName);
      R__insp.InspectMember("string", (void*)&fConfigName, "fConfigName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSoftwName", (void*)&fSoftwName);
      R__insp.InspectMember("string", (void*)&fSoftwName, "fSoftwName.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbConfigBuffer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConfigBuffer : new ::FairDbConfigBuffer;
   }
   static void *newArray_FairDbConfigBuffer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConfigBuffer[nElements] : new ::FairDbConfigBuffer[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbConfigBuffer(void *p) {
      delete ((::FairDbConfigBuffer*)p);
   }
   static void deleteArray_FairDbConfigBuffer(void *p) {
      delete [] ((::FairDbConfigBuffer*)p);
   }
   static void destruct_FairDbConfigBuffer(void *p) {
      typedef ::FairDbConfigBuffer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConfigBuffer

//______________________________________________________________________________
void FairDbConnection::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConnection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConnection::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConnection::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConnection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConnection.
      TClass *R__cl = ::FairDbConnection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbName", (void*)&fDbName);
      R__insp.InspectMember("string", (void*)&fDbName, "fDbName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUser", (void*)&fUser);
      R__insp.InspectMember("string", (void*)&fUser, "fUser.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassword", (void*)&fPassword);
      R__insp.InspectMember("string", (void*)&fPassword, "fPassword.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExistingTableList", (void*)&fExistingTableList);
      R__insp.InspectMember("string", (void*)&fExistingTableList, "fExistingTableList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSchema", &fSchema);
      R__insp.InspectMember(fSchema, "fSchema.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumConnectedStatements", &fNumConnectedStatements);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUrl", &fUrl);
      R__insp.InspectMember(fUrl, "fUrl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUrlValidated", &fUrlValidated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsTemporary", &fIsTemporary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbType", &fDbType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServer", &fServer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExceptionLog", &fExceptionLog);
      R__insp.InspectMember(fExceptionLog, "fExceptionLog.");
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbConnection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnection : new ::FairDbConnection;
   }
   static void *newArray_FairDbConnection(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnection[nElements] : new ::FairDbConnection[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbConnection(void *p) {
      delete ((::FairDbConnection*)p);
   }
   static void deleteArray_FairDbConnection(void *p) {
      delete [] ((::FairDbConnection*)p);
   }
   static void destruct_FairDbConnection(void *p) {
      typedef ::FairDbConnection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConnection

//______________________________________________________________________________
void FairDbConnectionManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConnectionManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConnectionManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConnectionManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConnectionManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConnectionManager.
      TClass *R__cl = ::FairDbConnectionManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConnectPool", &fConnectPool);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbConnectionManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnectionManager : new ::FairDbConnectionManager;
   }
   static void *newArray_FairDbConnectionManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbConnectionManager[nElements] : new ::FairDbConnectionManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbConnectionManager(void *p) {
      delete ((::FairDbConnectionManager*)p);
   }
   static void deleteArray_FairDbConnectionManager(void *p) {
      delete [] ((::FairDbConnectionManager*)p);
   }
   static void destruct_FairDbConnectionManager(void *p) {
      typedef ::FairDbConnectionManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConnectionManager

//______________________________________________________________________________
void FairDbProxy::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbProxy.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbProxy::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbProxy::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbProxy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbProxy.
      TClass *R__cl = ::FairDbProxy::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaData", &fMetaData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaValid", &fMetaValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlCondition", (void*)&fSqlCondition);
      R__insp.InspectMember("string", (void*)&fSqlCondition, "fSqlCondition.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableNameUc", (void*)&fTableNameUc);
      R__insp.InspectMember("string", (void*)&fTableNameUc, "fTableNameUc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTableInterface", &fTableInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValSuffix", (void*)&fValSuffix);
      R__insp.InspectMember("string", (void*)&fValSuffix, "fValSuffix.", false);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbProxy(void *p) {
      delete ((::FairDbProxy*)p);
   }
   static void deleteArray_FairDbProxy(void *p) {
      delete [] ((::FairDbProxy*)p);
   }
   static void destruct_FairDbProxy(void *p) {
      typedef ::FairDbProxy current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbProxy

//______________________________________________________________________________
void FairDbFieldType::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbFieldType.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbFieldType::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbFieldType::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbFieldType::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbFieldType.
      TClass *R__cl = ::FairDbFieldType::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConcept", &fConcept);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbFieldType(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbFieldType : new ::FairDbFieldType;
   }
   static void *newArray_FairDbFieldType(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbFieldType[nElements] : new ::FairDbFieldType[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbFieldType(void *p) {
      delete ((::FairDbFieldType*)p);
   }
   static void deleteArray_FairDbFieldType(void *p) {
      delete [] ((::FairDbFieldType*)p);
   }
   static void destruct_FairDbFieldType(void *p) {
      typedef ::FairDbFieldType current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbFieldType

//______________________________________________________________________________
namespace ROOTDict {
   void FairDbResultKeycLcLVRecKey_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairDbResultKey::VRecKey.
      typedef ::ROOTShadow::Shadow::FairDbResultKey::VRecKey ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDbResultKey::VRecKey*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SeqNo", &sobj->SeqNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CreationDate", &sobj->CreationDate);
      R__insp.InspectMember(sobj->CreationDate, "CreationDate.");
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbResultKeycLcLVRecKey(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultKey::VRecKey : new ::FairDbResultKey::VRecKey;
   }
   static void *newArray_FairDbResultKeycLcLVRecKey(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultKey::VRecKey[nElements] : new ::FairDbResultKey::VRecKey[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbResultKeycLcLVRecKey(void *p) {
      delete ((::FairDbResultKey::VRecKey*)p);
   }
   static void deleteArray_FairDbResultKeycLcLVRecKey(void *p) {
      delete [] ((::FairDbResultKey::VRecKey*)p);
   }
   static void destruct_FairDbResultKeycLcLVRecKey(void *p) {
      typedef ::FairDbResultKey::VRecKey current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResultKey::VRecKey

//______________________________________________________________________________
void FairDbResultKey::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbResultKey.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbResultKey::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbResultKey::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbResultKey::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbResultKey.
      TClass *R__cl = ::FairDbResultKey::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRowName", (void*)&fRowName);
      R__insp.InspectMember("string", (void*)&fRowName, "fRowName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVRecKeys", (void*)&fVRecKeys);
      R__insp.InspectMember("list<FairDbResultKey::VRecKey>", (void*)&fVRecKeys, "fVRecKeys.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumVRecKeys", &fNumVRecKeys);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbResultKey(void *p) {
      return  p ? new(p) ::FairDbResultKey : new ::FairDbResultKey;
   }
   static void *newArray_FairDbResultKey(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbResultKey[nElements] : new ::FairDbResultKey[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbResultKey(void *p) {
      delete ((::FairDbResultKey*)p);
   }
   static void deleteArray_FairDbResultKey(void *p) {
      delete [] ((::FairDbResultKey*)p);
   }
   static void destruct_FairDbResultKey(void *p) {
      typedef ::FairDbResultKey current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResultKey

//______________________________________________________________________________
void FairDbLogEntry::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbLogEntry.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbLogEntry::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbLogEntry::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbLogEntry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbLogEntry.
      TClass *R__cl = ::FairDbLogEntry::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeqNo", &fSeqNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogTableName", (void*)&fLogTableName);
      R__insp.InspectMember("string", (void*)&fLogTableName, "fLogTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogDetMask", &fLogDetMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogSimMask", &fLogSimMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogVersion", &fLogVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogSeqNoMin", &fLogSeqNoMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogSeqNoMax", &fLogSeqNoMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogNumSeqNo", &fLogNumSeqNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpdateTime", &fUpdateTime);
      R__insp.InspectMember(fUpdateTime, "fUpdateTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserName", (void*)&fUserName);
      R__insp.InspectMember("string", (void*)&fUserName, "fUserName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessName", (void*)&fProcessName);
      R__insp.InspectMember("string", (void*)&fProcessName, "fProcessName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHostName", (void*)&fHostName);
      R__insp.InspectMember("string", (void*)&fHostName, "fHostName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fServerName", (void*)&fServerName);
      R__insp.InspectMember("string", (void*)&fServerName, "fServerName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReason", (void*)&fReason);
      R__insp.InspectMember("string", (void*)&fReason, "fReason.", false);
      FairDbObjTableMap::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbLogEntry(void *p) {
      return  p ? new(p) ::FairDbLogEntry : new ::FairDbLogEntry;
   }
   static void *newArray_FairDbLogEntry(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbLogEntry[nElements] : new ::FairDbLogEntry[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbLogEntry(void *p) {
      delete ((::FairDbLogEntry*)p);
   }
   static void deleteArray_FairDbLogEntry(void *p) {
      delete [] ((::FairDbLogEntry*)p);
   }
   static void destruct_FairDbLogEntry(void *p) {
      typedef ::FairDbLogEntry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbLogEntry

//______________________________________________________________________________
void FairDbOutTableBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbOutTableBuffer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbOutTableBuffer::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbOutTableBuffer::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbOutTableBuffer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbOutTableBuffer.
      TClass *R__cl = ::FairDbOutTableBuffer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBadData", &fBadData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCSV", (void*)&fCSV);
      R__insp.InspectMember("string", (void*)&fCSV, "fCSV.", false);
      FairDbTableBuffer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbOutTableBuffer(void *p) {
      delete ((::FairDbOutTableBuffer*)p);
   }
   static void deleteArray_FairDbOutTableBuffer(void *p) {
      delete [] ((::FairDbOutTableBuffer*)p);
   }
   static void destruct_FairDbOutTableBuffer(void *p) {
      typedef ::FairDbOutTableBuffer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbOutTableBuffer

//______________________________________________________________________________
void FairDbResult::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbResult.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbResult::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbResult::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbResult::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbResult.
      TClass *R__cl = ::FairDbResult::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanReuse", &fCanReuse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffVRec", &fEffVRec);
      R__insp.InspectMember(fEffVRec, "fEffVRec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexKeys", (void*)&fIndexKeys);
      R__insp.InspectMember("IndexToRow_t", (void*)&fIndexKeys, "fIndexKeys.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fKey", &fKey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResultsFromDb", &fResultsFromDb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumClients", &fNumClients);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlQualifiers", (void*)&fSqlQualifiers);
      R__insp.InspectMember("string", (void*)&fSqlQualifiers, "fSqlQualifiers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExceptionLog", &fExceptionLog);
      R__insp.InspectMember(fExceptionLog, "fExceptionLog.");
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbResult(void *p) {
      delete ((::FairDbResult*)p);
   }
   static void deleteArray_FairDbResult(void *p) {
      delete [] ((::FairDbResult*)p);
   }
   static void destruct_FairDbResult(void *p) {
      typedef ::FairDbResult current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResult

//______________________________________________________________________________
void FairDbResultCombo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbResultCombo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbResultCombo::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbResultCombo::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbResultCombo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbResultCombo.
      TClass *R__cl = ::FairDbResultCombo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResults", (void*)&fResults);
      R__insp.InspectMember("vector<const FairDbResult*>", (void*)&fResults, "fResults.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRowKeys", (void*)&fRowKeys);
      R__insp.InspectMember("vector<const FairDbObjTableMap*>", (void*)&fRowKeys, "fRowKeys.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      FairDbResult::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbResultCombo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultCombo : new ::FairDbResultCombo;
   }
   static void *newArray_FairDbResultCombo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultCombo[nElements] : new ::FairDbResultCombo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbResultCombo(void *p) {
      delete ((::FairDbResultCombo*)p);
   }
   static void deleteArray_FairDbResultCombo(void *p) {
      delete [] ((::FairDbResultCombo*)p);
   }
   static void destruct_FairDbResultCombo(void *p) {
      typedef ::FairDbResultCombo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResultCombo

//______________________________________________________________________________
void FairDbResultNonCombo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbResultNonCombo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbResultNonCombo::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbResultNonCombo::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbResultNonCombo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbResultNonCombo.
      TClass *R__cl = ::FairDbResultNonCombo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRows", (void*)&fRows);
      R__insp.InspectMember("vector<FairDbObjTableMap*>", (void*)&fRows, "fRows.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBuffer", &fBuffer);
      FairDbResult::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbResultNonCombo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultNonCombo : new ::FairDbResultNonCombo;
   }
   static void *newArray_FairDbResultNonCombo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbResultNonCombo[nElements] : new ::FairDbResultNonCombo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbResultNonCombo(void *p) {
      delete ((::FairDbResultNonCombo*)p);
   }
   static void deleteArray_FairDbResultNonCombo(void *p) {
      delete [] ((::FairDbResultNonCombo*)p);
   }
   static void destruct_FairDbResultNonCombo(void *p) {
      typedef ::FairDbResultNonCombo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResultNonCombo

//______________________________________________________________________________
void FairDbResultPool::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbResultPool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbResultPool::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbResultPool::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbResultPool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbResultPool.
      TClass *R__cl = ::FairDbResultPool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurRow", &fCurRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbType", &fDbType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStatement", &fStatement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTSQLStatement", &fTSQLStatement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExhausted", &fExhausted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTableInterface", &fTableInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValString", (void*)&fValString);
      R__insp.InspectMember("string", (void*)&fValString, "fValString.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillOpts", (void*)&fFillOpts);
      R__insp.InspectMember("string", (void*)&fFillOpts, "fFillOpts.", false);
      FairDbTableBuffer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbResultPool(void *p) {
      delete ((::FairDbResultPool*)p);
   }
   static void deleteArray_FairDbResultPool(void *p) {
      delete [] ((::FairDbResultPool*)p);
   }
   static void destruct_FairDbResultPool(void *p) {
      typedef ::FairDbResultPool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbResultPool

//______________________________________________________________________________
void FairDbRollbackTimes::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbRollbackTimes.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbRollbackTimes::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbRollbackTimes::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbRollbackTimes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbRollbackTimes.
      TClass *R__cl = ::FairDbRollbackTimes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableToDate", (void*)&fTableToDate);
      R__insp.InspectMember("FairDbRollbackTimes::name_map_t", (void*)&fTableToDate, "fTableToDate.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableToType", (void*)&fTableToType);
      R__insp.InspectMember("FairDbRollbackTimes::name_map_t", (void*)&fTableToType, "fTableToType.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbRollbackTimes(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbRollbackTimes : new ::FairDbRollbackTimes;
   }
   static void *newArray_FairDbRollbackTimes(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbRollbackTimes[nElements] : new ::FairDbRollbackTimes[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbRollbackTimes(void *p) {
      delete ((::FairDbRollbackTimes*)p);
   }
   static void deleteArray_FairDbRollbackTimes(void *p) {
      delete [] ((::FairDbRollbackTimes*)p);
   }
   static void destruct_FairDbRollbackTimes(void *p) {
      typedef ::FairDbRollbackTimes current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbRollbackTimes

//______________________________________________________________________________
void FairDbTableBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbTableBuffer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbTableBuffer::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbTableBuffer::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbTableBuffer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbTableBuffer.
      TClass *R__cl = ::FairDbTableBuffer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurCol", &fCurCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasRowCounter", &fHasRowCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaData", &fMetaData);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbTableBuffer(void *p) {
      delete ((::FairDbTableBuffer*)p);
   }
   static void deleteArray_FairDbTableBuffer(void *p) {
      delete [] ((::FairDbTableBuffer*)p);
   }
   static void destruct_FairDbTableBuffer(void *p) {
      typedef ::FairDbTableBuffer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbTableBuffer

//______________________________________________________________________________
void FairDbExtSqlContent::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbExtSqlContent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbExtSqlContent::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbExtSqlContent::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbExtSqlContent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbExtSqlContent.
      TClass *R__cl = ::FairDbExtSqlContent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntervalType", &fIntervalType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStart", &fTimeStart);
      R__insp.InspectMember(fTimeStart, "fTimeStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeEnd", &fTimeEnd);
      R__insp.InspectMember(fTimeEnd, "fTimeEnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetType", &fDetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimType", &fSimType);
      FairDbString::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbExtSqlContent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbExtSqlContent : new ::FairDbExtSqlContent;
   }
   static void *newArray_FairDbExtSqlContent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbExtSqlContent[nElements] : new ::FairDbExtSqlContent[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbExtSqlContent(void *p) {
      delete ((::FairDbExtSqlContent*)p);
   }
   static void deleteArray_FairDbExtSqlContent(void *p) {
      delete [] ((::FairDbExtSqlContent*)p);
   }
   static void destruct_FairDbExtSqlContent(void *p) {
      typedef ::FairDbExtSqlContent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbExtSqlContent

//______________________________________________________________________________
void FairDbSqlValidityData::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbSqlValidityData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbSqlValidityData::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbSqlValidityData::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbSqlValidityData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbSqlValidityData.
      TClass *R__cl = ::FairDbSqlValidityData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumErrors", &fNumErrors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeqNo", &fSeqNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlMySqlMetaMain", (void*)&fSqlMySqlMetaMain);
      R__insp.InspectMember("string", (void*)&fSqlMySqlMetaMain, "fSqlMySqlMetaMain.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlMySqlMetaVal", (void*)&fSqlMySqlMetaVal);
      R__insp.InspectMember("string", (void*)&fSqlMySqlMetaVal, "fSqlMySqlMetaVal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlStmts", (void*)&fSqlStmts);
      R__insp.InspectMember("list<std::string>", (void*)&fSqlStmts, "fSqlStmts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumStmts", &fNumStmts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCreationDate", &fCreationDate);
      R__insp.InspectMember(fCreationDate, "fCreationDate.");
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbSqlValidityData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbSqlValidityData : new ::FairDbSqlValidityData;
   }
   static void *newArray_FairDbSqlValidityData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbSqlValidityData[nElements] : new ::FairDbSqlValidityData[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbSqlValidityData(void *p) {
      delete ((::FairDbSqlValidityData*)p);
   }
   static void deleteArray_FairDbSqlValidityData(void *p) {
      delete [] ((::FairDbSqlValidityData*)p);
   }
   static void destruct_FairDbSqlValidityData(void *p) {
      typedef ::FairDbSqlValidityData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbSqlValidityData

//______________________________________________________________________________
void FairDbString::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbString.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbString::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbString::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbString::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbString.
      TClass *R__cl = ::FairDbString::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fString", (void*)&fString);
      R__insp.InspectMember("string", (void*)&fString, "fString.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbString(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbString : new ::FairDbString;
   }
   static void *newArray_FairDbString(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbString[nElements] : new ::FairDbString[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbString(void *p) {
      delete ((::FairDbString*)p);
   }
   static void deleteArray_FairDbString(void *p) {
      delete [] ((::FairDbString*)p);
   }
   static void destruct_FairDbString(void *p) {
      typedef ::FairDbString current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbString

//______________________________________________________________________________
void FairDbStreamer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbStreamer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbStreamer::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbStreamer::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbStreamer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbStreamer.
      TClass *R__cl = ::FairDbStreamer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fString", &fString);
      R__insp.InspectMember(fString, "fString.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbStreamer(void *p) {
      return  p ? new(p) ::FairDbStreamer : new ::FairDbStreamer;
   }
   static void *newArray_FairDbStreamer(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbStreamer[nElements] : new ::FairDbStreamer[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbStreamer(void *p) {
      delete ((::FairDbStreamer*)p);
   }
   static void deleteArray_FairDbStreamer(void *p) {
      delete [] ((::FairDbStreamer*)p);
   }
   static void destruct_FairDbStreamer(void *p) {
      typedef ::FairDbStreamer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbStreamer

//______________________________________________________________________________
void FairDbStatement::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbStatement.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbStatement::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbStatement::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbStatement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbStatement.
      TClass *R__cl = ::FairDbStatement::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbType", &fDbType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExceptionLog", &fExceptionLog);
      R__insp.InspectMember(fExceptionLog, "fExceptionLog.");
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbStatement(void *p) {
      delete ((::FairDbStatement*)p);
   }
   static void deleteArray_FairDbStatement(void *p) {
      delete [] ((::FairDbStatement*)p);
   }
   static void destruct_FairDbStatement(void *p) {
      typedef ::FairDbStatement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbStatement

//______________________________________________________________________________
void FairDbTableMetaData::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbTableMetaData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbTableMetaData::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbTableMetaData::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbTableMetaData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbTableMetaData.
      TClass *R__cl = ::FairDbTableMetaData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColAttr", (void*)&fColAttr);
      R__insp.InspectMember("vector<ColumnAttributes>", (void*)&fColAttr, "fColAttr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCols", &fNumCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbTableMetaData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbTableMetaData : new ::FairDbTableMetaData;
   }
   static void *newArray_FairDbTableMetaData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbTableMetaData[nElements] : new ::FairDbTableMetaData[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbTableMetaData(void *p) {
      delete ((::FairDbTableMetaData*)p);
   }
   static void deleteArray_FairDbTableMetaData(void *p) {
      delete [] ((::FairDbTableMetaData*)p);
   }
   static void destruct_FairDbTableMetaData(void *p) {
      typedef ::FairDbTableMetaData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbTableMetaData

//______________________________________________________________________________
void FairDbTableInterfaceStore::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbTableInterfaceStore.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbTableInterfaceStore::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbTableInterfaceStore::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbTableInterfaceStore::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbTableInterfaceStore.
      TClass *R__cl = ::FairDbTableInterfaceStore::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConnectionPool", &fConnectionPool);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqlCondition", (void*)&fSqlCondition);
      R__insp.InspectMember("string", (void*)&fSqlCondition, "fSqlCondition.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRollbackTimes", &fRollbackTimes);
      R__insp.InspectMember(fRollbackTimes, "fRollbackTimes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataTypeAss", &fDataTypeAss);
      R__insp.InspectMember(fDataTypeAss, "fDataTypeAss.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogName", &fLogName);
      R__insp.InspectMember(fLogName, "fLogName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbosity", &fVerbosity);
      FairDbConfigurable::ShowMembers(R__insp);
}

namespace ROOTDict {
} // end of namespace ROOTDict for class ::FairDbTableInterfaceStore

//______________________________________________________________________________
void FairDbTableInterface::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbTableInterface.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbTableInterface::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbTableInterface::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbTableInterface::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbTableInterface.
      TClass *R__cl = ::FairDbTableInterface::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConnectionPool", &fConnectionPool);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaData", &fMetaData);
      R__insp.InspectMember(fMetaData, "fMetaData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaValid", &fMetaValid);
      R__insp.InspectMember(fMetaValid, "fMetaValid.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanCache", &fCanCache);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCache", &fCache);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDBProxy", &fDBProxy);
      R__insp.InspectMember(fDBProxy, "fDBProxy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExists", &fExists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObjTableMap", &fObjTableMap);
}

namespace ROOTDict {
} // end of namespace ROOTDict for class ::FairDbTableInterface

//______________________________________________________________________________
void FairDbObjTableMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbObjTableMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbObjTableMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbObjTableMap::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbObjTableMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbObjTableMap.
      TClass *R__cl = ::FairDbObjTableMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbEntry", &fDbEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLogTitle", (void*)&fLogTitle);
      R__insp.InspectMember("string", (void*)&fLogTitle, "fLogTitle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCombo", &fCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStart", &fTimeStart);
      R__insp.InspectMember(fTimeStart, "fTimeStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeEnd", &fTimeEnd);
      R__insp.InspectMember(fTimeEnd, "fTimeEnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetType", &fDetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimType", &fSimType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOwner", &fOwner);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbObjTableMap(void *p) {
      return  p ? new(p) ::FairDbObjTableMap : new ::FairDbObjTableMap;
   }
   static void *newArray_FairDbObjTableMap(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbObjTableMap[nElements] : new ::FairDbObjTableMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbObjTableMap(void *p) {
      delete ((::FairDbObjTableMap*)p);
   }
   static void deleteArray_FairDbObjTableMap(void *p) {
      delete [] ((::FairDbObjTableMap*)p);
   }
   static void destruct_FairDbObjTableMap(void *p) {
      typedef ::FairDbObjTableMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbObjTableMap

//______________________________________________________________________________
void FairDbDataTypeUnion::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbDataTypeUnion.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbDataTypeUnion::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbDataTypeUnion::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbDataTypeUnion::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbDataTypeUnion.
      TClass *R__cl = ::FairDbDataTypeUnion::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnions", (void*)&fUnions);
      R__insp.InspectMember("FairDbDataTypeUnion::SimMap_t", (void*)&fUnions, "fUnions.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbDataTypeUnion(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbDataTypeUnion : new ::FairDbDataTypeUnion;
   }
   static void *newArray_FairDbDataTypeUnion(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbDataTypeUnion[nElements] : new ::FairDbDataTypeUnion[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbDataTypeUnion(void *p) {
      delete ((::FairDbDataTypeUnion*)p);
   }
   static void deleteArray_FairDbDataTypeUnion(void *p) {
      delete [] ((::FairDbDataTypeUnion*)p);
   }
   static void destruct_FairDbDataTypeUnion(void *p) {
      typedef ::FairDbDataTypeUnion current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbDataTypeUnion

//______________________________________________________________________________
void FairDbStopWatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbStopWatch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbStopWatch::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbStopWatch::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbStopWatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbStopWatch.
      TClass *R__cl = ::FairDbStopWatch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurSubWatch", &fCurSubWatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRowSize", &fRowSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQueryStage", &fQueryStage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSubWatches[4]", fSubWatches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName", (void*)&fTableName);
      R__insp.InspectMember("string", (void*)&fTableName, "fTableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWatch", &fWatch);
      R__insp.InspectMember(fWatch, "fWatch.");
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbStopWatch(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbStopWatch : new ::FairDbStopWatch;
   }
   static void *newArray_FairDbStopWatch(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbStopWatch[nElements] : new ::FairDbStopWatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbStopWatch(void *p) {
      delete ((::FairDbStopWatch*)p);
   }
   static void deleteArray_FairDbStopWatch(void *p) {
      delete [] ((::FairDbStopWatch*)p);
   }
   static void destruct_FairDbStopWatch(void *p) {
      typedef ::FairDbStopWatch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbStopWatch

//______________________________________________________________________________
void FairDbStopWatchManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbStopWatchManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbStopWatchManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbStopWatchManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbStopWatchManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbStopWatchManager.
      TClass *R__cl = ::FairDbStopWatchManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnabled", &fEnabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSubWatchEnabled", &fSubWatchEnabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopWatchs", (void*)&fStopWatchs);
      R__insp.InspectMember("list<FairDbStopWatch*>", (void*)&fStopWatchs, "fStopWatchs.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbStopWatchManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbStopWatchManager : new ::FairDbStopWatchManager;
   }
   static void *newArray_FairDbStopWatchManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbStopWatchManager[nElements] : new ::FairDbStopWatchManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbStopWatchManager(void *p) {
      delete ((::FairDbStopWatchManager*)p);
   }
   static void deleteArray_FairDbStopWatchManager(void *p) {
      delete [] ((::FairDbStopWatchManager*)p);
   }
   static void destruct_FairDbStopWatchManager(void *p) {
      typedef ::FairDbStopWatchManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbStopWatchManager

//______________________________________________________________________________
void FairDbValRecord::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbValRecord.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbValRecord::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbValRecord::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbValRecord::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbValRecord.
      TClass *R__cl = ::FairDbValRecord::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAggregateNo", &fAggregateNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCreationDate", &fCreationDate);
      R__insp.InspectMember(fCreationDate, "fCreationDate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInsertDate", &fInsertDate);
      R__insp.InspectMember(fInsertDate, "fInsertDate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsGap", &fIsGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeqNo", &fSeqNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTableInterface", &fTableInterface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValInterval", &fValInterval);
      R__insp.InspectMember(fValInterval, "fValInterval.");
      FairDbObjTableMap::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbValRecord(void *p) {
      return  p ? new(p) ::FairDbValRecord : new ::FairDbValRecord;
   }
   static void *newArray_FairDbValRecord(Long_t nElements, void *p) {
      return p ? new(p) ::FairDbValRecord[nElements] : new ::FairDbValRecord[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbValRecord(void *p) {
      delete ((::FairDbValRecord*)p);
   }
   static void deleteArray_FairDbValRecord(void *p) {
      delete [] ((::FairDbValRecord*)p);
   }
   static void destruct_FairDbValRecord(void *p) {
      typedef ::FairDbValRecord current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbValRecord

//______________________________________________________________________________
void FairDbValRecordMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbValRecordMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbValRecordMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbValRecordMap::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbValRecordMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbValRecordMap.
      TClass *R__cl = ::FairDbValRecordMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbNo", &fDbNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeqNoToRec", (void*)&fSeqNoToRec);
      R__insp.InspectMember("map<UInt_t,const FairDbValRecord*>", (void*)&fSeqNoToRec, "fSeqNoToRec.", false);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbValRecordMap(void *p) {
      delete ((::FairDbValRecordMap*)p);
   }
   static void deleteArray_FairDbValRecordMap(void *p) {
      delete [] ((::FairDbValRecordMap*)p);
   }
   static void destruct_FairDbValRecordMap(void *p) {
      typedef ::FairDbValRecordMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbValRecordMap

//______________________________________________________________________________
void FairDbValRecordFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbValRecordFactory.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbValRecordFactory::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbValRecordFactory::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbValRecordFactory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbValRecordFactory.
      TClass *R__cl = ::FairDbValRecordFactory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGap", &fGap);
      R__insp.InspectMember(fGap, "fGap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsExtendedContext", &fIsExtendedContext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVRecs", (void*)&fVRecs);
      R__insp.InspectMember("vector<FairDbValRecord>", (void*)&fVRecs, "fVRecs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAggNoToIndex", (void*)&fAggNoToIndex);
      R__insp.InspectMember("map<Int_t,UInt_t>", (void*)&fAggNoToIndex, "fAggNoToIndex.", false);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbValRecordFactory(void *p) {
      delete ((::FairDbValRecordFactory*)p);
   }
   static void deleteArray_FairDbValRecordFactory(void *p) {
      delete [] ((::FairDbValRecordFactory*)p);
   }
   static void destruct_FairDbValRecordFactory(void *p) {
      typedef ::FairDbValRecordFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbValRecordFactory

//______________________________________________________________________________
void FairDbException::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbException.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbException::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbException::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbException::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbException.
      TClass *R__cl = ::FairDbException::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMessage", (void*)&fMessage);
      R__insp.InspectMember("string", (void*)&fMessage, "fMessage.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorCode", &fErrorCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDbType", &fDbType);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbException(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbException : new ::FairDbException;
   }
   static void *newArray_FairDbException(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbException[nElements] : new ::FairDbException[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbException(void *p) {
      delete ((::FairDbException*)p);
   }
   static void deleteArray_FairDbException(void *p) {
      delete [] ((::FairDbException*)p);
   }
   static void destruct_FairDbException(void *p) {
      typedef ::FairDbException current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbException

//______________________________________________________________________________
void FairDbExceptionLog::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbExceptionLog.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbExceptionLog::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbExceptionLog::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbExceptionLog::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbExceptionLog.
      TClass *R__cl = ::FairDbExceptionLog::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntries", (void*)&fEntries);
      R__insp.InspectMember("vector<FairDbException>", (void*)&fEntries, "fEntries.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDbExceptionLog(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbExceptionLog : new ::FairDbExceptionLog;
   }
   static void *newArray_FairDbExceptionLog(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDbExceptionLog[nElements] : new ::FairDbExceptionLog[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDbExceptionLog(void *p) {
      delete ((::FairDbExceptionLog*)p);
   }
   static void deleteArray_FairDbExceptionLog(void *p) {
      delete [] ((::FairDbExceptionLog*)p);
   }
   static void destruct_FairDbExceptionLog(void *p) {
      typedef ::FairDbExceptionLog current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbExceptionLog

//______________________________________________________________________________
void FairDbConfigurable::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDbConfigurable.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDbConfigurable::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDbConfigurable::Class(),this);
   }
}

//______________________________________________________________________________
void FairDbConfigurable::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDbConfigurable.
      TClass *R__cl = ::FairDbConfigurable::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefConfig", &fDefConfig);
      R__insp.InspectMember(fDefConfig, "fDefConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConfig", &fConfig);
      R__insp.InspectMember(fConfig, "fConfig.");
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDbConfigurable(void *p) {
      delete ((::FairDbConfigurable*)p);
   }
   static void deleteArray_FairDbConfigurable(void *p) {
      delete [] ((::FairDbConfigurable*)p);
   }
   static void destruct_FairDbConfigurable(void *p) {
      typedef ::FairDbConfigurable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDbConfigurable

//______________________________________________________________________________
void FairRegistry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRegistry.
      TClass *R__cl = ::FairRegistry::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValuesLocked", &fValuesLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKeysLocked", &fKeysLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fErrorHandler", &fErrorHandler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirty", &fDirty);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistry(void *p) {
      return  p ? new(p) ::FairRegistry : new ::FairRegistry;
   }
   static void *newArray_FairRegistry(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistry[nElements] : new ::FairRegistry[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistry(void *p) {
      delete ((::FairRegistry*)p);
   }
   static void deleteArray_FairRegistry(void *p) {
      delete [] ((::FairRegistry*)p);
   }
   static void destruct_FairRegistry(void *p) {
      typedef ::FairRegistry current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistry(TBuffer &buf, void *obj) {
      ((::FairRegistry*)obj)->::FairRegistry::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistry

//______________________________________________________________________________
void FairRegistryElement::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRegistryElement.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, FairRegistryElement::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRegistryElement::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRegistryElement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRegistryElement.
      TClass *R__cl = ::FairRegistryElement::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairRegistryElement(void *p) {
      delete ((::FairRegistryElement*)p);
   }
   static void deleteArray_FairRegistryElement(void *p) {
      delete [] ((::FairRegistryElement*)p);
   }
   static void destruct_FairRegistryElement(void *p) {
      typedef ::FairRegistryElement current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElement(TBuffer &buf, void *obj) {
      ((::FairRegistryElement*)obj)->::FairRegistryElement::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElement

//______________________________________________________________________________
namespace ROOTDict {
   void FairRegistryElementGenericlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairRegistryElementGeneric<int>.
      typedef ::ROOTShadow::Shadow::FairRegistryElementGenericlEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &sobj->fData);
      sobj->FairRegistryElement::ShowMembers(R__insp);
   }

}

template <> void FairRegistryElementGeneric<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairRegistryElementGenericlEintgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistryElementGenericlEintgR(void *p) {
      return  p ? new(p) ::FairRegistryElementGeneric<int> : new ::FairRegistryElementGeneric<int>;
   }
   static void *newArray_FairRegistryElementGenericlEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistryElementGeneric<int>[nElements] : new ::FairRegistryElementGeneric<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistryElementGenericlEintgR(void *p) {
      delete ((::FairRegistryElementGeneric<int>*)p);
   }
   static void deleteArray_FairRegistryElementGenericlEintgR(void *p) {
      delete [] ((::FairRegistryElementGeneric<int>*)p);
   }
   static void destruct_FairRegistryElementGenericlEintgR(void *p) {
      typedef ::FairRegistryElementGeneric<int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElementGenericlEintgR(TBuffer &buf, void *obj) {
      ((::FairRegistryElementGeneric<int>*)obj)->::FairRegistryElementGeneric<int>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElementGeneric<int>

//______________________________________________________________________________
namespace ROOTDict {
   void FairRegistryElementGenericlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairRegistryElementGeneric<double>.
      typedef ::ROOTShadow::Shadow::FairRegistryElementGenericlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &sobj->fData);
      sobj->FairRegistryElement::ShowMembers(R__insp);
   }

}

template <> void FairRegistryElementGeneric<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairRegistryElementGenericlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistryElementGenericlEdoublegR(void *p) {
      return  p ? new(p) ::FairRegistryElementGeneric<double> : new ::FairRegistryElementGeneric<double>;
   }
   static void *newArray_FairRegistryElementGenericlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistryElementGeneric<double>[nElements] : new ::FairRegistryElementGeneric<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistryElementGenericlEdoublegR(void *p) {
      delete ((::FairRegistryElementGeneric<double>*)p);
   }
   static void deleteArray_FairRegistryElementGenericlEdoublegR(void *p) {
      delete [] ((::FairRegistryElementGeneric<double>*)p);
   }
   static void destruct_FairRegistryElementGenericlEdoublegR(void *p) {
      typedef ::FairRegistryElementGeneric<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElementGenericlEdoublegR(TBuffer &buf, void *obj) {
      ((::FairRegistryElementGeneric<double>*)obj)->::FairRegistryElementGeneric<double>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElementGeneric<double>

//______________________________________________________________________________
namespace ROOTDict {
   void FairRegistryElementGenericlEFairRegistrygR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairRegistryElementGeneric<FairRegistry>.
      typedef ::ROOTShadow::Shadow::FairRegistryElementGenericlEFairRegistrygR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<FairRegistry>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &sobj->fData);
      sobj->FairRegistryElement::ShowMembers(R__insp);
   }

}

template <> void FairRegistryElementGeneric<FairRegistry>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairRegistryElementGenericlEFairRegistrygR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistryElementGenericlEFairRegistrygR(void *p) {
      return  p ? new(p) ::FairRegistryElementGeneric<FairRegistry> : new ::FairRegistryElementGeneric<FairRegistry>;
   }
   static void *newArray_FairRegistryElementGenericlEFairRegistrygR(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistryElementGeneric<FairRegistry>[nElements] : new ::FairRegistryElementGeneric<FairRegistry>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistryElementGenericlEFairRegistrygR(void *p) {
      delete ((::FairRegistryElementGeneric<FairRegistry>*)p);
   }
   static void deleteArray_FairRegistryElementGenericlEFairRegistrygR(void *p) {
      delete [] ((::FairRegistryElementGeneric<FairRegistry>*)p);
   }
   static void destruct_FairRegistryElementGenericlEFairRegistrygR(void *p) {
      typedef ::FairRegistryElementGeneric<FairRegistry> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElementGenericlEFairRegistrygR(TBuffer &buf, void *obj) {
      ((::FairRegistryElementGeneric<FairRegistry>*)obj)->::FairRegistryElementGeneric<FairRegistry>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElementGeneric<FairRegistry>

//______________________________________________________________________________
namespace ROOTDict {
   void FairRegistryElementGenericlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairRegistryElementGeneric<char>.
      typedef ::ROOTShadow::Shadow::FairRegistryElementGenericlEchargR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<char>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &sobj->fData);
      sobj->FairRegistryElement::ShowMembers(R__insp);
   }

}

template <> void FairRegistryElementGeneric<char>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairRegistryElementGenericlEchargR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistryElementGenericlEchargR(void *p) {
      return  p ? new(p) ::FairRegistryElementGeneric<char> : new ::FairRegistryElementGeneric<char>;
   }
   static void *newArray_FairRegistryElementGenericlEchargR(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistryElementGeneric<char>[nElements] : new ::FairRegistryElementGeneric<char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistryElementGenericlEchargR(void *p) {
      delete ((::FairRegistryElementGeneric<char>*)p);
   }
   static void deleteArray_FairRegistryElementGenericlEchargR(void *p) {
      delete [] ((::FairRegistryElementGeneric<char>*)p);
   }
   static void destruct_FairRegistryElementGenericlEchargR(void *p) {
      typedef ::FairRegistryElementGeneric<char> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElementGenericlEchargR(TBuffer &buf, void *obj) {
      ((::FairRegistryElementGeneric<char>*)obj)->::FairRegistryElementGeneric<char>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElementGeneric<char>

//______________________________________________________________________________
namespace ROOTDict {
   void FairRegistryElementGenericlEconstsPcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class FairRegistryElementGeneric<const char*>.
      typedef ::ROOTShadow::Shadow::FairRegistryElementGenericlEconstsPcharmUgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRegistryElementGeneric<const char*>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &sobj->fData);
      sobj->FairRegistryElement::ShowMembers(R__insp);
   }

}

template <> void FairRegistryElementGeneric<const char*>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::FairRegistryElementGenericlEconstsPcharmUgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRegistryElementGenericlEconstsPcharmUgR(void *p) {
      return  p ? new(p) ::FairRegistryElementGeneric<const char*> : new ::FairRegistryElementGeneric<const char*>;
   }
   static void *newArray_FairRegistryElementGenericlEconstsPcharmUgR(Long_t nElements, void *p) {
      return p ? new(p) ::FairRegistryElementGeneric<const char*>[nElements] : new ::FairRegistryElementGeneric<const char*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRegistryElementGenericlEconstsPcharmUgR(void *p) {
      delete ((::FairRegistryElementGeneric<const char*>*)p);
   }
   static void deleteArray_FairRegistryElementGenericlEconstsPcharmUgR(void *p) {
      delete [] ((::FairRegistryElementGeneric<const char*>*)p);
   }
   static void destruct_FairRegistryElementGenericlEconstsPcharmUgR(void *p) {
      typedef ::FairRegistryElementGeneric<const char*> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRegistryElementGenericlEconstsPcharmUgR(TBuffer &buf, void *obj) {
      ((::FairRegistryElementGeneric<const char*>*)obj)->::FairRegistryElementGeneric<const char*>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRegistryElementGeneric<const char*>

//______________________________________________________________________________
void FairTSQLObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTSQLObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTSQLObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTSQLObject::Class(),this);
   }
}

//______________________________________________________________________________
void FairTSQLObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTSQLObject.
      TClass *R__cl = ::FairTSQLObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurCls", &fCurCls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcurDict", &fcurDict);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMemberList", &fMemberList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMethodList", &fMethodList);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairTSQLObject(void *p) {
      return  p ? new(p) ::FairTSQLObject : new ::FairTSQLObject;
   }
   static void *newArray_FairTSQLObject(Long_t nElements, void *p) {
      return p ? new(p) ::FairTSQLObject[nElements] : new ::FairTSQLObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTSQLObject(void *p) {
      delete ((::FairTSQLObject*)p);
   }
   static void deleteArray_FairTSQLObject(void *p) {
      delete [] ((::FairTSQLObject*)p);
   }
   static void destruct_FairTSQLObject(void *p) {
      typedef ::FairTSQLObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairTSQLObject

//______________________________________________________________________________
void FairDBObjectMemberValue::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDBObjectMemberValue.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDBObjectMemberValue::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDBObjectMemberValue::Class(),this);
   }
}

//______________________________________________________________________________
void FairDBObjectMemberValue::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDBObjectMemberValue.
      TClass *R__cl = ::FairDBObjectMemberValue::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c_val", &c_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ui_Val", &Ui_Val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "i_val", &i_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f_val", &f_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_val", &d_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*I_Ar_val", &I_Ar_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*F_Ar_val", &F_Ar_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*D_Ar_val", &D_Ar_val);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairDBObjectMemberValue(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDBObjectMemberValue : new ::FairDBObjectMemberValue;
   }
   static void *newArray_FairDBObjectMemberValue(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairDBObjectMemberValue[nElements] : new ::FairDBObjectMemberValue[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairDBObjectMemberValue(void *p) {
      delete ((::FairDBObjectMemberValue*)p);
   }
   static void deleteArray_FairDBObjectMemberValue(void *p) {
      delete [] ((::FairDBObjectMemberValue*)p);
   }
   static void destruct_FairDBObjectMemberValue(void *p) {
      typedef ::FairDBObjectMemberValue current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDBObjectMemberValue

namespace ROOTDict {
   void listlEFairDbResultKeycLcLVRecKeygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void listlEFairDbResultKeycLcLVRecKeygR_Dictionary();
   static void *new_listlEFairDbResultKeycLcLVRecKeygR(void *p = 0);
   static void *newArray_listlEFairDbResultKeycLcLVRecKeygR(Long_t size, void *p);
   static void delete_listlEFairDbResultKeycLcLVRecKeygR(void *p);
   static void deleteArray_listlEFairDbResultKeycLcLVRecKeygR(void *p);
   static void destruct_listlEFairDbResultKeycLcLVRecKeygR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const list<FairDbResultKey::VRecKey>*)
   {
      list<FairDbResultKey::VRecKey> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(list<FairDbResultKey::VRecKey>),0);
      static ::ROOT::TGenericClassInfo 
         instance("list<FairDbResultKey::VRecKey>", -2, "prec_stl/list", 44,
                  typeid(list<FairDbResultKey::VRecKey>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &listlEFairDbResultKeycLcLVRecKeygR_Dictionary, isa_proxy, 0,
                  sizeof(list<FairDbResultKey::VRecKey>) );
      instance.SetNew(&new_listlEFairDbResultKeycLcLVRecKeygR);
      instance.SetNewArray(&newArray_listlEFairDbResultKeycLcLVRecKeygR);
      instance.SetDelete(&delete_listlEFairDbResultKeycLcLVRecKeygR);
      instance.SetDeleteArray(&deleteArray_listlEFairDbResultKeycLcLVRecKeygR);
      instance.SetDestructor(&destruct_listlEFairDbResultKeycLcLVRecKeygR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< list<FairDbResultKey::VRecKey> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const list<FairDbResultKey::VRecKey>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void listlEFairDbResultKeycLcLVRecKeygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const list<FairDbResultKey::VRecKey>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_listlEFairDbResultKeycLcLVRecKeygR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) list<FairDbResultKey::VRecKey> : new list<FairDbResultKey::VRecKey>;
   }
   static void *newArray_listlEFairDbResultKeycLcLVRecKeygR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) list<FairDbResultKey::VRecKey>[nElements] : new list<FairDbResultKey::VRecKey>[nElements];
   }
   // Wrapper around operator delete
   static void delete_listlEFairDbResultKeycLcLVRecKeygR(void *p) {
      delete ((list<FairDbResultKey::VRecKey>*)p);
   }
   static void deleteArray_listlEFairDbResultKeycLcLVRecKeygR(void *p) {
      delete [] ((list<FairDbResultKey::VRecKey>*)p);
   }
   static void destruct_listlEFairDbResultKeycLcLVRecKeygR(void *p) {
      typedef list<FairDbResultKey::VRecKey> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class list<FairDbResultKey::VRecKey>

/********************************************************
* /Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/build/dbase/G__FairDBDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__FairDBDict();

extern "C" void G__set_cpp_environmentG__FairDBDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("dbValidation/Experiment.h");
  G__add_compiledheader("dbValidation/FairDbDetector.h");
  G__add_compiledheader("dbValidation/DataType.h");
  G__add_compiledheader("dbValidation/ValCondition.h");
  G__add_compiledheader("dbValidation/ValInterval.h");
  G__add_compiledheader("dbValidation/ValTimeStamp.h");
  G__add_compiledheader("dbInterface/FairDb.h");
  G__add_compiledheader("dbInterface/FairDbConnection.h");
  G__add_compiledheader("dbInterface/FairDbBufferFile.h");
  G__add_compiledheader("dbInterface/FairDbCache.h");
  G__add_compiledheader("dbInterface/FairDbConfig.h");
  G__add_compiledheader("dbInterface/FairDbConfigNotice.h");
  G__add_compiledheader("dbInterface/FairDbConfigurable.h");
  G__add_compiledheader("dbInterface/FairDbConfigData.h");
  G__add_compiledheader("dbInterface/FairDbFieldType.h");
  G__add_compiledheader("dbInterface/FairDbTableMetaData.h");
  G__add_compiledheader("dbInterface/FairDbConnectionPool.h");
  G__add_compiledheader("dbInterface/FairDbOutTableBuffer.h");
  G__add_compiledheader("dbInterface/FairDbProxy.h");
  G__add_compiledheader("dbInterface/FairDbResult.h");
  G__add_compiledheader("dbInterface/FairDbRollbackTimes.h");
  G__add_compiledheader("dbInterface/FairDbTableBuffer.h");
  G__add_compiledheader("dbInterface/FairDbStatement.h");
  G__add_compiledheader("dbInterface/FairDbString.h");
  G__add_compiledheader("dbInterface/FairDbTableInterface.h");
  G__add_compiledheader("dbInterface/FairDbTableInterfaceStore.h");
  G__add_compiledheader("dbInterface/FairDbObjTableMap.h");
  G__add_compiledheader("dbInterface/FairDbStopWatch.h");
  G__add_compiledheader("dbInterface/FairDbStopWatchManager.h");
  G__add_compiledheader("dbInterface/FairDbValRecord.h");
  G__add_compiledheader("dbInterface/FairDbValRecordFactory.h");
  G__add_compiledheader("dbInterface/FairRegistry.h");
  G__add_compiledheader("dbInterface/FairRegistryElement.h");
  G__add_compiledheader("dbInterface/FairRegistryElementGeneric.h");
  G__add_compiledheader("dbInterface/FairUtilStream.h");
  G__add_compiledheader("dbInterface/FairDbLogEntry.h");
  G__add_compiledheader("dbInterface/FairDbConfigBuffer.h");
  G__add_compiledheader("dbInterface/FairDbConnectionManager.h");
  G__add_compiledheader("dbInterface/FairDbExtSqlContent.h");
  G__add_compiledheader("dbInterface/FairDbSqlValidityData.h");
  G__add_compiledheader("dbInterface/FairDbException.h");
  G__add_compiledheader("dbInterface/FairDbExceptionLog.h");
  G__add_compiledheader("dbInterface/FairDbUtils.h");
  G__add_compiledheader("dbInterface/FairDbValRecordMap.h");
  G__add_compiledheader("dbInterface/FairDbDataTypeUnion.h");
  G__add_compiledheader("dbInterface/FairDbStreamer.h");
  G__add_compiledheader("dbUtils/FairTSQLObject.h");
  G__add_compiledheader("dbUtils/FairDbLog.h");
  G__add_compiledheader("dbUtils/FairDbLogFormat.h");
  G__add_compiledheader("dbUtils/FairDbLogOSStream.h");
  G__add_compiledheader("dbUtils/FairDbLogService.h");
  G__add_compiledheader("dbUtils/FairDbLogStat.h");
  G__add_compiledheader("dbUtils/FairDbLogStream.h");
  G__add_compiledheader("/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbReader.h");
  G__add_compiledheader("/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/dbase/dbInterface/FairDbWriter.h");
  G__cpp_reset_tagtableG__FairDBDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__FairDBDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Experiment */
static int G__G__FairDBDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Experiment::FullMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Experiment::AsString((Experiment::Experiment_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Experiment::CharToEnum((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Experiment::MaskToString((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) Experiment::StringToEnum((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) Experiment::StringToEnum((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) Experiment::StringToMask((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) Experiment::StringToMask((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbDetector */
static int G__G__FairDBDict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbDetector::FullMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbDetector::AsString((FairDbDetector::Detector_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbDetector::CharToEnum((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbDetector::MaskToString((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) FairDbDetector::StringToMask((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) FairDbDetector::StringToMask((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) FairDbDetector::StringToEnum((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) FairDbDetector::StringToEnum((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbDetector::GetDetType((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__FairDBDict_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbDetector *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbDetector[n];
     } else {
       p = new((void*) gvp) FairDbDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbDetector;
     } else {
       p = new((void*) gvp) FairDbDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbDetector(*(FairDbDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbDetector G__TFairDbDetector;
static int G__G__FairDBDict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbDetector*) (soff+(sizeof(FairDbDetector)*i)))->~G__TFairDbDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbDetector*) (soff))->~G__TFairDbDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbDetector* dest = (FairDbDetector*) G__getstructoffset();
   *dest = *(FairDbDetector*) libp->para[0].ref;
   const FairDbDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DataType */
static int G__G__FairDBDict_187_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DataType::FullMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DataType::AsString((DataType::DataType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DataType::MaskToString((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) DataType::StringToEnum((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) DataType::StringToEnum((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) DataType::StringToMask((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) DataType::StringToMask((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DataType::Compact((DataType::DataType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_187_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DataType::Expand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* ValTimeStamp */
static int G__G__FairDBDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = ValTimeStamp::GetBOT();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = ValTimeStamp::GetEOT();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = ValTimeStamp::GetNBOT();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp[n];
     } else {
       p = new((void*) gvp) ValTimeStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp;
     } else {
       p = new((void*) gvp) ValTimeStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValTimeStamp(*(ValTimeStamp*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ValTimeStamp(*(ValTimeStamp*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp& obj = ((ValTimeStamp*) G__getstructoffset())->operator=(*(ValTimeStamp*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValTimeStamp(*(timespec_t*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ValTimeStamp(*(timespec_t*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValTimeStamp(*(time_t*) G__Longref(&libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ValTimeStamp(*(time_t*) G__Longref(&libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) ValTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValTimeStamp((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) ValTimeStamp((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ValTimeStamp*) G__getstructoffset())->operator double());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const timespec_t* pobj;
         const timespec_t xobj = ((const ValTimeStamp*) G__getstructoffset())->GetTimeSpec();
         pobj = new timespec_t(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const ValTimeStamp*) G__getstructoffset())->GetSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetNanoSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ValTimeStamp*) G__getstructoffset())->GetSeconds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const ValTimeStamp*) G__getstructoffset())->AsString((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const ValTimeStamp*) G__getstructoffset())->AsString());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const ValTimeStamp*) G__getstructoffset())->Format((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const ValTimeStamp*) G__getstructoffset())->Format());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ValTimeStamp*) G__getstructoffset())->Copy(*(ValTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (UInt_t*) G__int(libp->para[3])
, (UInt_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (UInt_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetDate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (UInt_t*) G__int(libp->para[3])
, (UInt_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (UInt_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const ValTimeStamp*) G__getstructoffset())->GetTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValTimeStamp*) G__getstructoffset())->Add(*(ValTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValTimeStamp*) G__getstructoffset())->Add((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const ValTimeStamp*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const ValTimeStamp*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValTimeStamp::GetZoneOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ValTimeStamp::MktimeFromUTC((tm_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ValTimeStamp::IsLeapYear((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ValTimeStamp::DumpTMStruct(*(tm_t*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ValTimeStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValTimeStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ValTimeStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ValTimeStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ValTimeStamp*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValTimeStamp*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValTimeStamp*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValTimeStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValTimeStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValTimeStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValTimeStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_191_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValTimeStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ValTimeStamp G__TValTimeStamp;
static int G__G__FairDBDict_191_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ValTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ValTimeStamp*) (soff+(sizeof(ValTimeStamp)*i)))->~G__TValTimeStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ValTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ValTimeStamp*) (soff))->~G__TValTimeStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ValCondition */
static int G__G__FairDBDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValCondition* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValCondition[n];
     } else {
       p = new((void*) gvp) ValCondition[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValCondition;
     } else {
       p = new((void*) gvp) ValCondition;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValCondition* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValCondition(
*(FairDbDetector::Detector_t*) libp->para[0].ref, (const DataType::DataType_t) G__int(libp->para[1])
, *(ValTimeStamp*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) ValCondition(
*(FairDbDetector::Detector_t*) libp->para[0].ref, (const DataType::DataType_t) G__int(libp->para[1])
, *(ValTimeStamp*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const ValCondition*) G__getstructoffset())->AsString((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const ValCondition*) G__getstructoffset())->AsString());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValCondition*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValCondition*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const ValCondition*) G__getstructoffset())->GetTimeStamp();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ValCondition*) G__getstructoffset())->IsNull());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ValCondition*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ValCondition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValCondition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ValCondition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ValCondition::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValCondition*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValCondition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValCondition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValCondition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValCondition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ValCondition* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ValCondition(*(ValCondition*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ValCondition G__TValCondition;
static int G__G__FairDBDict_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ValCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ValCondition*) (soff+(sizeof(ValCondition)*i)))->~G__TValCondition();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ValCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ValCondition*) (soff))->~G__TValCondition();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValCondition* dest = (ValCondition*) G__getstructoffset();
   *dest = *(ValCondition*) libp->para[0].ref;
   const ValCondition& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ValInterval */
static int G__G__FairDBDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValInterval* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValInterval[n];
     } else {
       p = new((void*) gvp) ValInterval[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ValInterval;
     } else {
       p = new((void*) gvp) ValInterval;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValInterval* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ValInterval(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, *(ValTimeStamp*) libp->para[2].ref, *(ValTimeStamp*) libp->para[3].ref
, *(TString*) libp->para[4].ref);
   } else {
     p = new((void*) gvp) ValInterval(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, *(ValTimeStamp*) libp->para[2].ref, *(ValTimeStamp*) libp->para[3].ref
, *(TString*) libp->para[4].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const ValInterval*) G__getstructoffset())->AsString((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const ValInterval*) G__getstructoffset())->AsString());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ValInterval*) G__getstructoffset())->IsCompatible(*(ValCondition*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ValInterval*) G__getstructoffset())->IsCompatible((ValCondition*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValInterval*) G__getstructoffset())->GetDetectorMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValInterval*) G__getstructoffset())->GetSimMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const ValInterval*) G__getstructoffset())->GetTimeStart();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const ValInterval*) G__getstructoffset())->GetTimeEnd();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const ValInterval*) G__getstructoffset())->GetDataSource();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValInterval*) G__getstructoffset())->GetDetectorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ValInterval*) G__getstructoffset())->GetDataId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValInterval*) G__getstructoffset())->TrimTo(*(ValInterval*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValInterval*) G__getstructoffset())->SetTimeStart(*(ValTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValInterval*) G__getstructoffset())->SetTimeEnd(*(ValTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ValInterval::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValInterval::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ValInterval::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ValInterval::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ValInterval*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValInterval::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValInterval::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ValInterval::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ValInterval::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ValInterval* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ValInterval(*(ValInterval*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ValInterval G__TValInterval;
static int G__G__FairDBDict_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ValInterval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ValInterval*) (soff+(sizeof(ValInterval)*i)))->~G__TValInterval();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ValInterval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ValInterval*) (soff))->~G__TValInterval();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_193_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ValInterval* dest = (ValInterval*) G__getstructoffset();
   *dest = *(ValInterval*) libp->para[0].ref;
   const ValInterval& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDb */
static int G__G__FairDBDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDb::GetTimeWindow(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDb::SetTimeWindow(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         TString* pobj;
         TString xobj = FairDb::GetValDefinition((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TString* pobj;
         TString xobj = FairDb::GetValDefinition((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) FairDb::NotGlobalSeqNo((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::MakeDateTimeString(*(ValTimeStamp*) libp->para[0].ref);
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = FairDb::MakeTimeStamp(*(string*) libp->para[0].ref, (Bool_t*) G__int(libp->para[1]));
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = FairDb::MakeTimeStamp(*(string*) libp->para[0].ref);
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((const UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((const Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((const UShort_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((const Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = FairDb::StreamAsString((TObject*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDb::SetLogLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbException */
static int G__G__FairDBDict_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbException* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbException(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbException((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbException((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbException[n];
       } else {
         p = new((void*) gvp) FairDbException[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbException;
       } else {
         p = new((void*) gvp) FairDbException;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbException* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException(*(TSQLServer*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbException(*(TSQLServer*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException(*(TSQLServer*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbException(*(TSQLServer*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbException* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException(*(TSQLStatement*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbException(*(TSQLStatement*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbException(*(TSQLStatement*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbException(*(TSQLStatement*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbException* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbException(*(FairDbException*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbException(*(FairDbException*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbException*) G__getstructoffset())->GetMessage();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbException*) G__getstructoffset())->GetErrorCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbException*) G__getstructoffset())->GetDbType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbException::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbException::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbException::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbException::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbException*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbException*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbException*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbException*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbException::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbException::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbException::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbException::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbException G__TFairDbException;
static int G__G__FairDBDict_201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbException*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbException*) (soff+(sizeof(FairDbException)*i)))->~G__TFairDbException();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbException*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbException*) (soff))->~G__TFairDbException();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbException* dest = (FairDbException*) G__getstructoffset();
   *dest = *(FairDbException*) libp->para[0].ref;
   const FairDbException& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbExceptionLog */
static int G__G__FairDBDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbExceptionLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbExceptionLog((FairDbException*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbExceptionLog((FairDbException*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbExceptionLog[n];
       } else {
         p = new((void*) gvp) FairDbExceptionLog[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbExceptionLog;
       } else {
         p = new((void*) gvp) FairDbExceptionLog;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbExceptionLog*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<FairDbException>& obj = ((const FairDbExceptionLog*) G__getstructoffset())->GetEntries();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbExceptionLog*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbExceptionLog*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const FairDbExceptionLog*) G__getstructoffset())->Copy(*(FairDbExceptionLog*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const FairDbExceptionLog*) G__getstructoffset())->Copy(*(FairDbExceptionLog*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->AddLog(*(FairDbExceptionLog*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(FairDbException*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(string*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(TSQLServer*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(TSQLServer*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(TSQLStatement*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbExceptionLog*) G__getstructoffset())->AddEntry(*(TSQLStatement*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbExceptionLog& obj = FairDbExceptionLog::GetGELog();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbExceptionLog& obj = FairDbExceptionLog::GetGlobalErrorLog();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbExceptionLog::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExceptionLog::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbExceptionLog::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbExceptionLog::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbExceptionLog*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExceptionLog*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExceptionLog::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbExceptionLog::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExceptionLog::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbExceptionLog::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbExceptionLog* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbExceptionLog(*(FairDbExceptionLog*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbExceptionLog G__TFairDbExceptionLog;
static int G__G__FairDBDict_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbExceptionLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbExceptionLog*) (soff+(sizeof(FairDbExceptionLog)*i)))->~G__TFairDbExceptionLog();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbExceptionLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbExceptionLog*) (soff))->~G__TFairDbExceptionLog();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbExceptionLog* dest = (FairDbExceptionLog*) G__getstructoffset();
   *dest = *(FairDbExceptionLog*) libp->para[0].ref;
   const FairDbExceptionLog& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConnection */
static int G__G__FairDBDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConnection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnection(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) FairDbConnection(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnection(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbConnection(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnection(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbConnection(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbConnection[n];
       } else {
         p = new((void*) gvp) FairDbConnection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbConnection;
       } else {
         p = new((void*) gvp) FairDbConnection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbConnection*) G__getstructoffset())->GetDbType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbConnection*) G__getstructoffset())->GetDbName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbConnection*) G__getstructoffset())->GetPassword();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbConnection*) G__getstructoffset())->GetUrl();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbConnection*) G__getstructoffset())->GetUser();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDbConnection*) G__getstructoffset())->Close((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbConnection*) G__getstructoffset())->Close());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbConnection*) G__getstructoffset())->Open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbConnection*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbConnection*) G__getstructoffset())->CreatePreparedStatement(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbConnection*) G__getstructoffset())->IsTemporary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbConnection*) G__getstructoffset())->TableExists(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairDbConnection*) G__getstructoffset())->SetTableExists(*(string*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((FairDbConnection*) G__getstructoffset())->SetTableExists();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->Connect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->DisConnect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->ConnectStatement();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->DisConnectStatement();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairDbConnection*) G__getstructoffset())->SetPermanent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairDbConnection*) G__getstructoffset())->SetPermanent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbConnection*) G__getstructoffset())->IsClosed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbExceptionLog& obj = ((const FairDbConnection*) G__getstructoffset())->GetExceptionLog();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->ClearExceptionLog();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbConnection*) G__getstructoffset())->PrintExceptionLog((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbConnection*) G__getstructoffset())->PrintExceptionLog());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->RecordException();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->RefreshExistingTables();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConnection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConnection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConnection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConnection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_224_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConnection G__TFairDbConnection;
static int G__G__FairDBDict_224_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConnection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConnection*) (soff+(sizeof(FairDbConnection)*i)))->~G__TFairDbConnection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConnection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConnection*) (soff))->~G__TFairDbConnection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbObjTableMap */
static int G__G__FairDBDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbObjTableMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbObjTableMap[n];
     } else {
       p = new((void*) gvp) FairDbObjTableMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbObjTableMap;
     } else {
       p = new((void*) gvp) FairDbObjTableMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbObjTableMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbObjTableMap(*(FairDbObjTableMap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbObjTableMap(*(FairDbObjTableMap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbObjTableMap& obj = ((FairDbObjTableMap*) G__getstructoffset())->operator=(*(FairDbObjTableMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbObjTableMap*) G__getstructoffset())->CanCache());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->SetOwner((FairDbResult*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetOwner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbObjTableMap*) G__getstructoffset())->CreateObjTableMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->Fill(*(FairDbResultPool*) libp->para[0].ref, (FairDbValRecord*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbObjTableMap*) G__getstructoffset())->Store(*(FairDbOutTableBuffer*) libp->para[0].ref, (FairDbValRecord*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetAggregateNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetComboNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->SetComboNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->SetVersion((FairDb::Version) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetDbEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->SetDbEntry((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbObjTableMap*) G__getstructoffset())->GetLogTitle();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->SetLogTitle(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValCondition* pobj;
         ValCondition xobj = ((FairDbObjTableMap*) G__getstructoffset())->GetContext((UInt_t) G__int(libp->para[0]));
         pobj = new ValCondition(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         string* pobj;
         string xobj = ((FairDbObjTableMap*) G__getstructoffset())->GetTableDefinition((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         string* pobj;
         string xobj = ((FairDbObjTableMap*) G__getstructoffset())->GetTableDefinition();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbObjTableMap*) G__getstructoffset())->GetSeqNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValInterval* pobj;
         ValInterval xobj = ((FairDbObjTableMap*) G__getstructoffset())->GetValInterval((UInt_t) G__int(libp->para[0]));
         pobj = new ValInterval(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbObjTableMap*) G__getstructoffset())->GetTimeStart();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbObjTableMap*) G__getstructoffset())->GetTimeEnd();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbObjTableMap*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->Serialize(*(TString*) libp->para[0].ref, *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->Deserialize(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbObjTableMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbObjTableMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbObjTableMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbObjTableMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbObjTableMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbObjTableMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbObjTableMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbObjTableMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_225_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbObjTableMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbObjTableMap G__TFairDbObjTableMap;
static int G__G__FairDBDict_225_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbObjTableMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbObjTableMap*) (soff+(sizeof(FairDbObjTableMap)*i)))->~G__TFairDbObjTableMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbObjTableMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbObjTableMap*) (soff))->~G__TFairDbObjTableMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResult */
static int G__G__FairDBDict_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResult*) G__getstructoffset())->CanReuse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResult*) G__getstructoffset())->CanSave());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbResult*) G__getstructoffset())->Connect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResult*) G__getstructoffset())->CreateKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbResult*) G__getstructoffset())->Disconnect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbResult*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResult*) G__getstructoffset())->GetKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResult*) G__getstructoffset())->GetNumAggregates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResult*) G__getstructoffset())->GetNumClients());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResult*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbResult*) G__getstructoffset())->GetSqlQualifiers();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResult*) G__getstructoffset())->GetObjTableMap((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResult*) G__getstructoffset())->GetObjTableMapByIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const FairDbValRecord& obj = ((const FairDbResult*) G__getstructoffset())->GetValidityRec((FairDbObjTableMap*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const FairDbValRecord& obj = ((const FairDbResult*) G__getstructoffset())->GetValidityRec();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((const FairDbResult*) G__getstructoffset())->GetValidityRecGlobal();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResult*) G__getstructoffset())->IsExtendedContext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResult*) G__getstructoffset())->Owns((FairDbObjTableMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResult*) G__getstructoffset())->ResultsFromDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbResult*) G__getstructoffset())->TableName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->CanDelete((FairDbResult*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->CanDelete());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->Satisfies(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->Satisfies(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->Satisfies(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbResult*) G__getstructoffset())->Satisfies(*(FairDbValRecord*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->DeRegisterKey();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->RegisterKey();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->Streamer(*(FairDbBufferFile*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->SetCanReuse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbExceptionLog& obj = ((const FairDbResult*) G__getstructoffset())->GetErrorLog();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->CaptureExceptionLog((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResult::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResult::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbResult::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbResult::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResult*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResult*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResult::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResult::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResult::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_489_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResult::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResult G__TFairDbResult;
static int G__G__FairDBDict_489_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResult*) (soff+(sizeof(FairDbResult)*i)))->~G__TFairDbResult();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResult*) (soff))->~G__TFairDbResult();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbTableInterface */
static int G__G__FairDBDict_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbProxy& obj = ((const FairDbTableInterface*) G__getstructoffset())->GetDBProxy();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbConnectionPool& obj = ((FairDbTableInterface*) G__getstructoffset())->GetConnectionPool();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableMetaData& obj = ((const FairDbTableInterface*) G__getstructoffset())->GetMetaData();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableMetaData& obj = ((const FairDbTableInterface*) G__getstructoffset())->GetMetaValid();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableInterface*) G__getstructoffset())->GetRowName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableInterface*) G__getstructoffset())->GetTableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->GetCache());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query(*(string*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query(*(FairDbValRecord*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((FairDbTableInterface*) G__getstructoffset())->Query(*(FairDbValRecord*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = ((FairDbTableInterface*) G__getstructoffset())->QueryOverlayCreationDate(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterface*) G__getstructoffset())->RefreshMetaData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterface*) G__getstructoffset())->SetSqlCondition(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableInterface*) G__getstructoffset())->TableExists());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbTableInterface::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterface::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbTableInterface::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbTableInterface::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbTableInterface*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterface*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterface*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterface*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterface::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableInterface::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterface::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_490_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableInterface::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbValRecord */
static int G__G__FairDBDict_491_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecord* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbValRecord((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbValRecord((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbValRecord[n];
       } else {
         p = new((void*) gvp) FairDbValRecord[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbValRecord;
       } else {
         p = new((void*) gvp) FairDbValRecord;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecord* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbValRecord(*(FairDbValRecord*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbValRecord(*(FairDbValRecord*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecord* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, *((ValTimeStamp*) G__int(libp->para[6])));
     } else {
       p = new((void*) gvp) FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, *((ValTimeStamp*) G__int(libp->para[6])));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbValRecord(
*(ValInterval*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((FairDbValRecord*) G__getstructoffset())->operator=(*(FairDbValRecord*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbValRecord*) G__getstructoffset())->GetCreationDate();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbValRecord*) G__getstructoffset())->GetDbNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbValRecord*) G__getstructoffset())->GetInsertDate();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbValRecord*) G__getstructoffset())->GetCacheName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbValRecord*) G__getstructoffset())->GetSeqNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbValRecord*) G__getstructoffset())->GetTableInterface());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValInterval& obj = ((const FairDbValRecord*) G__getstructoffset())->GetValInterval();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecord*) G__getstructoffset())->HasExpired(*(FairDbValRecord*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecord*) G__getstructoffset())->HasExpired(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecord*) G__getstructoffset())->IsCompatible(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecord*) G__getstructoffset())->IsGap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = FairDbValRecord::GetCacheName((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, *((ValTimeStamp*) G__int(libp->para[2])));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->AndTimeWindow(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->SetAggregateNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->SetDbNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->SetTableInterface((FairDbTableInterface*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->SetTimeWindow(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->SetValInterval(*(ValInterval*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->Trim(*(ValTimeStamp*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->Streamer(*(FairDbBufferFile*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbValRecord::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecord::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbValRecord::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbValRecord::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecord*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecord::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecord::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecord::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_491_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecord::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbValRecord G__TFairDbValRecord;
static int G__G__FairDBDict_491_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbValRecord*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbValRecord*) (soff+(sizeof(FairDbValRecord)*i)))->~G__TFairDbValRecord();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbValRecord*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbValRecord*) (soff))->~G__TFairDbValRecord();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbCache */
static int G__G__FairDBDict_493_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbCache* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbCache(*(FairDbTableInterface*) libp->para[0].ref, *(string*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) FairDbCache(*(FairDbTableInterface*) libp->para[0].ref, *(string*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbCache*) G__getstructoffset())->GetMaxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbCache*) G__getstructoffset())->GetCurSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbCache*) G__getstructoffset())->GetNumAccepted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbCache*) G__getstructoffset())->GetNumReused());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbCache*) G__getstructoffset())->Search(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbCache*) G__getstructoffset())->Search(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const FairDbCache*) G__getstructoffset())->Search(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const FairDbCache*) G__getstructoffset())->Search(*(FairDbValRecord*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbLogStream& obj = ((const FairDbCache*) G__getstructoffset())->ShowStatistics(*(FairDbLogStream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbCache*) G__getstructoffset())->Accept((FairDbResult*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbCache*) G__getstructoffset())->Accept((FairDbResult*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->Purge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->SetStale();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->SetStatic();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbCache::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbCache::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbCache::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbCache::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbCache*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbCache*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbCache::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbCache::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbCache::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_493_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbCache::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbCache G__TFairDbCache;
static int G__G__FairDBDict_493_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbCache*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbCache*) (soff+(sizeof(FairDbCache)*i)))->~G__TFairDbCache();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbCache*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbCache*) (soff))->~G__TFairDbCache();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistry */
static int G__G__FairDBDict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistry* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistry((bool) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairRegistry((bool) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRegistry[n];
       } else {
         p = new((void*) gvp) FairRegistry[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRegistry;
       } else {
         p = new((void*) gvp) FairRegistry;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRegistry(*(FairRegistry*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairRegistry(*(FairRegistry*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry& obj = ((FairRegistry*) G__getstructoffset())->operator=(*(FairRegistry*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->Merge(*(FairRegistry*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairRegistry*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->KeyExists((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->RemoveKey((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const FairRegistry*) G__getstructoffset())->PrintStream(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((FairRegistry*) G__getstructoffset())->ReadStream(*(istream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const FairRegistry*) G__getstructoffset())->PrettyPrint(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->ValuesLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->LockValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->UnLockValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->KeysLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->LockKeys();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->UnLockKeys();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRegistry*) G__getstructoffset())->SetDirty((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRegistry*) G__getstructoffset())->SetDirty();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->IsDirty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->SetErrorHandler((FairRegistry::ErrorHandler) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->Get((const char*) G__int(libp->para[0]), *(char*) G__Charref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->Get((const char*) G__int(libp->para[0]), libp->para[1].ref ? *(const char**) libp->para[1].ref : *(const char**) (void*) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->Get((const char*) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->Get((const char*) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRegistry*) G__getstructoffset())->Get((const char*) G__int(libp->para[0]), *(FairRegistry*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const type_info& obj = ((const FairRegistry*) G__getstructoffset())->GetType((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairRegistry*) G__getstructoffset())->GetTypeAsString((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairRegistry*) G__getstructoffset())->GetValueAsString((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const FairRegistry*) G__getstructoffset())->GetChar((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const FairRegistry*) G__getstructoffset())->GetCharString((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairRegistry*) G__getstructoffset())->GetInt((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRegistry*) G__getstructoffset())->GetDouble((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry* pobj;
         const FairRegistry xobj = ((const FairRegistry*) G__getstructoffset())->GetFairRegistry((const char*) G__int(libp->para[0]));
         pobj = new FairRegistry(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRegistry*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), *((FairRegistry*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry::FairRegistryKey* pobj;
         const FairRegistry::FairRegistryKey xobj = ((const FairRegistry*) G__getstructoffset())->Key();
         pobj = new FairRegistry::FairRegistryKey(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_505_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistry G__TFairRegistry;
static int G__G__FairDBDict_505_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistry*) (soff+(sizeof(FairRegistry)*i)))->~G__TFairRegistry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistry*) (soff))->~G__TFairRegistry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElement */
static int G__G__FairDBDict_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairRegistryElement*) G__getstructoffset())->Dup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const FairRegistryElement*) G__getstructoffset())->PrintStream(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((FairRegistryElement*) G__getstructoffset())->ReadStream(*(istream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const type_info& obj = ((const FairRegistryElement*) G__getstructoffset())->GetType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const FairRegistryElement*) G__getstructoffset())->GetTypeAsString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElement G__TFairRegistryElement;
static int G__G__FairDBDict_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElement*) (soff+(sizeof(FairRegistryElement)*i)))->~G__TFairRegistryElement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElement*) (soff))->~G__TFairRegistryElement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElement* dest = (FairRegistryElement*) G__getstructoffset();
   *dest = *(FairRegistryElement*) libp->para[0].ref;
   const FairRegistryElement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConfigurable */
static int G__G__FairDBDict_517_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigurable*) G__getstructoffset())->Config();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry& obj = ((const FairDbConfigurable*) G__getstructoffset())->DefaultConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry& obj = ((FairDbConfigurable*) G__getstructoffset())->GetConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairRegistry& obj = ((const FairDbConfigurable*) G__getstructoffset())->GetConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbConfigurable*) G__getstructoffset())->Update());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairDbConfigurable*) G__getstructoffset())->Set((FairDbConfigNotice*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairDbConfigurable*) G__getstructoffset())->Set();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigurable*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConfigurable::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigurable::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConfigurable::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConfigurable::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConfigurable*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigurable*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigurable*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigurable*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigurable::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigurable::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigurable::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_517_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigurable::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConfigurable G__TFairDbConfigurable;
static int G__G__FairDBDict_517_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConfigurable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConfigurable*) (soff+(sizeof(FairDbConfigurable)*i)))->~G__TFairDbConfigurable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConfigurable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConfigurable*) (soff))->~G__TFairDbConfigurable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_517_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConfigurable* dest = (FairDbConfigurable*) G__getstructoffset();
   *dest = *(FairDbConfigurable*) libp->para[0].ref;
   const FairDbConfigurable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbStreamer */
static int G__G__FairDBDict_518_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer[n];
     } else {
       p = new((void*) gvp) FairDbStreamer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer;
     } else {
       p = new((void*) gvp) FairDbStreamer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((TObject*) G__int(libp->para[0]), (FairDb::DataTypes) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((TObject*) G__int(libp->para[0]), (FairDb::DataTypes) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((TObject*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbStreamer((TObject*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(const UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(const UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((const UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((const UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(const Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(const Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((const Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((const Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(const UShort_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(const UShort_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((const UShort_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((const UShort_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(const Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(const Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((const Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((const Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer(
(Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbStreamer(
(Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (FairDb::DataTypes) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStreamer((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbStreamer((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStreamer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbStreamer(*(FairDbStreamer*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbStreamer(*(FairDbStreamer*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbStreamer& obj = ((FairDbStreamer*) G__getstructoffset())->operator=(*(FairDbStreamer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const FairDbStreamer*) G__getstructoffset())->AsString();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->SetString(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbStreamer*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbStreamer*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((Short_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((UShort_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->Fill((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbStreamer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStreamer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbStreamer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbStreamer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStreamer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStreamer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStreamer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStreamer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_518_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStreamer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbStreamer G__TFairDbStreamer;
static int G__G__FairDBDict_518_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbStreamer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbStreamer*) (soff+(sizeof(FairDbStreamer)*i)))->~G__TFairDbStreamer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbStreamer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbStreamer*) (soff))->~G__TFairDbStreamer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbOutTableBuffer */
static int G__G__FairDBDict_519_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbOutTableBuffer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbOutTableBuffer((FairDbTableMetaData*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairDbOutTableBuffer((FairDbTableMetaData*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbOutTableBuffer*) G__getstructoffset())->HasGoodData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbOutTableBuffer*) G__getstructoffset())->GetCSV();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbOutTableBuffer*) G__getstructoffset())->IsComplete());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Bool_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Char_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((const Char_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Short_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((UShort_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Float_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<(*(ValTimeStamp*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbOutTableBuffer& obj = ((FairDbOutTableBuffer*) G__getstructoffset())->operator<<(*(FairDbStreamer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbOutTableBuffer*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbOutTableBuffer*) G__getstructoffset())->Store(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbOutTableBuffer*) G__getstructoffset())->StoreDefaultIfInvalid((FairDb::DataTypes) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbOutTableBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbOutTableBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbOutTableBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbOutTableBuffer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbOutTableBuffer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbOutTableBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbOutTableBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbOutTableBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_519_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbOutTableBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbOutTableBuffer G__TFairDbOutTableBuffer;
static int G__G__FairDBDict_519_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbOutTableBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbOutTableBuffer*) (soff+(sizeof(FairDbOutTableBuffer)*i)))->~G__TFairDbOutTableBuffer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbOutTableBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbOutTableBuffer*) (soff))->~G__TFairDbOutTableBuffer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResultPool */
static int G__G__FairDBDict_520_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultPool* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultPool(
(FairDbStatement*) G__int(libp->para[0]), *(FairDbString*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableInterface*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbResultPool(
(FairDbStatement*) G__int(libp->para[0]), *(FairDbString*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableInterface*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultPool(
(FairDbStatement*) G__int(libp->para[0]), *(FairDbString*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableInterface*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbResultPool(
(FairDbStatement*) G__int(libp->para[0]), *(FairDbString*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableInterface*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResultPool*) G__getstructoffset())->CurColExists());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbResultPool*) G__getstructoffset())->CurColString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbResultPool*) G__getstructoffset())->CurColValue();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResultPool*) G__getstructoffset())->CurRowNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResultPool*) G__getstructoffset())->GetCurrentRowNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbResultPool*) G__getstructoffset())->GetDbNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbResultPool*) G__getstructoffset())->GetDBType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbResultPool*) G__getstructoffset())->GetFillOpts();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbResultPool*) G__getstructoffset())->GetTableInterface());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResultPool*) G__getstructoffset())->IsBeforeFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResultPool*) G__getstructoffset())->IsExhausted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResultPool*) G__getstructoffset())->IsCompleted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbResultPool*) G__getstructoffset())->RowAsCsv(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Bool_t*) G__Boolref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Char_t*) G__Charref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Short_t*) G__Shortref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(UShort_t*) G__UShortref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Int_t*) G__Intref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(UInt_t*) G__UIntref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Long_t*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(ULong_t*) G__ULongref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Float_t*) G__Floatref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(Double_t*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(ValTimeStamp*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbResultPool& obj = ((FairDbResultPool*) G__getstructoffset())->operator>>(*(FairDbStreamer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbResultPool*) G__getstructoffset())->FetchRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResultPool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultPool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbResultPool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbResultPool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResultPool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultPool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultPool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultPool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_520_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultPool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResultPool G__TFairDbResultPool;
static int G__G__FairDBDict_520_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResultPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResultPool*) (soff+(sizeof(FairDbResultPool)*i)))->~G__TFairDbResultPool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResultPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResultPool*) (soff))->~G__TFairDbResultPool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbFieldType */
static int G__G__FairDBDict_521_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbFieldType* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbFieldType((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbFieldType((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbFieldType[n];
       } else {
         p = new((void*) gvp) FairDbFieldType[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbFieldType;
       } else {
         p = new((void*) gvp) FairDbFieldType;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbFieldType* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbFieldType(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) FairDbFieldType(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbFieldType* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbFieldType(*(FairDbFieldType*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbFieldType(*(FairDbFieldType*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbFieldType* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbFieldType(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) FairDbFieldType(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbFieldType*) G__getstructoffset())->AsString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const string* pobj;
         const string xobj = ((const FairDbFieldType*) G__getstructoffset())->AsSQLString((FairDb::DbTypes) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const string* pobj;
         const string xobj = ((const FairDbFieldType*) G__getstructoffset())->AsSQLString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbFieldType*) G__getstructoffset())->UndefinedValue();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbFieldType*) G__getstructoffset())->GetConcept());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbFieldType*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbFieldType*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbFieldType*) G__getstructoffset())->IsCompatible(*(FairDbFieldType*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbFieldType*) G__getstructoffset())->IsEquivalent(*(FairDbFieldType*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbFieldType*) G__getstructoffset())->IsEqual(*(FairDbFieldType*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbFieldType*) G__getstructoffset())->IsSmaller(*(FairDbFieldType*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbFieldType*) G__getstructoffset())->IsSigned());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbFieldType*) G__getstructoffset())->SetUnsigned();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbFieldType::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbFieldType::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbFieldType::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbFieldType::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbFieldType*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbFieldType*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbFieldType*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbFieldType*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbFieldType::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbFieldType::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbFieldType::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_521_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbFieldType::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbFieldType G__TFairDbFieldType;
static int G__G__FairDBDict_521_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbFieldType*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbFieldType*) (soff+(sizeof(FairDbFieldType)*i)))->~G__TFairDbFieldType();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbFieldType*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbFieldType*) (soff))->~G__TFairDbFieldType();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_521_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbFieldType* dest = (FairDbFieldType*) G__getstructoffset();
   *dest = *(FairDbFieldType*) libp->para[0].ref;
   const FairDbFieldType& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConfigData */
static int G__G__FairDBDict_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConfigData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigData[n];
     } else {
       p = new((void*) gvp) FairDbConfigData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigData;
     } else {
       p = new((void*) gvp) FairDbConfigData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbConfigData*) G__getstructoffset())->GetNumParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbConfigData*) G__getstructoffset())->GetParamName((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType* pobj;
         const FairDbFieldType xobj = ((const FairDbConfigData*) G__getstructoffset())->GetParamType((UInt_t) G__int(libp->para[0]));
         pobj = new FairDbFieldType(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbConfigData*) G__getstructoffset())->GetParamValue((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigData*) G__getstructoffset())->PushBack(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(FairDbFieldType*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigData*) G__getstructoffset())->SetAggregateNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConfigData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConfigData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConfigData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_523_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConfigData G__TFairDbConfigData;
static int G__G__FairDBDict_523_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConfigData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConfigData*) (soff+(sizeof(FairDbConfigData)*i)))->~G__TFairDbConfigData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConfigData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConfigData*) (soff))->~G__TFairDbConfigData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_523_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConfigData* dest = (FairDbConfigData*) G__getstructoffset();
   *dest = *(FairDbConfigData*) libp->para[0].ref;
   const FairDbConfigData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbTableMetaData */
static int G__G__FairDBDict_529_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbTableMetaData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbTableMetaData(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbTableMetaData(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbTableMetaData[n];
       } else {
         p = new((void*) gvp) FairDbTableMetaData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbTableMetaData;
       } else {
         p = new((void*) gvp) FairDbTableMetaData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const string* pobj;
         const string xobj = ((const FairDbTableMetaData*) G__getstructoffset())->Sql((FairDb::DbTypes) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const string* pobj;
         const string xobj = ((const FairDbTableMetaData*) G__getstructoffset())->Sql();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableMetaData*) G__getstructoffset())->TableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableMetaData*) G__getstructoffset())->HasRowCounter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableMetaData*) G__getstructoffset())->NumCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType& obj = ((const FairDbTableMetaData*) G__getstructoffset())->ColFieldType((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableMetaData*) G__getstructoffset())->ColFieldConcept((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableMetaData*) G__getstructoffset())->ColIsNullable((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableMetaData*) G__getstructoffset())->ColMustDelimit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableMetaData*) G__getstructoffset())->ColName((Int_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableMetaData*) G__getstructoffset())->SetFromSql(*(string*) libp->para[0].ref, (FairDb::DbTypes) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbTableMetaData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableMetaData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbTableMetaData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbTableMetaData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbTableMetaData*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableMetaData*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableMetaData*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableMetaData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableMetaData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableMetaData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableMetaData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_529_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableMetaData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_529_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbTableMetaData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbTableMetaData(*(FairDbTableMetaData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbTableMetaData G__TFairDbTableMetaData;
static int G__G__FairDBDict_529_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbTableMetaData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbTableMetaData*) (soff+(sizeof(FairDbTableMetaData)*i)))->~G__TFairDbTableMetaData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbTableMetaData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbTableMetaData*) (soff))->~G__TFairDbTableMetaData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_529_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbTableMetaData* dest = (FairDbTableMetaData*) G__getstructoffset();
   *dest = *(FairDbTableMetaData*) libp->para[0].ref;
   const FairDbTableMetaData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbProxy */
static int G__G__FairDBDict_530_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbProxy* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbProxy(
*(FairDbConnectionPool*) libp->para[0].ref, *(string*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableMetaData*) G__int(libp->para[3])
, (FairDbTableInterface*) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) FairDbProxy(
*(FairDbConnectionPool*) libp->para[0].ref, *(string*) libp->para[1].ref
, (FairDbTableMetaData*) G__int(libp->para[2]), (FairDbTableMetaData*) G__int(libp->para[3])
, (FairDbTableInterface*) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbProxy*) G__getstructoffset())->GetNumDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbProxy*) G__getstructoffset())->GetTableName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->GetTableInterface());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbProxy*) G__getstructoffset())->CreateMetaData(*(FairDbTableMetaData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbProxy*) G__getstructoffset())->TableExists((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbProxy*) G__getstructoffset())->TableExists());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbProxy*) G__getstructoffset())->FindTimeLimits(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, (UInt_t) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(ValTimeStamp*) libp->para[4].ref, *(ValTimeStamp*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QueryAllValidities((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QueryAllValidities((UInt_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QuerySeqNo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QueryValidity(*(ValCondition*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QueryValidity(*(string*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->QueryValidity((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbProxy*) G__getstructoffset())->ReplaceInsertDate(*(ValTimeStamp*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbProxy*) G__getstructoffset())->RemoveSeqNo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbProxy*) G__getstructoffset())->ReplaceSeqNo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbProxy*) G__getstructoffset())->SetSqlCondition(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbProxy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbProxy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbProxy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbProxy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbProxy*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbProxy*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbProxy*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbProxy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbProxy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbProxy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbProxy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_530_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbProxy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbProxy G__TFairDbProxy;
static int G__G__FairDBDict_530_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbProxy*) (soff+(sizeof(FairDbProxy)*i)))->~G__TFairDbProxy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbProxy*) (soff))->~G__TFairDbProxy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbStatement */
static int G__G__FairDBDict_537_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStatement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbStatement(*(FairDbConnection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbStatement(*(FairDbConnection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbStatement*) G__getstructoffset())->GetDBType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<TString>* pobj;
         list<TString> xobj = ((FairDbStatement*) G__getstructoffset())->TestTranslateSQL(*(TString*) libp->para[0].ref, (FairDb::DbTypes) G__int(libp->para[1]));
         pobj = new list<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((FairDbStatement*) G__getstructoffset())->ExecuteQuery(*(TString*) libp->para[0].ref));
      break;
   case 0:
      G__letint(result7, 85, (long) ((FairDbStatement*) G__getstructoffset())->ExecuteQuery());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDbStatement*) G__getstructoffset())->ExecuteUpdate(*(TString*) libp->para[0].ref));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbStatement*) G__getstructoffset())->ExecuteUpdate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbStatement*) G__getstructoffset())->Commit(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbStatement*) G__getstructoffset())->PrintExceptions((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbStatement*) G__getstructoffset())->PrintExceptions());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbExceptionLog& obj = ((const FairDbStatement*) G__getstructoffset())->GetExceptionLog();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbStatement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStatement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbStatement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbStatement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbStatement*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStatement*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStatement*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStatement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStatement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStatement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStatement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_537_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStatement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_537_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbStatement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbStatement(*(FairDbStatement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbStatement G__TFairDbStatement;
static int G__G__FairDBDict_537_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbStatement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbStatement*) (soff+(sizeof(FairDbStatement)*i)))->~G__TFairDbStatement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbStatement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbStatement*) (soff))->~G__TFairDbStatement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConnectionPool */
static int G__G__FairDBDict_538_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConnectionPool*) G__getstructoffset())->CreateStatement((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetConnection((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairDbConnectionPool*) G__getstructoffset())->GetConnection((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbConnectionPool*) G__getstructoffset())->GetDbName((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetDbNo(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetStatus((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbConnectionPool*) G__getstructoffset())->GetStatusAsString((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbConnectionPool*) G__getstructoffset())->GetURL((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbConnectionPool*) G__getstructoffset())->IsTemporaryTable(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->AllocateSeqNo(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->AllocateSeqNo(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->AllocateSeqNo(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetAuthorisingDbNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetNumDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetTableDbNo(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const FairDbConnectionPool*) G__getstructoffset())->GetTableDbNo(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const FairDbConnectionPool*) G__getstructoffset())->TableExists(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const FairDbConnectionPool*) G__getstructoffset())->TableExists(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbConnectionPool*) G__getstructoffset())->CreateTemporaryTable(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbConnectionPool*) G__getstructoffset())->CreateTransientTable(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->HoldConnections();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->ReleaseConnections();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbConnectionPool*) G__getstructoffset())->SetPermanent((UInt_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbConnectionPool*) G__getstructoffset())->SetPermanent((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbConnectionPool*) G__getstructoffset())->HoldConnectionAt((UInt_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbConnectionPool*) G__getstructoffset())->HoldConnectionAt((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConnectionPool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnectionPool[n];
     } else {
       p = new((void*) gvp) FairDbConnectionPool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnectionPool;
     } else {
       p = new((void*) gvp) FairDbConnectionPool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConnectionPool* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbConnectionPool(*(FairDbConnectionPool*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbConnectionPool(*(FairDbConnectionPool*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->SetAuthorisingEntry((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDbConnectionPool*) G__getstructoffset())->GetAuthorisingEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConnectionPool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionPool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConnectionPool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConnectionPool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConnectionPool*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionPool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionPool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnectionPool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionPool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_538_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnectionPool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConnectionPool G__TFairDbConnectionPool;
static int G__G__FairDBDict_538_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConnectionPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConnectionPool*) (soff+(sizeof(FairDbConnectionPool)*i)))->~G__TFairDbConnectionPool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConnectionPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConnectionPool*) (soff))->~G__TFairDbConnectionPool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_538_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConnectionPool* dest = (FairDbConnectionPool*) G__getstructoffset();
   *dest = *(FairDbConnectionPool*) libp->para[0].ref;
   const FairDbConnectionPool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbTableBuffer */
static int G__G__FairDBDict_545_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbTableBuffer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbTableBuffer((FairDbTableMetaData*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairDbTableBuffer((FairDbTableMetaData*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType& obj = ((const FairDbTableBuffer*) G__getstructoffset())->ColFieldType((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType& obj = ((const FairDbTableBuffer*) G__getstructoffset())->GetColumnFieldType((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->ColName((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->GetColumnName((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType& obj = ((const FairDbTableBuffer*) G__getstructoffset())->CurColFieldType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbFieldType& obj = ((const FairDbTableBuffer*) G__getstructoffset())->GetCurrrentColumnFieldType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->CurColName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->GetCurrentColumnName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableBuffer*) G__getstructoffset())->CurColNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableBuffer*) G__getstructoffset())->GetCurrentColumnNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableBuffer*) G__getstructoffset())->HasRowCounter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbTableBuffer*) G__getstructoffset())->HasRowId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableBuffer*) G__getstructoffset())->NumCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbTableBuffer*) G__getstructoffset())->GetNumOfColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->TableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->GetTableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->TableNameTc();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbTableBuffer*) G__getstructoffset())->GetTableNameTc();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbTableBuffer*) G__getstructoffset())->MetaData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->DecrementCurCol();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->GetPreviousCurrentColumn();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->IncrementCurCol();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->GetNextCurrentColumn();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbTableBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbTableBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbTableBuffer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbTableBuffer*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableBuffer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_545_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbTableBuffer G__TFairDbTableBuffer;
static int G__G__FairDBDict_545_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbTableBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbTableBuffer*) (soff+(sizeof(FairDbTableBuffer)*i)))->~G__TFairDbTableBuffer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbTableBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbTableBuffer*) (soff))->~G__TFairDbTableBuffer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbString */
static int G__G__FairDBDict_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbString* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbString[n];
     } else {
       p = new((void*) gvp) FairDbString[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbString;
     } else {
       p = new((void*) gvp) FairDbString;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbString* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbString((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairDbString((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbString* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbString(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbString(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const FairDbString*) G__getstructoffset())->c_str());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbString*) G__getstructoffset())->GetString();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<((Float_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<((Char_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<((const Char_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbString& obj = ((FairDbString*) G__getstructoffset())->operator<<(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbString*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((FairDbString*) G__getstructoffset())->GetString();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbString::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbString::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbString::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbString::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbString*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbString*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbString*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbString*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbString::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbString::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbString::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_546_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbString::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_546_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbString* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbString(*(FairDbString*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbString G__TFairDbString;
static int G__G__FairDBDict_546_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbString*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbString*) (soff+(sizeof(FairDbString)*i)))->~G__TFairDbString();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbString*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbString*) (soff))->~G__TFairDbString();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_546_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbString* dest = (FairDbString*) G__getstructoffset();
   *dest = *(FairDbString*) libp->para[0].ref;
   const FairDbString& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbValRecordFactory */
static int G__G__FairDBDict_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecordFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecordFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
   } else {
     p = new((void*) gvp) FairDbValRecordFactory(
*(FairDbProxy*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecordFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbValRecordFactory(*(FairDbValRecord*) libp->para[0].ref, *((const string*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) FairDbValRecordFactory(*(FairDbValRecord*) libp->para[0].ref, *((const string*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbValRecordFactory*) G__getstructoffset())->GetCacheName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->GetNumValidityRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->IndexOfAggno((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->IsExtendedContext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((const FairDbValRecordFactory*) G__getstructoffset())->GetValidityRec((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((const FairDbValRecordFactory*) G__getstructoffset())->GetValidityRecFromAggNo((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((const FairDbValRecordFactory*) G__getstructoffset())->GetValidityRecFromSeqNo((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->NonAggregated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbValRecordFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbValRecordFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbValRecordFactory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbValRecordFactory*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordFactory*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordFactory*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordFactory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecordFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_547_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecordFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_547_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbValRecordFactory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbValRecordFactory(*(FairDbValRecordFactory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbValRecordFactory G__TFairDbValRecordFactory;
static int G__G__FairDBDict_547_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbValRecordFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbValRecordFactory*) (soff+(sizeof(FairDbValRecordFactory)*i)))->~G__TFairDbValRecordFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbValRecordFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbValRecordFactory*) (soff))->~G__TFairDbValRecordFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResultKey */
static int G__G__FairDBDict_548_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultKey((FairDbResultKey*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbResultKey((FairDbResultKey*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultKey[n];
       } else {
         p = new((void*) gvp) FairDbResultKey[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultKey;
       } else {
         p = new((void*) gvp) FairDbResultKey;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbResultKey(
*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, (UInt_t) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
   } else {
     p = new((void*) gvp) FairDbResultKey(
*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, (UInt_t) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbResultKey*) G__getstructoffset())->AsString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FairDbResultKey*) G__getstructoffset())->Compare((FairDbResultKey*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResultKey::GetEmptyKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbResultKey*) G__getstructoffset())->GetNumVrecs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbResultKey*) G__getstructoffset())->GetObjTableMapName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbResultKey*) G__getstructoffset())->IsEqualTo((FairDbResultKey*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResultKey*) G__getstructoffset())->AddVRecKey((UInt_t) G__int(libp->para[0]), *((ValTimeStamp*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResultKey::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultKey::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbResultKey::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbResultKey::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResultKey*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultKey::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultKey::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultKey::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_548_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultKey::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_548_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbResultKey* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbResultKey(*(FairDbResultKey*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResultKey G__TFairDbResultKey;
static int G__G__FairDBDict_548_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResultKey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResultKey*) (soff+(sizeof(FairDbResultKey)*i)))->~G__TFairDbResultKey();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResultKey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResultKey*) (soff))->~G__TFairDbResultKey();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_548_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey* dest = (FairDbResultKey*) G__getstructoffset();
   *dest = *(FairDbResultKey*) libp->para[0].ref;
   const FairDbResultKey& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResultKey::VRecKey */
static int G__G__FairDBDict_549_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey::VRecKey* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultKey::VRecKey[n];
     } else {
       p = new((void*) gvp) FairDbResultKey::VRecKey[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultKey::VRecKey;
     } else {
       p = new((void*) gvp) FairDbResultKey::VRecKey;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_549_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey::VRecKey* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbResultKey::VRecKey((UInt_t) G__int(libp->para[0]), *((ValTimeStamp*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) FairDbResultKey::VRecKey((UInt_t) G__int(libp->para[0]), *((ValTimeStamp*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_549_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbResultKey::VRecKey* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbResultKey::VRecKey(*(FairDbResultKey::VRecKey*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResultKey::VRecKey G__TFairDbResultKeycLcLVRecKey;
static int G__G__FairDBDict_549_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResultKey::VRecKey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResultKey::VRecKey*) (soff+(sizeof(FairDbResultKey::VRecKey)*i)))->~G__TFairDbResultKeycLcLVRecKey();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResultKey::VRecKey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResultKey::VRecKey*) (soff))->~G__TFairDbResultKeycLcLVRecKey();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_549_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultKey::VRecKey* dest = (FairDbResultKey::VRecKey*) G__getstructoffset();
   *dest = *(FairDbResultKey::VRecKey*) libp->para[0].ref;
   const FairDbResultKey::VRecKey& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResultCombo */
static int G__G__FairDBDict_563_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultCombo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3])
, (FairDbProxy*) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3])
, (FairDbProxy*) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3])
, (FairDbProxy*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3])
, (FairDbProxy*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]), (FairDbValRecordFactory*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbResultCombo(
*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbCache*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbResultCombo(*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultCombo(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbResultCombo(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultCombo[n];
       } else {
         p = new((void*) gvp) FairDbResultCombo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultCombo;
       } else {
         p = new((void*) gvp) FairDbResultCombo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResultCombo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultCombo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbResultCombo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbResultCombo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResultCombo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultCombo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultCombo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultCombo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_563_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultCombo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_563_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbResultCombo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbResultCombo(*(FairDbResultCombo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResultCombo G__TFairDbResultCombo;
static int G__G__FairDBDict_563_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResultCombo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResultCombo*) (soff+(sizeof(FairDbResultCombo)*i)))->~G__TFairDbResultCombo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResultCombo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResultCombo*) (soff))->~G__TFairDbResultCombo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbResultNonCombo */
static int G__G__FairDBDict_572_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbResultNonCombo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbResultNonCombo(
(FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1])
, (FairDbValRecord*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultNonCombo((FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbResultNonCombo((FairDbResultPool*) G__int(libp->para[0]), (FairDbObjTableMap*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbResultNonCombo((FairDbResultPool*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbResultNonCombo((FairDbResultPool*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultNonCombo[n];
       } else {
         p = new((void*) gvp) FairDbResultNonCombo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbResultNonCombo;
       } else {
         p = new((void*) gvp) FairDbResultNonCombo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbResultNonCombo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultNonCombo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbResultNonCombo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbResultNonCombo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbResultNonCombo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultNonCombo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultNonCombo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbResultNonCombo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_572_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbResultNonCombo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbResultNonCombo G__TFairDbResultNonCombo;
static int G__G__FairDBDict_572_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbResultNonCombo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbResultNonCombo*) (soff+(sizeof(FairDbResultNonCombo)*i)))->~G__TFairDbResultNonCombo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbResultNonCombo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbResultNonCombo*) (soff))->~G__TFairDbResultNonCombo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbRollbackTimes */
static int G__G__FairDBDict_573_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbRollbackTimes* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbRollbackTimes[n];
     } else {
       p = new((void*) gvp) FairDbRollbackTimes[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbRollbackTimes;
     } else {
       p = new((void*) gvp) FairDbRollbackTimes;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbRollbackTimes*) G__getstructoffset())->GetDate(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbRollbackTimes*) G__getstructoffset())->GetType(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbRollbackTimes*) G__getstructoffset())->Show();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbRollbackTimes*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbRollbackTimes*) G__getstructoffset())->Set(*(FairRegistry*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbRollbackTimes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbRollbackTimes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbRollbackTimes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbRollbackTimes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbRollbackTimes*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbRollbackTimes*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbRollbackTimes*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbRollbackTimes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbRollbackTimes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbRollbackTimes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbRollbackTimes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_573_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbRollbackTimes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_573_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbRollbackTimes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbRollbackTimes(*(FairDbRollbackTimes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbRollbackTimes G__TFairDbRollbackTimes;
static int G__G__FairDBDict_573_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbRollbackTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbRollbackTimes*) (soff+(sizeof(FairDbRollbackTimes)*i)))->~G__TFairDbRollbackTimes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbRollbackTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbRollbackTimes*) (soff))->~G__TFairDbRollbackTimes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_573_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbRollbackTimes* dest = (FairDbRollbackTimes*) G__getstructoffset();
   *dest = *(FairDbRollbackTimes*) libp->para[0].ref;
   const FairDbRollbackTimes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbTableInterfaceStore */
static int G__G__FairDBDict_589_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbTableInterfaceStore*) G__getstructoffset())->ShowStatistics();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterfaceStore& obj = FairDbTableInterfaceStore::Instance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) FairDbTableInterfaceStore::IsActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->ClearRollbackTimes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->ClearDataTypeUnion();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbConnectionPool& obj = ((FairDbTableInterfaceStore*) G__getstructoffset())->GetConnectionPool();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((FairDbTableInterfaceStore*) G__getstructoffset())->GetTableInterface(*(string*) libp->para[0].ref, (FairDbObjTableMap*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbTableInterfaceStore*) G__getstructoffset())->HasRowCounter(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->PurgeCaches();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->RefreshMetaData(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairDbTableInterfaceStore*) G__getstructoffset())->SetSqlCondition(*(string*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((FairDbTableInterfaceStore*) G__getstructoffset())->SetSqlCondition();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->SetVerbosity((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbTableInterfaceStore::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterfaceStore::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbTableInterfaceStore::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbTableInterfaceStore::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbTableInterfaceStore*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterfaceStore::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableInterfaceStore::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbTableInterfaceStore::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_589_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbTableInterfaceStore::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbDataTypeUnion */
static int G__G__FairDBDict_590_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbDataTypeUnion* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbDataTypeUnion[n];
     } else {
       p = new((void*) gvp) FairDbDataTypeUnion[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbDataTypeUnion;
     } else {
       p = new((void*) gvp) FairDbDataTypeUnion;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbDataTypeUnion::SimList_t* pobj;
         const FairDbDataTypeUnion::SimList_t xobj = ((const FairDbDataTypeUnion*) G__getstructoffset())->Get((const DataType::DataType_t) G__int(libp->para[0]));
         pobj = new FairDbDataTypeUnion::SimList_t(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairDbDataTypeUnion*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->Show();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbDataTypeUnion& obj = FairDbDataTypeUnion::Instance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->Set((const DataType::DataType_t) G__int(libp->para[0]), *((FairDbDataTypeUnion::SimList_t*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->Set(*(FairRegistry*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbDataTypeUnion::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbDataTypeUnion::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbDataTypeUnion::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbDataTypeUnion::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbDataTypeUnion*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbDataTypeUnion*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbDataTypeUnion::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbDataTypeUnion::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbDataTypeUnion::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_590_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbDataTypeUnion::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_590_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbDataTypeUnion* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbDataTypeUnion(*(FairDbDataTypeUnion*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbDataTypeUnion G__TFairDbDataTypeUnion;
static int G__G__FairDBDict_590_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbDataTypeUnion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbDataTypeUnion*) (soff+(sizeof(FairDbDataTypeUnion)*i)))->~G__TFairDbDataTypeUnion();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbDataTypeUnion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbDataTypeUnion*) (soff))->~G__TFairDbDataTypeUnion();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_590_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbDataTypeUnion* dest = (FairDbDataTypeUnion*) G__getstructoffset();
   *dest = *(FairDbDataTypeUnion*) libp->para[0].ref;
   const FairDbDataTypeUnion& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbStopWatch */
static int G__G__FairDBDict_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStopWatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStopWatch[n];
     } else {
       p = new((void*) gvp) FairDbStopWatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStopWatch;
     } else {
       p = new((void*) gvp) FairDbStopWatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->RecBegin(*((string*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->RecEnd((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->RecFillAgg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->RecMainQuery();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->Resume();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->StartSubWatch((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->Suspend();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbStopWatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbStopWatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbStopWatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbStopWatch*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStopWatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_607_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStopWatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_607_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbStopWatch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbStopWatch(*(FairDbStopWatch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbStopWatch G__TFairDbStopWatch;
static int G__G__FairDBDict_607_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbStopWatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbStopWatch*) (soff+(sizeof(FairDbStopWatch)*i)))->~G__TFairDbStopWatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbStopWatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbStopWatch*) (soff))->~G__TFairDbStopWatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_607_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStopWatch* dest = (FairDbStopWatch*) G__getstructoffset();
   *dest = *(FairDbStopWatch*) libp->para[0].ref;
   const FairDbStopWatch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbStopWatchManager */
static int G__G__FairDBDict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStopWatchManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStopWatchManager[n];
     } else {
       p = new((void*) gvp) FairDbStopWatchManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbStopWatchManager;
     } else {
       p = new((void*) gvp) FairDbStopWatchManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairDbStopWatchManager*) G__getstructoffset())->Enable((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairDbStopWatchManager*) G__getstructoffset())->Enable((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairDbStopWatchManager*) G__getstructoffset())->Enable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->RecBegin(*((string*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->RecEnd((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->RecFillAgg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->RecMainQuery();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->StartSubWatch((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbStopWatchManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatchManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbStopWatchManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbStopWatchManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbStopWatchManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbStopWatchManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatchManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStopWatchManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbStopWatchManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_610_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbStopWatchManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_610_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbStopWatchManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbStopWatchManager(*(FairDbStopWatchManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbStopWatchManager G__TFairDbStopWatchManager;
static int G__G__FairDBDict_610_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbStopWatchManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbStopWatchManager*) (soff+(sizeof(FairDbStopWatchManager)*i)))->~G__TFairDbStopWatchManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbStopWatchManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbStopWatchManager*) (soff))->~G__TFairDbStopWatchManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_610_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbStopWatchManager* dest = (FairDbStopWatchManager*) G__getstructoffset();
   *dest = *(FairDbStopWatchManager*) libp->para[0].ref;
   const FairDbStopWatchManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbLogEntry */
static int G__G__FairDBDict_628_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbLogEntry* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbLogEntry(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbLogEntry(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbLogEntry(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbLogEntry(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbLogEntry[n];
       } else {
         p = new((void*) gvp) FairDbLogEntry[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbLogEntry;
       } else {
         p = new((void*) gvp) FairDbLogEntry;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetLogTableName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbLogEntry*) G__getstructoffset())->GetDetectorMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbLogEntry*) G__getstructoffset())->GetLogSeqNoMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbLogEntry*) G__getstructoffset())->GetLogSeqNoMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbLogEntry*) G__getstructoffset())->GetLogNumSeqNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbLogEntry*) G__getstructoffset())->GetSimMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetUserName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetProcessName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetHostName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetServerName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbLogEntry*) G__getstructoffset())->GetReason();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbLogEntry*) G__getstructoffset())->GetUpdateTime();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbLogEntry*) G__getstructoffset())->HasReason());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->SetReason(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->SetDetectorMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->SetSimMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->SetVersion((FairDb::Version) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->SetUpdateTime(*(ValTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (FairDb::Version) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
      break;
   case 1:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((FairDbLogEntry*) G__getstructoffset())->Recreate();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((FairDbLogEntry*) G__getstructoffset())->Write((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbLogEntry*) G__getstructoffset())->Write((UInt_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbLogEntry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbLogEntry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbLogEntry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbLogEntry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbLogEntry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbLogEntry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbLogEntry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbLogEntry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_628_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbLogEntry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbLogEntry G__TFairDbLogEntry;
static int G__G__FairDBDict_628_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbLogEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbLogEntry*) (soff+(sizeof(FairDbLogEntry)*i)))->~G__TFairDbLogEntry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbLogEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbLogEntry*) (soff))->~G__TFairDbLogEntry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_628_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbLogEntry* dest = (FairDbLogEntry*) G__getstructoffset();
   *dest = *(FairDbLogEntry*) libp->para[0].ref;
   const FairDbLogEntry& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbExtSqlContent */
static int G__G__FairDBDict_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbExtSqlContent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbExtSqlContent(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbExtSqlContent(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbExtSqlContent[n];
       } else {
         p = new((void*) gvp) FairDbExtSqlContent[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbExtSqlContent;
       } else {
         p = new((void*) gvp) FairDbExtSqlContent;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbExtSqlContent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbExtSqlContent(
(FairDbExtSqlContent::IntervalType) G__int(libp->para[0]), *((ValTimeStamp*) G__int(libp->para[1]))
, *((ValTimeStamp*) G__int(libp->para[2])), (FairDbDetector::Detector_t) G__int(libp->para[3])
, (DataType::DataType_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) FairDbExtSqlContent(
(FairDbExtSqlContent::IntervalType) G__int(libp->para[0]), *((ValTimeStamp*) G__int(libp->para[1]))
, *((ValTimeStamp*) G__int(libp->para[2])), (FairDbDetector::Detector_t) G__int(libp->para[3])
, (DataType::DataType_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbExtSqlContent*) G__getstructoffset())->GetTimeStart();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbExtSqlContent*) G__getstructoffset())->GetTimeEnd();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbExtSqlContent*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbExtSqlContent*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbExtSqlContent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExtSqlContent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbExtSqlContent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbExtSqlContent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbExtSqlContent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExtSqlContent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbExtSqlContent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbExtSqlContent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbExtSqlContent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDbExtSqlContent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDbExtSqlContent(*(FairDbExtSqlContent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbExtSqlContent G__TFairDbExtSqlContent;
static int G__G__FairDBDict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbExtSqlContent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbExtSqlContent*) (soff+(sizeof(FairDbExtSqlContent)*i)))->~G__TFairDbExtSqlContent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbExtSqlContent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbExtSqlContent*) (soff))->~G__TFairDbExtSqlContent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_629_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbExtSqlContent* dest = (FairDbExtSqlContent*) G__getstructoffset();
   *dest = *(FairDbExtSqlContent*) libp->para[0].ref;
   const FairDbExtSqlContent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConfigBuffer */
static int G__G__FairDBDict_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConfigBuffer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer[n];
     } else {
       p = new((void*) gvp) FairDbConfigBuffer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer;
     } else {
       p = new((void*) gvp) FairDbConfigBuffer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConfigBuffer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])), (FairDb::Version) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])), (FairDb::Version) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])), (FairDb::Version) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])), (FairDb::Version) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) FairDbConfigBuffer(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *((ValCondition*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbConfigBuffer(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConfigBuffer(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbConfigBuffer(*(string*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbConfigBuffer& obj = ((FairDbConfigBuffer*) G__getstructoffset())->operator>>((FairRegistry*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConfigBuffer*) G__getstructoffset())->GetConfigData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbConfigBuffer& obj = ((FairDbConfigBuffer*) G__getstructoffset())->operator<<((FairRegistry*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbConfigBuffer*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbValRecord& obj = ((FairDbConfigBuffer*) G__getstructoffset())->GetValidityRec();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((FairDbConfigBuffer*) G__getstructoffset())->Write((UInt_t) G__int(libp->para[0]), *(string*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbConfigBuffer*) G__getstructoffset())->Write((UInt_t) G__int(libp->para[0]), *(string*) libp->para[1].ref));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbConfigBuffer*) G__getstructoffset())->Write((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbConfigBuffer*) G__getstructoffset())->Write());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConfigBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConfigBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConfigBuffer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConfigBuffer*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigBuffer*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigBuffer*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConfigBuffer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConfigBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_630_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConfigBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConfigBuffer G__TFairDbConfigBuffer;
static int G__G__FairDBDict_630_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConfigBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConfigBuffer*) (soff+(sizeof(FairDbConfigBuffer)*i)))->~G__TFairDbConfigBuffer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConfigBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConfigBuffer*) (soff))->~G__TFairDbConfigBuffer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbReader<FairDbConfigData> */
static int G__G__FairDBDict_631_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>[n];
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>;
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbReader<FairDbConfigData>(*(FairDbReader<FairDbConfigData>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(FairDbReader<FairDbConfigData>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(*(ValCondition*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(ValCondition*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbConfigData>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetResultID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetRow((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetRowByIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetValidityRec((FairDbObjTableMap*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->GetValidityRec());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->TableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->ResultsFromDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbConfigData>::GetTableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbConfigData>::GetTableInterface(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NextQuery((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NextQuery());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery(*(FairDbValRecord*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->NewQuery((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbReader<FairDbConfigData>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbConfigData>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbReader<FairDbConfigData>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbReader<FairDbConfigData>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbConfigData>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbConfigData>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbConfigData>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbConfigData>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbConfigData>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_631_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbConfigData>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbReader<FairDbConfigData> G__TFairDbReaderlEFairDbConfigDatagR;
static int G__G__FairDBDict_631_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbReader<FairDbConfigData>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbReader<FairDbConfigData>*) (soff+(sizeof(FairDbReader<FairDbConfigData>)*i)))->~G__TFairDbReaderlEFairDbConfigDatagR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbReader<FairDbConfigData>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbReader<FairDbConfigData>*) (soff))->~G__TFairDbReaderlEFairDbConfigDatagR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbConnectionManager */
static int G__G__FairDBDict_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbConnectionManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbConnectionManager((FairDbConnectionPool*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairDbConnectionManager((FairDbConnectionPool*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbConnectionManager[n];
       } else {
         p = new((void*) gvp) FairDbConnectionManager[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairDbConnectionManager;
       } else {
         p = new((void*) gvp) FairDbConnectionManager;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbConnectionManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbConnectionManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbConnectionManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbConnectionManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbConnectionManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnectionManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbConnectionManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_632_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbConnectionManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbConnectionManager G__TFairDbConnectionManager;
static int G__G__FairDBDict_632_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbConnectionManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbConnectionManager*) (soff+(sizeof(FairDbConnectionManager)*i)))->~G__TFairDbConnectionManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbConnectionManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbConnectionManager*) (soff))->~G__TFairDbConnectionManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbSqlValidityData */
static int G__G__FairDBDict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbSqlValidityData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbSqlValidityData[n];
     } else {
       p = new((void*) gvp) FairDbSqlValidityData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbSqlValidityData;
     } else {
       p = new((void*) gvp) FairDbSqlValidityData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbSqlValidityData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbSqlValidityData(*(ifstream*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbSqlValidityData(*(ifstream*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbSqlValidityData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbSqlValidityData(*(FairDbValRecord*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbSqlValidityData(*(FairDbValRecord*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->CanBeStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Compare(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Compare(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Compare(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Compare(*(FairDbSqlValidityData*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->CreateTable((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->GetNumErrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->GetNumSqlStmts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->GetSeqNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ValTimeStamp* pobj;
         const ValTimeStamp xobj = ((const FairDbSqlValidityData*) G__getstructoffset())->GetCreationDate();
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbSqlValidityData*) G__getstructoffset())->GetStmt((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const FairDbSqlValidityData*) G__getstructoffset())->GetStmtValues((UInt_t) G__int(libp->para[0]));
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const FairDbSqlValidityData*) G__getstructoffset())->GetTableName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->IsEqual(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->IsEqual(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->IsEqual(*(FairDbSqlValidityData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->IsEqual(*(FairDbSqlValidityData*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbSqlValidityData*) G__getstructoffset())->Fill(*(ifstream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Store((UInt_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Store((UInt_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Write(*(ofstream*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->Write(*(ofstream*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((FairDbSqlValidityData*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(ValInterval*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (FairDb::Version) G__int(libp->para[3])
, *((ValTimeStamp*) G__int(libp->para[4])));
      G__setnull(result7);
      break;
   case 4:
      ((FairDbSqlValidityData*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(ValInterval*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (FairDb::Version) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairDbSqlValidityData*) G__getstructoffset())->Recreate(*(string*) libp->para[0].ref, *(ValInterval*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairDbSqlValidityData*) G__getstructoffset())->AddDataRow(*(FairDbTableInterface*) libp->para[0].ref, (FairDbValRecord*) G__int(libp->para[1])
, *(FairDbObjTableMap*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->SetCreationDate(*((ValTimeStamp*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->SetSeqNo((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const FairDbSqlValidityData*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const FairDbSqlValidityData*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbSqlValidityData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbSqlValidityData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbSqlValidityData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbSqlValidityData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbSqlValidityData*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbSqlValidityData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbSqlValidityData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbSqlValidityData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbSqlValidityData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_634_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbSqlValidityData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbSqlValidityData G__TFairDbSqlValidityData;
static int G__G__FairDBDict_634_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbSqlValidityData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbSqlValidityData*) (soff+(sizeof(FairDbSqlValidityData)*i)))->~G__TFairDbSqlValidityData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbSqlValidityData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbSqlValidityData*) (soff))->~G__TFairDbSqlValidityData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_634_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbSqlValidityData* dest = (FairDbSqlValidityData*) G__getstructoffset();
   *dest = *(FairDbSqlValidityData*) libp->para[0].ref;
   const FairDbSqlValidityData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbValRecordMap */
static int G__G__FairDBDict_637_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbValRecordMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecordMap(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbValRecordMap(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbValRecordMap(*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbValRecordMap(*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbValRecordMap*) G__getstructoffset())->GetDbNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbValRecordMap*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const FairDbValRecordMap*) G__getstructoffset())->GetTableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbValRecordMap*) G__getstructoffset())->GetObjTableMap((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbValRecordMap*) G__getstructoffset())->GetObjTableMapBySeqNo((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbValRecordMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbValRecordMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbValRecordMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbValRecordMap*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordMap*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordMap*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbValRecordMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecordMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbValRecordMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_637_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbValRecordMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbValRecordMap G__TFairDbValRecordMap;
static int G__G__FairDBDict_637_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbValRecordMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbValRecordMap*) (soff+(sizeof(FairDbValRecordMap)*i)))->~G__TFairDbValRecordMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbValRecordMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbValRecordMap*) (soff))->~G__TFairDbValRecordMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDBObjectMemberValues */
// automatic default constructor
static int G__G__FairDBDict_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDBObjectMemberValues *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDBObjectMemberValues[n];
     } else {
       p = new((void*) gvp) FairDBObjectMemberValues[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDBObjectMemberValues;
     } else {
       p = new((void*) gvp) FairDBObjectMemberValues;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__FairDBDict_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairDBObjectMemberValues* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairDBObjectMemberValues(*(FairDBObjectMemberValues*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDBObjectMemberValues G__TFairDBObjectMemberValues;
static int G__G__FairDBDict_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDBObjectMemberValues*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDBObjectMemberValues*) (soff+(sizeof(FairDBObjectMemberValues)*i)))->~G__TFairDBObjectMemberValues();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDBObjectMemberValues*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDBObjectMemberValues*) (soff))->~G__TFairDBObjectMemberValues();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FairDBDict_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDBObjectMemberValues* dest = (FairDBObjectMemberValues*) G__getstructoffset();
   *dest = *(FairDBObjectMemberValues*) libp->para[0].ref;
   const FairDBObjectMemberValues& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDBObjectMemberValue */
static int G__G__FairDBDict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDBObjectMemberValue* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDBObjectMemberValue[n];
     } else {
       p = new((void*) gvp) FairDBObjectMemberValue[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDBObjectMemberValue;
     } else {
       p = new((void*) gvp) FairDBObjectMemberValue;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDBObjectMemberValue* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDBObjectMemberValue((FairDBObjectMemberTypes) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairDBObjectMemberValue((FairDBObjectMemberTypes) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDBObjectMemberValue::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDBObjectMemberValue::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDBObjectMemberValue::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDBObjectMemberValue::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDBObjectMemberValue*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDBObjectMemberValue*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDBObjectMemberValue*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDBObjectMemberValue*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDBObjectMemberValue::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDBObjectMemberValue::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDBObjectMemberValue::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDBObjectMemberValue::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDBObjectMemberValue G__TFairDBObjectMemberValue;
static int G__G__FairDBDict_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDBObjectMemberValue*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDBObjectMemberValue*) (soff+(sizeof(FairDBObjectMemberValue)*i)))->~G__TFairDBObjectMemberValue();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDBObjectMemberValue*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDBObjectMemberValue*) (soff))->~G__TFairDBObjectMemberValue();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTSQLObject */
static int G__G__FairDBDict_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTSQLObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTSQLObject[n];
     } else {
       p = new((void*) gvp) FairTSQLObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTSQLObject;
     } else {
       p = new((void*) gvp) FairTSQLObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TDictionary& obj = ((FairTSQLObject*) G__getstructoffset())->GetcurDict();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TClass& obj = ((FairTSQLObject*) G__getstructoffset())->GetCurCls();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TList& obj = ((FairTSQLObject*) G__getstructoffset())->GetMemberList();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TList& obj = ((FairTSQLObject*) G__getstructoffset())->GetMethodList();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairTSQLObject*) G__getstructoffset())->GetMemberType(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMemberTypeName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMemberTypeName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetDataMemberGetter(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMember(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMethod(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMethodPrototype(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMethodReturnTypeName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSQLObject*) G__getstructoffset())->GetMethodReturnTypeName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTSQLObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSQLObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTSQLObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTSQLObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTSQLObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSQLObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTSQLObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSQLObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_653_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTSQLObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTSQLObject G__TFairTSQLObject;
static int G__G__FairDBDict_653_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTSQLObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTSQLObject*) (soff+(sizeof(FairTSQLObject)*i)))->~G__TFairTSQLObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTSQLObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTSQLObject*) (soff))->~G__TFairTSQLObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbReader<FairDbLogEntry> */
static int G__G__FairDBDict_711_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>[n];
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>;
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbReader<FairDbLogEntry>(*(FairDbReader<FairDbLogEntry>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(FairDbReader<FairDbLogEntry>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(*(ValCondition*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(ValCondition*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbLogEntry>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetResultID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetRow((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetRowByIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetValidityRec((FairDbObjTableMap*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->GetValidityRec());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->TableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->ResultsFromDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbLogEntry>::GetTableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbLogEntry>::GetTableInterface(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NextQuery((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NextQuery());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery(*(FairDbValRecord*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->NewQuery((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbReader<FairDbLogEntry>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbLogEntry>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbReader<FairDbLogEntry>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbReader<FairDbLogEntry>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbLogEntry>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbLogEntry>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbLogEntry>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbLogEntry>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbLogEntry>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_711_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbLogEntry>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbReader<FairDbLogEntry> G__TFairDbReaderlEFairDbLogEntrygR;
static int G__G__FairDBDict_711_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbReader<FairDbLogEntry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbReader<FairDbLogEntry>*) (soff+(sizeof(FairDbReader<FairDbLogEntry>)*i)))->~G__TFairDbReaderlEFairDbLogEntrygR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbReader<FairDbLogEntry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbReader<FairDbLogEntry>*) (soff))->~G__TFairDbReaderlEFairDbLogEntrygR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbWriter<FairDbLogEntry> */
static int G__G__FairDBDict_712_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>[n];
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>;
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbLogEntry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(
*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(
*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbLogEntry>(*(FairDbValRecord*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->TableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->IsOpen((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->IsOpen());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->CanOutput((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->CanOutput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetDbEntry((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetDbNo((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetDbName(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetLogComment(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetComboNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetVersion((FairDb::Version) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetLogTitle(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetRequireGlobalSeqno((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->SetOverlayCreationDate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Abort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Close((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Close());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref, *((ValTimeStamp*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref));
      break;
   case 4:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbWriter<FairDbLogEntry>& obj = ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->operator<<(*(FairDbLogEntry*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbWriter<FairDbLogEntry>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbLogEntry>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbWriter<FairDbLogEntry>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbWriter<FairDbLogEntry>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbLogEntry>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbLogEntry>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbWriter<FairDbLogEntry>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbLogEntry>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_712_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbWriter<FairDbLogEntry>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbWriter<FairDbLogEntry> G__TFairDbWriterlEFairDbLogEntrygR;
static int G__G__FairDBDict_712_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbWriter<FairDbLogEntry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbWriter<FairDbLogEntry>*) (soff+(sizeof(FairDbWriter<FairDbLogEntry>)*i)))->~G__TFairDbWriterlEFairDbLogEntrygR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbWriter<FairDbLogEntry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbWriter<FairDbLogEntry>*) (soff))->~G__TFairDbWriterlEFairDbLogEntrygR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbWriter<FairDbConfigData> */
static int G__G__FairDBDict_713_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>[n];
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>;
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref
, *(string*) libp->para[6].ref);
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref);
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbWriter<FairDbConfigData>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(
*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(
*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbWriter<FairDbConfigData>(*(FairDbValRecord*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->TableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->IsOpen((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->IsOpen());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->CanOutput((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->CanOutput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetDbEntry((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetDbNo((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetDbName(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetLogComment(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetComboNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetVersion((FairDb::Version) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetLogTitle(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetRequireGlobalSeqno((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->SetOverlayCreationDate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Abort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Close((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Close());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref, *(string*) libp->para[5].ref));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, *(string*) libp->para[4].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4]), *(string*) libp->para[5].ref));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))
, (UInt_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), *((ValTimeStamp*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, *(string*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Open(*(FairDbValRecord*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref, *((ValTimeStamp*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(string*) libp->para[4].ref));
      break;
   case 4:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (FairDb::Version) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Activate(*(ValInterval*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbWriter<FairDbConfigData>& obj = ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->operator<<(*(FairDbConfigData*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbWriter<FairDbConfigData>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbConfigData>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbWriter<FairDbConfigData>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbWriter<FairDbConfigData>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbWriter<FairDbConfigData>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbWriter<FairDbConfigData>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbConfigData>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbWriter<FairDbConfigData>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbWriter<FairDbConfigData>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_713_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbWriter<FairDbConfigData>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbWriter<FairDbConfigData> G__TFairDbWriterlEFairDbConfigDatagR;
static int G__G__FairDBDict_713_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbWriter<FairDbConfigData>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbWriter<FairDbConfigData>*) (soff+(sizeof(FairDbWriter<FairDbConfigData>)*i)))->~G__TFairDbWriterlEFairDbConfigDatagR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbWriter<FairDbConfigData>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbWriter<FairDbConfigData>*) (soff))->~G__TFairDbWriterlEFairDbConfigDatagR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDbReader<FairDbValRecord> */
static int G__G__FairDBDict_714_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>[n];
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>;
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairDbReader<FairDbValRecord>(*(FairDbReader<FairDbValRecord>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(FairDbReader<FairDbValRecord>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(*(ValCondition*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(ValCondition*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref
, (FairDb::Version) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref, (FairDb::AbortTest) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]), *(string*) libp->para[3].ref);
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref
, *(FairDb::Version*) G__Intref(&libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(FairDbExtSqlContent*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref
, (FairDb::AbortTest) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(*(string*) libp->para[0].ref, *(FairDbValRecord*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairDbReader<FairDbValRecord>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (FairDb::AbortTest) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairDbReader<FairDbValRecord>(
*(string*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])
, (FairDb::AbortTest) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref, (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Activate(*(ValCondition*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetResultID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetRow((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetRowByIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetValidityRec((FairDbObjTableMap*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->GetValidityRec());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->TableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->ResultsFromDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbValRecord>::GetTableInterface();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairDbTableInterface& obj = FairDbReader<FairDbValRecord>::GetTableInterface(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NextQuery((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NextQuery());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0])), (FairDb::Version) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*((ValCondition*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref));
      break;
   case 3:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref));
      break;
   case 2:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref, *(FairDb::Version*) G__Intref(&libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*(FairDbExtSqlContent*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery(*(FairDbValRecord*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->NewQuery((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDbReader<FairDbValRecord>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbValRecord>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDbReader<FairDbValRecord>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDbReader<FairDbValRecord>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDbReader<FairDbValRecord>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDbReader<FairDbValRecord>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbValRecord>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbValRecord>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDbReader<FairDbValRecord>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_714_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDbReader<FairDbValRecord>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDbReader<FairDbValRecord> G__TFairDbReaderlEFairDbValRecordgR;
static int G__G__FairDBDict_714_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDbReader<FairDbValRecord>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDbReader<FairDbValRecord>*) (soff+(sizeof(FairDbReader<FairDbValRecord>)*i)))->~G__TFairDbReaderlEFairDbValRecordgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDbReader<FairDbValRecord>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDbReader<FairDbValRecord>*) (soff))->~G__TFairDbReaderlEFairDbValRecordgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElementGeneric<int> */
static int G__G__FairDBDict_715_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElementGeneric<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<int>[n];
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<int>;
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElementGeneric<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElementGeneric<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElementGeneric<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElementGeneric<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_715_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElementGeneric<int> G__TFairRegistryElementGenericlEintgR;
static int G__G__FairDBDict_715_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElementGeneric<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElementGeneric<int>*) (soff+(sizeof(FairRegistryElementGeneric<int>)*i)))->~G__TFairRegistryElementGenericlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElementGeneric<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElementGeneric<int>*) (soff))->~G__TFairRegistryElementGenericlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElementGeneric<double> */
static int G__G__FairDBDict_716_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElementGeneric<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<double>[n];
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<double>;
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElementGeneric<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElementGeneric<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElementGeneric<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElementGeneric<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_716_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElementGeneric<double> G__TFairRegistryElementGenericlEdoublegR;
static int G__G__FairDBDict_716_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElementGeneric<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElementGeneric<double>*) (soff+(sizeof(FairRegistryElementGeneric<double>)*i)))->~G__TFairRegistryElementGenericlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElementGeneric<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElementGeneric<double>*) (soff))->~G__TFairRegistryElementGenericlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElementGeneric<FairRegistry> */
static int G__G__FairDBDict_717_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElementGeneric<FairRegistry>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<FairRegistry>[n];
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<FairRegistry>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<FairRegistry>;
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<FairRegistry>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElementGeneric<FairRegistry>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<FairRegistry>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElementGeneric<FairRegistry>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElementGeneric<FairRegistry>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElementGeneric<FairRegistry>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<FairRegistry>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<FairRegistry>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<FairRegistry>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_717_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<FairRegistry>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElementGeneric<FairRegistry> G__TFairRegistryElementGenericlEFairRegistrygR;
static int G__G__FairDBDict_717_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElementGeneric<FairRegistry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElementGeneric<FairRegistry>*) (soff+(sizeof(FairRegistryElementGeneric<FairRegistry>)*i)))->~G__TFairRegistryElementGenericlEFairRegistrygR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElementGeneric<FairRegistry>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElementGeneric<FairRegistry>*) (soff))->~G__TFairRegistryElementGenericlEFairRegistrygR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElementGeneric<char> */
static int G__G__FairDBDict_718_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElementGeneric<char>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<char>[n];
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<char>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<char>;
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<char>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElementGeneric<char>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<char>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElementGeneric<char>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElementGeneric<char>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElementGeneric<char>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<char>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<char>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<char>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_718_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<char>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElementGeneric<char> G__TFairRegistryElementGenericlEchargR;
static int G__G__FairDBDict_718_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElementGeneric<char>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElementGeneric<char>*) (soff+(sizeof(FairRegistryElementGeneric<char>)*i)))->~G__TFairRegistryElementGenericlEchargR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElementGeneric<char>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElementGeneric<char>*) (soff))->~G__TFairRegistryElementGenericlEchargR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRegistryElementGeneric<const char*> */
static int G__G__FairDBDict_719_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRegistryElementGeneric<const char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<const char*>[n];
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<const char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRegistryElementGeneric<const char*>;
     } else {
       p = new((void*) gvp) FairRegistryElementGeneric<const char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRegistryElementGeneric<const char*>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<const char*>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRegistryElementGeneric<const char*>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRegistryElementGeneric<const char*>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRegistryElementGeneric<const char*>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<const char*>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<const char*>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRegistryElementGeneric<const char*>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict_719_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRegistryElementGeneric<const char*>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRegistryElementGeneric<const char*> G__TFairRegistryElementGenericlEconstsPcharmUgR;
static int G__G__FairDBDict_719_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRegistryElementGeneric<const char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRegistryElementGeneric<const char*>*) (soff+(sizeof(FairRegistryElementGeneric<const char*>)*i)))->~G__TFairRegistryElementGenericlEconstsPcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRegistryElementGeneric<const char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRegistryElementGeneric<const char*>*) (soff))->~G__TFairRegistryElementGenericlEconstsPcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__G__FairDBDict__0_1412(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1413(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1414(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1415(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1416(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1417(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1418(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         ValTimeStamp* pobj;
         ValTimeStamp xobj = operator-(*(ValTimeStamp*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref);
         pobj = new ValTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1419(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(ValTimeStamp*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1420(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(ValCondition*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1421(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(ValCondition*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1422(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(ValCondition*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1426(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(ValCondition*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_1427(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(ValInterval*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FairDBDict__0_2454(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(FairRegistry*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* Experiment */

/* FairDbDetector */

/* DataType */

/* ValTimeStamp */

/* ValCondition */

/* ValInterval */

/* FairDb */

/* FairDbException */

/* FairDbExceptionLog */

/* FairDbConnection */

/* FairDbObjTableMap */

/* FairDbResult */

/* FairDbTableInterface */

/* FairDbValRecord */

/* FairDbCache */

/* FairRegistry */

/* FairRegistryElement */

/* FairDbConfigurable */

/* FairDbStreamer */

/* FairDbOutTableBuffer */

/* FairDbResultPool */

/* FairDbFieldType */

/* FairDbConfigData */

/* FairDbTableMetaData */

/* FairDbProxy */

/* FairDbStatement */

/* FairDbConnectionPool */

/* FairDbTableBuffer */

/* FairDbString */

/* FairDbValRecordFactory */

/* FairDbResultKey */

/* FairDbResultKey::VRecKey */

/* FairDbResultCombo */

/* FairDbResultNonCombo */

/* FairDbRollbackTimes */

/* FairDbTableInterfaceStore */

/* FairDbDataTypeUnion */

/* FairDbStopWatch */

/* FairDbStopWatchManager */

/* FairDbLogEntry */

/* FairDbExtSqlContent */

/* FairDbConfigBuffer */

/* FairDbReader<FairDbConfigData> */

/* FairDbConnectionManager */

/* FairDbSqlValidityData */

/* FairDbValRecordMap */

/* FairDBObjectMemberValues */

/* FairDBObjectMemberValue */

/* FairTSQLObject */

/* FairDbReader<FairDbLogEntry> */

/* FairDbWriter<FairDbLogEntry> */

/* FairDbWriter<FairDbConfigData> */

/* FairDbReader<FairDbValRecord> */

/* FairRegistryElementGeneric<int> */

/* FairRegistryElementGeneric<double> */

/* FairRegistryElementGeneric<FairRegistry> */

/* FairRegistryElementGeneric<char> */

/* FairRegistryElementGeneric<const char*> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__FairDBDict {
 public:
  G__Sizep2memfuncG__FairDBDict(): p(&G__Sizep2memfuncG__FairDBDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__FairDBDict::*p)();
};

size_t G__get_sizep2memfuncG__FairDBDict()
{
  G__Sizep2memfuncG__FairDBDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */
static long G__2vbo_FairTSQLObject_TObject_0(long pobject) {
  FairTSQLObject *G__Lderived=(FairTSQLObject*)pobject;
  TObject *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}


/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__FairDBDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition))) {
     ValCondition *G__Lderived;
     G__Lderived=(ValCondition*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval))) {
     ValInterval *G__Lderived;
     G__Lderived=(ValInterval*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap))) {
     FairDbObjTableMap *G__Lderived;
     G__Lderived=(FairDbObjTableMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord))) {
     FairDbValRecord *G__Lderived;
     G__Lderived=(FairDbValRecord*)0x1000;
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry))) {
     FairRegistry *G__Lderived;
     G__Lderived=(FairRegistry*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry),G__get_linked_tagnum(&G__G__FairDBDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement))) {
     FairRegistryElement *G__Lderived;
     G__Lderived=(FairRegistryElement*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer))) {
     FairDbStreamer *G__Lderived;
     G__Lderived=(FairDbStreamer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer))) {
     FairDbOutTableBuffer *G__Lderived;
     G__Lderived=(FairDbOutTableBuffer*)0x1000;
     {
       FairDbTableBuffer *G__Lpbase=(FairDbTableBuffer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool))) {
     FairDbResultPool *G__Lderived;
     G__Lderived=(FairDbResultPool*)0x1000;
     {
       FairDbTableBuffer *G__Lpbase=(FairDbTableBuffer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData))) {
     FairDbConfigData *G__Lderived;
     G__Lderived=(FairDbConfigData*)0x1000;
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey))) {
     FairDbResultKey *G__Lderived;
     G__Lderived=(FairDbResultKey*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo))) {
     FairDbResultCombo *G__Lderived;
     G__Lderived=(FairDbResultCombo*)0x1000;
     {
       FairDbResult *G__Lpbase=(FairDbResult*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo))) {
     FairDbResultNonCombo *G__Lderived;
     G__Lderived=(FairDbResultNonCombo*)0x1000;
     {
       FairDbResult *G__Lpbase=(FairDbResult*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore))) {
     FairDbTableInterfaceStore *G__Lderived;
     G__Lderived=(FairDbTableInterfaceStore*)0x1000;
     {
       FairDbConfigurable *G__Lpbase=(FairDbConfigurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigurable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry))) {
     FairDbLogEntry *G__Lderived;
     G__Lderived=(FairDbLogEntry*)0x1000;
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent))) {
     FairDbExtSqlContent *G__Lderived;
     G__Lderived=(FairDbExtSqlContent*)0x1000;
     {
       FairDbString *G__Lpbase=(FairDbString*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent),G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject))) {
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__2vbo_FairTSQLObject_TObject_0,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR))) {
     FairRegistryElementGeneric<int> *G__Lderived;
     G__Lderived=(FairRegistryElementGeneric<int>*)0x1000;
     {
       FairRegistryElement *G__Lpbase=(FairRegistryElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR),G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR))) {
     FairRegistryElementGeneric<double> *G__Lderived;
     G__Lderived=(FairRegistryElementGeneric<double>*)0x1000;
     {
       FairRegistryElement *G__Lpbase=(FairRegistryElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR),G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR))) {
     FairRegistryElementGeneric<FairRegistry> *G__Lderived;
     G__Lderived=(FairRegistryElementGeneric<FairRegistry>*)0x1000;
     {
       FairRegistryElement *G__Lpbase=(FairRegistryElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR),G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR))) {
     FairRegistryElementGeneric<char> *G__Lderived;
     G__Lderived=(FairRegistryElementGeneric<char>*)0x1000;
     {
       FairRegistryElement *G__Lpbase=(FairRegistryElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR),G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR))) {
     FairRegistryElementGeneric<const char*> *G__Lderived;
     G__Lderived=(FairRegistryElementGeneric<const char*>*)0x1000;
     {
       FairRegistryElement *G__Lpbase=(FairRegistryElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR),G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR),G__get_linked_tagnum(&G__G__FairDBDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__FairDBDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Experiment_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),0,G__get_linked_tagnum(&G__G__FairDBDictLN_Experiment));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Detector_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("DataType_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataType));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("timespec_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_timespec),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tm_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_tm),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Version",105,-1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDb));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbException>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbObjTableMap*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<FairDbResult*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ResultList_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,ResultList_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,list<FairDbResult*,allocator<FairDbResult*> > >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,list<FairDbResult*,allocator<FairDbResult*> >,less<int> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,FairRegistryElement*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairRegistryElement*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairRegistryElement*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairRegistryElement*,less<string> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tRegMap",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ErrorHandler",89,-1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   G__setnewtype(-1,"void (*ErrorHandler)(void);",0);
   G__search_typename2("vector<Param*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbConfigData::Param*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ColumnAttributes>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbTableMetaData::ColumnAttributes>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbConnection*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Int_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Int_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<FairDbResultKey::VRecKey>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbResultKeycLcLVRecKeycOallocatorlEFairDbResultKeycLcLVRecKeygRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,const FairDbObjTableMap*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,const FairDbObjTableMap*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,const FairDbObjTableMap*,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const FairDbResult*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const FairDbObjTableMap*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("name_map_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<DataType::DataType_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<DataType::EDataType>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SimList_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<DataType::DataType_t,SimList_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<DataType::EDataType,list<DataType::EDataType,allocator<DataType::EDataType> > >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<DataType::EDataType,list<DataType::EDataType,allocator<DataType::EDataType> >,less<DataType::EDataType> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SimMap_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<FairDbStopWatch*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbStopWatchmUcOallocatorlEFairDbStopWatchmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbValRecord>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,UInt_t>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,unsigned int>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,unsigned int,less<int> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CompResult_t",117,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult),0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<string>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,const FairDbValRecord*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,const FairDbValRecord*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,const FairDbValRecord*,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FairDBObjectMemberTypes",117,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogOStream*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogOStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogOStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogOStream*,less<string> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogOStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogOStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbLogOStream*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogStat>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogStat,less<string> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,FairDbLogStream*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogStream*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogStream*>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,FairDbLogStream*,less<string> >",117,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairDbLogCatStream>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Experiment */
static void G__setup_memvarExperiment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_Experiment));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)Experiment::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS001=%lldLL",(long long)Experiment::kS001).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS002=%lldLL",(long long)Experiment::kS002).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS003=%lldLL",(long long)Experiment::kS003).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS004=%lldLL",(long long)Experiment::kS004).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS005=%lldLL",(long long)Experiment::kS005).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),-1,-2,1,G__FastAllocString(2048).Format("kS006=%lldLL",(long long)Experiment::kS006).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbDetector */
static void G__setup_memvarFairDbDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector));
   { FairDbDetector *p; p=(FairDbDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)FairDbDetector::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kCal=%lldLL",(long long)FairDbDetector::kCal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kCalCrystal=%lldLL",(long long)FairDbDetector::kCalCrystal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kDch=%lldLL",(long long)FairDbDetector::kDch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kGfi=%lldLL",(long long)FairDbDetector::kGfi).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kLand=%lldLL",(long long)FairDbDetector::kLand).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kMtof=%lldLL",(long long)FairDbDetector::kMtof).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kTof=%lldLL",(long long)FairDbDetector::kTof).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kTracker=%lldLL",(long long)FairDbDetector::kTracker).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kLos=%lldLL",(long long)FairDbDetector::kLos).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DataType */
static void G__setup_memvarDataType(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_DataType));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)DataType::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),-1,-2,1,G__FastAllocString(2048).Format("kData=%lldLL",(long long)DataType::kData).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),-1,-2,1,G__FastAllocString(2048).Format("kDaqData=%lldLL",(long long)DataType::kDaqData).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),-1,-2,1,G__FastAllocString(2048).Format("kMC=%lldLL",(long long)DataType::kMC).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ValTimeStamp */
static void G__setup_memvarValTimeStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   { ValTimeStamp *p; p=(ValTimeStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNanoSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ValCondition */
static void G__setup_memvarValCondition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition));
   { ValCondition *p; p=(ValCondition*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,2,"fDetector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,2,"fDataType=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,2,"fTimeStamp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ValInterval */
static void G__setup_memvarValInterval(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval));
   { ValInterval *p; p=(ValInterval*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDetectorMask=",0,"Detector::Detector_t (or compacted)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSimMask=",0,"data/mc conditions (or compacted)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,2,"fTimeStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,2,"fTimeEnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TString),-1,-1,2,"fDataSource=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDb */
static void G__setup_memvarFairDb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDb));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLVersionTypes),-1,-2,1,G__FastAllocString(2048).Format("kAnyVersion=%lldLL",(long long)FairDb::kAnyVersion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLVersionTypes),-1,-2,1,G__FastAllocString(2048).Format("kDefaultVersion=%lldLL",(long long)FairDb::kDefaultVersion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLVersionTypes),-1,-2,1,G__FastAllocString(2048).Format("kOtherVersion=%lldLL",(long long)FairDb::kOtherVersion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLTypeRegimes),-1,-2,1,G__FastAllocString(2048).Format("kRootRegime=%lldLL",(long long)FairDb::kRootRegime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLTypeRegimes),-1,-2,1,G__FastAllocString(2048).Format("kSQLRegime=%lldLL",(long long)FairDb::kSQLRegime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)FairDb::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kBool=%lldLL",(long long)FairDb::kBool).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kChar=%lldLL",(long long)FairDb::kChar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kUChar=%lldLL",(long long)FairDb::kUChar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kTiny=%lldLL",(long long)FairDb::kTiny).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kUTiny=%lldLL",(long long)FairDb::kUTiny).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kShort=%lldLL",(long long)FairDb::kShort).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kUShort=%lldLL",(long long)FairDb::kUShort).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kInt=%lldLL",(long long)FairDb::kInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kUInt=%lldLL",(long long)FairDb::kUInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kLong=%lldLL",(long long)FairDb::kLong).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kULong=%lldLL",(long long)FairDb::kULong).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kFloat=%lldLL",(long long)FairDb::kFloat).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kDouble=%lldLL",(long long)FairDb::kDouble).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kString=%lldLL",(long long)FairDb::kString).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kTString=%lldLL",(long long)FairDb::kTString).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kDate=%lldLL",(long long)FairDb::kDate).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-2,1,G__FastAllocString(2048).Format("kBinary=%lldLL",(long long)FairDb::kBinary).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-2,1,G__FastAllocString(2048).Format("kUnknownDbType=%lldLL",(long long)FairDb::kUnknownDbType).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-2,1,G__FastAllocString(2048).Format("kMySQL=%lldLL",(long long)FairDb::kMySQL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-2,1,G__FastAllocString(2048).Format("kOracle=%lldLL",(long long)FairDb::kOracle).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-2,1,G__FastAllocString(2048).Format("kPostgreSQL=%lldLL",(long long)FairDb::kPostgreSQL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-2,1,G__FastAllocString(2048).Format("kSQLite=%lldLL",(long long)FairDb::kSQLite).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-2,1,G__FastAllocString(2048).Format("kDisabled=%lldLL",(long long)FairDb::kDisabled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-2,1,G__FastAllocString(2048).Format("kTableMissing=%lldLL",(long long)FairDb::kTableMissing).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-2,1,G__FastAllocString(2048).Format("kDataMissing=%lldLL",(long long)FairDb::kDataMissing).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMAXLOCALSEQNO=%lldLL",(long long)FairDb::kMAXLOCALSEQNO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMAXTABLENAMELEN=%lldLL",(long long)FairDb::kMAXTABLENAMELEN).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbException */
static void G__setup_memvarFairDbException(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   { FairDbException *p; p=(FairDbException*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fMessage=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fErrorCode=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDbType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbExceptionLog */
static void G__setup_memvarFairDbExceptionLog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog));
   { FairDbExceptionLog *p; p=(FairDbExceptionLog*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR),G__defined_typename("vector<FairDbException>"),-1,4,"fEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog),-1,-2,4,"fgGELog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConnection */
static void G__setup_memvarFairDbConnection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection));
   { FairDbConnection *p; p=(FairDbConnection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,2,"fDbName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,2,"fUser=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,2,"fPassword=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,2,"fExistingTableList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TString),-1,-1,2,"fSchema=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumConnectedStatements=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TUrl),-1,-1,2,"fUrl=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUrlValidated=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsTemporary=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-1,2,"fDbType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLServer),-1,-1,2,"fServer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog),-1,-1,2,"fExceptionLog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbObjTableMap */
static void G__setup_memvarFairDbObjTableMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap));
   { FairDbObjTableMap *p; p=(FairDbObjTableMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,2,"fVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDbEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,2,"fLogTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCombo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,2,"fTimeStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,2,"fTimeEnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,2,"fDetType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,2,"fSimType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),-1,-1,4,"fOwner=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResult */
static void G__setup_memvarFairDbResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult));
   { FairDbResult *p; p=(FairDbResult*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fID=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCanReuse=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),-1,-1,4,"fEffVRec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR),G__defined_typename("IndexToRow_t"),-1,4,"fIndexKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey),-1,-1,4,"fKey=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResultsFromDb=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumClients=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSqlQualifiers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgLastID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog),-1,-1,4,"fExceptionLog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbTableInterface */
static void G__setup_memvarFairDbTableInterface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface));
   { FairDbTableInterface *p; p=(FairDbTableInterface*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool),-1,-1,4,"fConnectionPool=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData),-1,-1,4,"fMetaData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData),-1,-1,4,"fMetaValid=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCanCache=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache),-1,-1,4,"fCache=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy),-1,-1,4,"fDBProxy=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fExists=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap),-1,-1,4,"fObjTableMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbValRecord */
static void G__setup_memvarFairDbValRecord(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord));
   { FairDbValRecord *p; p=(FairDbValRecord*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAggregateNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fCreationDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fInsertDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsGap=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,4,"fVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSeqNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval),-1,-1,4,"fValInterval=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbCache */
static void G__setup_memvarFairDbCache(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache));
   { FairDbCache *p; p=(FairDbCache*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,1,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,ResultList_t>"),-1,4,"fCache=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCurSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMaxSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumAccepted=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumReused=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistry */
static void G__setup_memvarFairRegistry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   { FairRegistry *p; p=(FairRegistry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fValuesLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fKeysLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("ErrorHandler"),-1,4,"fErrorHandler=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fDirty=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElement */
static void G__setup_memvarFairRegistryElement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement));
   { FairRegistryElement *p; p=(FairRegistryElement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConfigurable */
static void G__setup_memvarFairDbConfigurable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigurable));
   { FairDbConfigurable *p; p=(FairDbConfigurable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry),-1,-1,4,"fDefConfig=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry),-1,-1,4,"fConfig=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbStreamer */
static void G__setup_memvarFairDbStreamer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   { FairDbStreamer *p; p=(FairDbStreamer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TString),-1,-1,4,"fString=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSize=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes),-1,-1,4,"fType=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbOutTableBuffer */
static void G__setup_memvarFairDbOutTableBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer));
   { FairDbOutTableBuffer *p; p=(FairDbOutTableBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBadData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fCSV=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResultPool */
static void G__setup_memvarFairDbResultPool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool));
   { FairDbResultPool *p; p=(FairDbResultPool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-1,4,"fDbType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement),-1,-1,4,"fStatement=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLStatement),-1,-1,4,"fTSQLStatement=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fExhausted=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fValString=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fFillOpts=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbFieldType */
static void G__setup_memvarFairDbFieldType(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   { FairDbFieldType *p; p=(FairDbFieldType*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxTinyInt=%lldLL",(long long)FairDbFieldType::kMaxTinyInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxSmallInt=%lldLL",(long long)FairDbFieldType::kMaxSmallInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxInt=%lldLL",(long long)FairDbFieldType::kMaxInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxChar=%lldLL",(long long)FairDbFieldType::kMaxChar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxOracleFloat=%lldLL",(long long)FairDbFieldType::kMaxOracleFloat).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxMySQLVarchar=%lldLL",(long long)FairDbFieldType::kMaxMySQLVarchar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxOracleVarchar=%lldLL",(long long)FairDbFieldType::kMaxOracleVarchar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits),-1,-2,1,G__FastAllocString(2048).Format("kMaxMySQLText=%lldLL",(long long)FairDbFieldType::kMaxMySQLText).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fConcept=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConfigData */
static void G__setup_memvarFairDbConfigData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData));
   { FairDbConfigData *p; p=(FairDbConfigData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR),G__defined_typename("vector<Param*>"),-1,4,"fParams=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAggregateNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbTableMetaData */
static void G__setup_memvarFairDbTableMetaData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData));
   { FairDbTableMetaData *p; p=(FairDbTableMetaData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLdA),-1,-2,4,"MAXCOL=1000LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes),-1,-2,4,"fgDummy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR),G__defined_typename("vector<ColumnAttributes>"),-1,4,"fColAttr=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumCols=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbProxy */
static void G__setup_memvarFairDbProxy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy));
   { FairDbProxy *p; p=(FairDbProxy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool),-1,-1,4,"fConnectionPool=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData),-1,-1,4,"fMetaData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData),-1,-1,4,"fMetaValid=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSqlCondition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableNameUc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fValSuffix=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbStatement */
static void G__setup_memvarFairDbStatement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement));
   { FairDbStatement *p; p=(FairDbStatement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection),-1,-1,4,"fConDb=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes),-1,-1,4,"fDbType=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog),-1,-1,4,"fExceptionLog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConnectionPool */
static void G__setup_memvarFairDbConnectionPool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool));
   { FairDbConnectionPool *p; p=(FairDbConnectionPool*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus),-1,-2,1,G__FastAllocString(2048).Format("kFailed=%lldLL",(long long)FairDbConnectionPool::kFailed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus),-1,-2,1,G__FastAllocString(2048).Format("kClosed=%lldLL",(long long)FairDbConnectionPool::kClosed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus),-1,-2,1,G__FastAllocString(2048).Format("kOpen=%lldLL",(long long)FairDbConnectionPool::kOpen).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGlobalSeqNoDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR),G__defined_typename("vector<FairDbConnection*>"),-1,4,"fConnections=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,Int_t>"),-1,4,"fTemporaryTables=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbTableBuffer */
static void G__setup_memvarFairDbTableBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer));
   { FairDbTableBuffer *p; p=(FairDbTableBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCurCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHasRowCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData),-1,-1,4,"fMetaData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbString */
static void G__setup_memvarFairDbString(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   { FairDbString *p; p=(FairDbString*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fString=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbValRecordFactory */
static void G__setup_memvarFairDbValRecordFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   { FairDbValRecordFactory *p; p=(FairDbValRecordFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactorycLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMAX_AGGREGATE_NO=%lldLL",(long long)FairDbValRecordFactory::kMAX_AGGREGATE_NO).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),-1,-1,4,"fGap=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsExtendedContext=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,4,"fVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR),G__defined_typename("vector<FairDbValRecord>"),-1,4,"fVRecs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<Int_t,UInt_t>"),-1,4,"fAggNoToIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResultKey */
static void G__setup_memvarFairDbResultKey(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey));
   { FairDbResultKey *p; p=(FairDbResultKey*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey),-1,-2,4,"fgEmptyKey=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fRowName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbResultKeycLcLVRecKeycOallocatorlEFairDbResultKeycLcLVRecKeygRsPgR),G__defined_typename("list<FairDbResultKey::VRecKey>"),-1,4,"fVRecKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumVRecKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResultKey::VRecKey */
static void G__setup_memvarFairDbResultKeycLcLVRecKey(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey));
   { FairDbResultKey::VRecKey *p; p=(FairDbResultKey::VRecKey*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->SeqNo)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"SeqNo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CreationDate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,1,"CreationDate=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResultCombo */
static void G__setup_memvarFairDbResultCombo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo));
   { FairDbResultCombo *p; p=(FairDbResultCombo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR),G__defined_typename("vector<const FairDbResult*>"),-1,4,"fResults=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR),G__defined_typename("vector<const FairDbObjTableMap*>"),-1,4,"fRowKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbResultNonCombo */
static void G__setup_memvarFairDbResultNonCombo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo));
   { FairDbResultNonCombo *p; p=(FairDbResultNonCombo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR),G__defined_typename("vector<FairDbObjTableMap*>"),-1,4,"fRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"fBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbRollbackTimes */
static void G__setup_memvarFairDbRollbackTimes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes));
   { FairDbRollbackTimes *p; p=(FairDbRollbackTimes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("name_map_t"),-1,4,"fTableToDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("name_map_t"),-1,4,"fTableToType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbTableInterfaceStore */
static void G__setup_memvarFairDbTableInterfaceStore(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore));
   { FairDbTableInterfaceStore *p; p=(FairDbTableInterfaceStore*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fConnectionPool)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool),-1,-1,1,"fConnectionPool=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSqlCondition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes),-1,-1,4,"fRollbackTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion),-1,-1,4,"fDataTypeAss=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TString),-1,-1,4,"fLogName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVerbosity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbDataTypeUnion */
static void G__setup_memvarFairDbDataTypeUnion(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   { FairDbDataTypeUnion *p; p=(FairDbDataTypeUnion*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR),G__defined_typename("SimMap_t"),-1,4,"fUnions=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbStopWatch */
static void G__setup_memvarFairDbStopWatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch));
   { FairDbStopWatch *p; p=(FairDbStopWatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage),-1,-2,4,"kPassive=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage),-1,-2,4,"kInitialQuery=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage),-1,-2,4,"kMainQuery=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchcLcLdA),-1,-2,4,"kMaxSubWatch=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurSubWatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRowSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage),-1,-1,4,"fQueryStage=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TStopwatch),-1,-1,4,"fSubWatches[4]=",0,"Partial watches");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,"Current table");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TStopwatch),-1,-1,4,"fWatch=",0,"StopWatch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbStopWatchManager */
static void G__setup_memvarFairDbStopWatchManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager));
   { FairDbStopWatchManager *p; p=(FairDbStopWatchManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)(&FairDbStopWatchManager::gStopWatchManager),117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager),-1,-2,1,"gStopWatchManager=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEnabled=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSubWatchEnabled=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbStopWatchmUcOallocatorlEFairDbStopWatchmUgRsPgR),G__defined_typename("list<FairDbStopWatch*>"),-1,4,"fStopWatchs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbLogEntry */
static void G__setup_memvarFairDbLogEntry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry));
   { FairDbLogEntry *p; p=(FairDbLogEntry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSeqNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fLogTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogDetMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogSimMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,4,"fLogVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogSeqNoMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogSeqNoMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogNumSeqNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fUpdateTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fUserName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fProcessName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fHostName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fServerName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fReason=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbExtSqlContent */
static void G__setup_memvarFairDbExtSqlContent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent));
   { FairDbExtSqlContent *p; p=(FairDbExtSqlContent*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kBefore=%lldLL",(long long)FairDbExtSqlContent::kBefore).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kAfter=%lldLL",(long long)FairDbExtSqlContent::kAfter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kMisses=%lldLL",(long long)FairDbExtSqlContent::kMisses).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kThroughout=%lldLL",(long long)FairDbExtSqlContent::kThroughout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kWithin=%lldLL",(long long)FairDbExtSqlContent::kWithin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kOverlaps=%lldLL",(long long)FairDbExtSqlContent::kOverlaps).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kStarts=%lldLL",(long long)FairDbExtSqlContent::kStarts).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kEnds=%lldLL",(long long)FairDbExtSqlContent::kEnds).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-2,1,G__FastAllocString(2048).Format("kUndefined=%lldLL",(long long)FairDbExtSqlContent::kUndefined).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType),-1,-1,4,"fIntervalType=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fTimeStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fTimeEnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,4,"fDetType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,4,"fSimType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConfigBuffer */
static void G__setup_memvarFairDbConfigBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer));
   { FairDbConfigBuffer *p; p=(FairDbConfigBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)(&FairDbConfigBuffer::fgDefaultContext),117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition),-1,-2,1,"fgDefaultContext=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData),-1,-1,4,"fCFSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR),-1,-1,4,"fCFSetTable=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData),-1,-1,4,"fCFSetModified=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),-1,-1,4,"fVRec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fConfigName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSoftwName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbReader<FairDbConfigData> */
static void G__setup_memvarFairDbReaderlEFairDbConfigDatagR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   { FairDbReader<FairDbConfigData> *p; p=(FairDbReader<FairDbConfigData>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-1,4,"fAbortTest=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),-1,-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,4,"fDetType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,4,"fSimType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-2,4,"fgTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbConnectionManager */
static void G__setup_memvarFairDbConnectionManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager));
   { FairDbConnectionManager *p; p=(FairDbConnectionManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool),-1,-1,4,"fConnectPool=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbSqlValidityData */
static void G__setup_memvarFairDbSqlValidityData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   { FairDbSqlValidityData *p; p=(FairDbSqlValidityData*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult),-1,-2,1,G__FastAllocString(2048).Format("kIdentical=%lldLL",(long long)FairDbSqlValidityData::kIdentical).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult),-1,-2,1,G__FastAllocString(2048).Format("kUpdate=%lldLL",(long long)FairDbSqlValidityData::kUpdate).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult),-1,-2,1,G__FastAllocString(2048).Format("kOutOfDate=%lldLL",(long long)FairDbSqlValidityData::kOutOfDate).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult),-1,-2,1,G__FastAllocString(2048).Format("kConflict=%lldLL",(long long)FairDbSqlValidityData::kConflict).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgLastMetaHadRowCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumErrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSeqNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSqlMySqlMetaMain=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fSqlMySqlMetaVal=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR),G__defined_typename("list<std::string>"),-1,4,"fSqlStmts=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumStmts=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp),-1,-1,4,"fCreationDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbValRecordMap */
static void G__setup_memvarFairDbValRecordMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap));
   { FairDbValRecordMap *p; p=(FairDbValRecordMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),-1,-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR),G__defined_typename("map<UInt_t,const FairDbValRecord*>"),-1,4,"fSeqNoToRec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDBObjectMemberValues */
static void G__setup_memvarFairDBObjectMemberValues(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues));
   { FairDBObjectMemberValues *p; p=(FairDBObjectMemberValues*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),G__defined_typename("FairDBObjectMemberTypes"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c_val)-(long)(p)),99,0,0,-1,-1,-1,1,"c_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ui_Val)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Ui_Val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->i_val)-(long)(p)),105,0,0,-1,-1,-1,1,"i_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_val)-(long)(p)),102,0,0,-1,-1,-1,1,"f_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_val)-(long)(p)),100,0,0,-1,-1,-1,1,"d_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->I_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayI),-1,-1,1,"I_Ar_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->F_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayF),-1,-1,1,"F_Ar_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayD),-1,-1,1,"D_Ar_val=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDBObjectMemberValue */
static void G__setup_memvarFairDBObjectMemberValue(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue));
   { FairDBObjectMemberValue *p; p=(FairDBObjectMemberValue*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),G__defined_typename("FairDBObjectMemberTypes"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c_val)-(long)(p)),99,0,0,-1,-1,-1,1,"c_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ui_Val)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Ui_Val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->i_val)-(long)(p)),105,0,0,-1,-1,-1,1,"i_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_val)-(long)(p)),102,0,0,-1,-1,-1,1,"f_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_val)-(long)(p)),100,0,0,-1,-1,-1,1,"d_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->I_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayI),-1,-1,1,"I_Ar_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->F_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayF),-1,-1,1,"F_Ar_val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D_Ar_val)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TArrayD),-1,-1,1,"D_Ar_val=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTSQLObject */
static void G__setup_memvarFairTSQLObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject));
   { FairTSQLObject *p; p=(FairTSQLObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),-1,-1,2,"fCurCls=",0,"*< Current TClass info*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TDictionary),-1,-1,2,"fcurDict=",0,"*< Current Dictionary info*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TList),-1,-1,2,"fMemberList=",0,"*< The list of members*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TList),-1,-1,2,"fMethodList=",0,"*< The list of methods*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbReader<FairDbLogEntry> */
static void G__setup_memvarFairDbReaderlEFairDbLogEntrygR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   { FairDbReader<FairDbLogEntry> *p; p=(FairDbReader<FairDbLogEntry>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-1,4,"fAbortTest=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),-1,-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,4,"fDetType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,4,"fSimType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-2,4,"fgTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbWriter<FairDbLogEntry> */
static void G__setup_memvarFairDbWriterlEFairDbLogEntrygR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   { FairDbWriter<FairDbLogEntry> *p; p=(FairDbWriter<FairDbLogEntry>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAggregateNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData),-1,-1,4,"fPacket=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRequireGlobalSeqno=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseOverlayCreationDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),-1,-1,4,"fValidRec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry),-1,-1,4,"fLogEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,4,"fVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fLogTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbWriter<FairDbConfigData> */
static void G__setup_memvarFairDbWriterlEFairDbConfigDatagR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   { FairDbWriter<FairDbConfigData> *p; p=(FairDbWriter<FairDbConfigData>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAggregateNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDbNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData),-1,-1,4,"fPacket=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRequireGlobalSeqno=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fTableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseOverlayCreationDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord),-1,-1,4,"fValidRec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry),-1,-1,4,"fLogEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Version"),-1,4,"fVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_string),-1,-1,4,"fLogTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDbReader<FairDbValRecord> */
static void G__setup_memvarFairDbReaderlEFairDbValRecordgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   { FairDbReader<FairDbValRecord> *p; p=(FairDbReader<FairDbValRecord>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLAbortTest),-1,-1,4,"fAbortTest=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-1,4,"fTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult),-1,-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),G__defined_typename("Detector_t"),-1,4,"fDetType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType),G__defined_typename("DataType_t"),-1,4,"fSimType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface),-1,-2,4,"fgTableInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElementGeneric<int> */
static void G__setup_memvarFairRegistryElementGenericlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR));
   { FairRegistryElementGeneric<int> *p; p=(FairRegistryElementGeneric<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElementGeneric<double> */
static void G__setup_memvarFairRegistryElementGenericlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR));
   { FairRegistryElementGeneric<double> *p; p=(FairRegistryElementGeneric<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElementGeneric<FairRegistry> */
static void G__setup_memvarFairRegistryElementGenericlEFairRegistrygR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR));
   { FairRegistryElementGeneric<FairRegistry> *p; p=(FairRegistryElementGeneric<FairRegistry>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElementGeneric<char> */
static void G__setup_memvarFairRegistryElementGenericlEchargR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR));
   { FairRegistryElementGeneric<char> *p; p=(FairRegistryElementGeneric<char>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRegistryElementGeneric<const char*> */
static void G__setup_memvarFairRegistryElementGenericlEconstsPcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR));
   { FairRegistryElementGeneric<const char*> *p; p=(FairRegistryElementGeneric<const char*>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,2,1,-1,-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FairDBDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__FairDBDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncExperiment(void) {
   /* Experiment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_Experiment));
   G__memfunc_setup("FullMask",799,G__G__FairDBDict_168_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&Experiment::FullMask) ), 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_168_0_2, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "u 'Experiment::EExperiment' 'Experiment::Experiment_t' 0 - detector", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(Experiment::Experiment_t))(&Experiment::AsString) ), 0);
   G__memfunc_setup("CharToEnum",982,G__G__FairDBDict_168_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment), G__defined_typename("Experiment::Experiment_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) G__func2void( (Experiment::Experiment_t (*)(Char_t))(&Experiment::CharToEnum) ), 0);
   G__memfunc_setup("MaskToString",1222,G__G__FairDBDict_168_0_4, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) G__func2void( (Char_t* (*)(Int_t))(&Experiment::MaskToString) ), 0);
   G__memfunc_setup("StringToEnum",1231,G__G__FairDBDict_168_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ExperimentcLcLEExperiment), G__defined_typename("Experiment::Experiment_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (Experiment::Experiment_t (*)(const Char_t*, Int_t))(&Experiment::StringToEnum) ), 0);
   G__memfunc_setup("StringToMask",1222,G__G__FairDBDict_168_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*, Int_t))(&Experiment::StringToMask) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbDetector(void) {
   /* FairDbDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector));
   G__memfunc_setup("FullMask",799,G__G__FairDBDict_185_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&FairDbDetector::FullMask) ), 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_185_0_2, 67, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 1, "u 'FairDbDetector::EDetector' 'FairDbDetector::Detector_t' 0 - detector", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(FairDbDetector::Detector_t))(&FairDbDetector::AsString) ), 0);
   G__memfunc_setup("CharToEnum",982,G__G__FairDBDict_185_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 1, 3, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) G__func2void( (FairDbDetector::Detector_t (*)(Char_t))(&FairDbDetector::CharToEnum) ), 0);
   G__memfunc_setup("MaskToString",1222,G__G__FairDBDict_185_0_4, 67, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) G__func2void( (Char_t* (*)(Int_t))(&FairDbDetector::MaskToString) ), 0);
   G__memfunc_setup("StringToMask",1222,G__G__FairDBDict_185_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*, Int_t))(&FairDbDetector::StringToMask) ), 0);
   G__memfunc_setup("StringToEnum",1231,G__G__FairDBDict_185_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (FairDbDetector::Detector_t (*)(const Char_t*, Int_t))(&FairDbDetector::StringToEnum) ), 0);
   G__memfunc_setup("GetDetType",991,G__G__FairDBDict_185_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - detMask", (char*)NULL, (void*) G__func2void( (FairDbDetector::Detector_t (*)(Int_t))(&FairDbDetector::GetDetType) ), 0);
   // automatic default constructor
   G__memfunc_setup("FairDbDetector", 1378, G__G__FairDBDict_185_0_8, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbDetector", 1378, G__G__FairDBDict_185_0_9, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector), -1, 0, 1, 1, 1, 0, "u 'FairDbDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbDetector", 1504, G__G__FairDBDict_185_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_185_0_11, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetector), -1, 1, 1, 1, 1, 0, "u 'FairDbDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDataType(void) {
   /* DataType */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_DataType));
   G__memfunc_setup("FullMask",799,G__G__FairDBDict_187_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&DataType::FullMask) ), 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_187_0_2, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "u 'DataType::EDataType' 'DataType::DataType_t' 0 - detector", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(DataType::DataType_t))(&DataType::AsString) ), 0);
   G__memfunc_setup("MaskToString",1222,G__G__FairDBDict_187_0_3, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(Int_t))(&DataType::MaskToString) ), 0);
   G__memfunc_setup("StringToEnum",1231,G__G__FairDBDict_187_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType), G__defined_typename("DataType::DataType_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (DataType::DataType_t (*)(const Char_t*, Int_t))(&DataType::StringToEnum) ), 0);
   G__memfunc_setup("StringToMask",1222,G__G__FairDBDict_187_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - chars i - 'Int_t' 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*, Int_t))(&DataType::StringToMask) ), 0);
   G__memfunc_setup("Compact",711,G__G__FairDBDict_187_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'DataType::EDataType' 'DataType::DataType_t' 0 - dataType", (char*)NULL, (void*) G__func2void( (Int_t (*)(DataType::DataType_t))(&DataType::Compact) ), 0);
   G__memfunc_setup("Expand",608,G__G__FairDBDict_187_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType), G__defined_typename("DataType::DataType_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - compactDataType", (char*)NULL, (void*) G__func2void( (DataType::DataType_t (*)(Int_t))(&DataType::Expand) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncValTimeStamp(void) {
   /* ValTimeStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp));
   G__memfunc_setup("GetBOT",517,G__G__FairDBDict_191_0_1, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ValTimeStamp (*)())(&ValTimeStamp::GetBOT) ), 0);
   G__memfunc_setup("GetEOT",520,G__G__FairDBDict_191_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ValTimeStamp (*)())(&ValTimeStamp::GetEOT) ), 0);
   G__memfunc_setup("GetNBOT",595,G__G__FairDBDict_191_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ValTimeStamp (*)())(&ValTimeStamp::GetNBOT) ), 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__FairDBDict_191_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 1, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 1, 1, 1, 0, "u 'timespec' 'timespec_t' 11 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_8, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 2, 1, 1, 0, 
"l - 'time_t' 11 - t i - 'Int_t' 10 - nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_9, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 9, 1, 1, 0, 
"h - 'UInt_t' 0 - year h - 'UInt_t' 0 - month "
"h - 'UInt_t' 0 - day h - 'UInt_t' 0 - hour "
"h - 'UInt_t' 0 - min h - 'UInt_t' 0 - sec "
"h - 'UInt_t' 0 '0' nsec g - 'Bool_t' 0 'kTRUE' isUTC "
"i - 'Int_t' 0 '0' secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_10, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - date h - 'UInt_t' 0 - time "
"h - 'UInt_t' 0 - nsec g - 'Bool_t' 0 'kTRUE' isUTC "
"i - 'Int_t' 0 '0' secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValTimeStamp",1207,G__G__FairDBDict_191_0_11, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator double",1543,G__G__FairDBDict_191_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSpec",1082,G__G__FairDBDict_191_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_timespec), G__defined_typename("timespec_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSec",571,G__G__FairDBDict_191_0_14, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNanoSec",967,G__G__FairDBDict_191_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeconds",1007,G__G__FairDBDict_191_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_191_0_17, 67, -1, -1, 0, 1, 1, 1, 9, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Format",617,G__G__FairDBDict_191_0_18, 67, -1, -1, 0, 1, 1, 1, 9, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__G__FairDBDict_191_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "u 'ValTimeStamp' - 1 - vldts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDate",670,G__G__FairDBDict_191_0_20, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 8, 
"g - 'Bool_t' 0 'kTRUE' inUTC i - 'Int_t' 0 '0' secOffset "
"H - 'UInt_t' 0 '0' year H - 'UInt_t' 0 '0' month "
"H - 'UInt_t' 0 '0' day", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__FairDBDict_191_0_21, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 8, 
"g - 'Bool_t' 0 'kTRUE' inUTC i - 'Int_t' 0 '0' secOffset "
"H - 'UInt_t' 0 '0' hour H - 'UInt_t' 0 '0' min "
"H - 'UInt_t' 0 '0' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__FairDBDict_191_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__FairDBDict_191_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__FairDBDict_191_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZoneOffset",1315,G__G__FairDBDict_191_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&ValTimeStamp::GetZoneOffset) ), 0);
   G__memfunc_setup("MktimeFromUTC",1255,G__G__FairDBDict_191_0_26, 108, -1, G__defined_typename("time_t"), 0, 1, 3, 1, 0, "U 'tm' 'tm_t' 0 - tmstruct", (char*)NULL, (void*) G__func2void( (time_t (*)(tm_t*))(&ValTimeStamp::MktimeFromUTC) ), 0);
   G__memfunc_setup("IsLeapYear",975,G__G__FairDBDict_191_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - year", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&ValTimeStamp::IsLeapYear) ), 0);
   G__memfunc_setup("DumpTMStruct",1212,G__G__FairDBDict_191_0_28, 121, -1, -1, 0, 1, 3, 1, 0, "u 'tm' 'tm_t' 11 - tmstruct", (char*)NULL, (void*) G__func2void( (void (*)(const tm_t&))(&ValTimeStamp::DumpTMStruct) ), 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 4, 0, 
"i - 'Int_t' 0 - year i - 'Int_t' 0 - month "
"i - 'Int_t' 0 - day i - 'Int_t' 0 - hour "
"i - 'Int_t' 0 - min i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - nsec g - 'Bool_t' 0 - isUTC "
"i - 'Int_t' 0 - secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - date i - 'Int_t' 0 - time "
"i - 'Int_t' 0 - nsec g - 'Bool_t' 0 - isUTC "
"i - 'Int_t' 0 - secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NormalizeNanoSec",1624,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_191_0_33, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ValTimeStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_191_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValTimeStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_191_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ValTimeStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_191_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ValTimeStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_191_0_37, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_191_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_191_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_191_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_191_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValTimeStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_191_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValTimeStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_191_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValTimeStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_191_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValTimeStamp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ValTimeStamp", 1333, G__G__FairDBDict_191_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncValCondition(void) {
   /* ValCondition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition));
   G__memfunc_setup("ValCondition",1226,G__G__FairDBDict_192_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition), -1, 0, 0, 1, 1, 0, "", "necessary for streamer io", (void*) NULL, 0);
   G__memfunc_setup("ValCondition",1226,G__G__FairDBDict_192_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition), -1, 0, 3, 1, 1, 0, 
"u 'FairDbDetector::EDetector' 'FairDbDetector::Detector_t' 11 - detector u 'DataType::EDataType' 'DataType::DataType_t' 10 - mcflag "
"u 'ValTimeStamp' - 11 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_192_0_3, 67, -1, -1, 0, 1, 1, 1, 9, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__FairDBDict_192_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataType",1084,G__G__FairDBDict_192_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType), G__defined_typename("DataType::DataType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__FairDBDict_192_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsNull",599,G__G__FairDBDict_192_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__G__FairDBDict_192_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FairDBDict_192_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ValCondition::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_192_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValCondition::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_192_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ValCondition::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_192_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ValCondition::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_192_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_192_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValCondition::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_192_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValCondition::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_192_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValCondition::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_192_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValCondition::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ValCondition", 1226, G__G__FairDBDict_192_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition), -1, 0, 1, 1, 1, 0, "u 'ValCondition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ValCondition", 1352, G__G__FairDBDict_192_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_192_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition), -1, 1, 1, 1, 1, 0, "u 'ValCondition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncValInterval(void) {
   /* ValInterval */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval));
   G__memfunc_setup("ValInterval",1128,G__G__FairDBDict_193_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValInterval",1128,G__G__FairDBDict_193_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 10 - detMask i - 'Int_t' 10 - simMask "
"u 'ValTimeStamp' - 11 - tstart u 'ValTimeStamp' - 11 - tend "
"u 'TString' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_193_0_3, 67, -1, -1, 0, 1, 1, 1, 9, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompatible",1212,G__G__FairDBDict_193_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'ValCondition' - 11 - vldc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompatible",1212,G__G__FairDBDict_193_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'ValCondition' - 10 - vldc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMask",1510,G__G__FairDBDict_193_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSimMask",981,G__G__FairDBDict_193_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStart",1213,G__G__FairDBDict_193_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeEnd",966,G__G__FairDBDict_193_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSource",1291,G__G__FairDBDict_193_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorId",1287,G__G__FairDBDict_193_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataId",839,G__G__FairDBDict_193_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrimTo",607,G__G__FairDBDict_193_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValInterval' - 11 - vldr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStart",1225,G__G__FairDBDict_193_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - tstart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeEnd",978,G__G__FairDBDict_193_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - tend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_193_0_17, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ValInterval::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_193_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValInterval::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_193_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ValInterval::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_193_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ValInterval::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_193_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_193_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValInterval::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_193_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValInterval::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_193_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ValInterval::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_193_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ValInterval::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ValInterval", 1128, G__G__FairDBDict_193_0_29, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 0, 1, 1, 1, 0, "u 'ValInterval' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ValInterval", 1254, G__G__FairDBDict_193_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_193_0_31, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 1, 1, 1, 1, 0, "u 'ValInterval' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDb(void) {
   /* FairDb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDb));
   G__memfunc_setup("GetTimeWindow",1319,G__G__FairDBDict_194_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) G__func2void( (Int_t (*)(const string&))(&FairDb::GetTimeWindow) ), 0);
   G__memfunc_setup("SetTimeWindow",1331,G__G__FairDBDict_194_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - tableName i - 'Int_t' 0 - timeGate", (char*)NULL, (void*) G__func2void( (void (*)(const string&, Int_t))(&FairDb::SetTimeWindow) ), 0);
   G__memfunc_setup("GetValDefinition",1612,G__G__FairDBDict_194_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"C - - 10 - tableName g - 'Bool_t' 0 'kFALSE' isTemporary", (char*)NULL, (void*) G__func2void( (TString (*)(const char*, Bool_t))(&FairDb::GetValDefinition) ), 0);
   G__memfunc_setup("NotGlobalSeqNo",1384,G__G__FairDBDict_194_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - seqNo", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t))(&FairDb::NotGlobalSeqNo) ), 0);
   G__memfunc_setup("MakeDateTimeString",1794,G__G__FairDBDict_194_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - timeStamp", (char*)NULL, (void*) G__func2void( (TString (*)(const ValTimeStamp&))(&FairDb::MakeDateTimeString) ), 0);
   G__memfunc_setup("MakeTimeStamp",1298,G__G__FairDBDict_194_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - sqlDateTime G - 'Bool_t' 0 '0' ok", (char*)NULL, (void*) G__func2void( (ValTimeStamp (*)(const string&, Bool_t*))(&FairDb::MakeTimeStamp) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const Int_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"H - 'UInt_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const UInt_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"S - 'Short_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const Short_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"R - 'UShort_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const UShort_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"G - 'Bool_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const Bool_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const Float_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const Double_t*, Int_t))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("StreamAsString",1431,G__G__FairDBDict_194_0_14, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 10 - obj i - 'Int_t' 1 - size", (char*)NULL, (void*) G__func2void( (TString (*)(const TObject*, Int_t&))(&FairDb::StreamAsString) ), 0);
   G__memfunc_setup("SetLogLevel",1094,G__G__FairDBDict_194_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&FairDb::SetLogLevel) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbException(void) {
   /* FairDbException */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException));
   G__memfunc_setup("FairDbException",1495,G__G__FairDBDict_201_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' msg i - 'Int_t' 0 '-1' code "
"i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbException",1495,G__G__FairDBDict_201_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException), -1, 0, 2, 1, 1, 0, 
"u 'TSQLServer' - 11 - server i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbException",1495,G__G__FairDBDict_201_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException), -1, 0, 2, 1, 1, 0, 
"u 'TSQLStatement' - 11 - statement i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbException",1495,G__G__FairDBDict_201_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException), -1, 0, 1, 1, 1, 0, "u 'FairDbException' - 11 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMessage",997,G__G__FairDBDict_201_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorCode",1189,G__G__FairDBDict_201_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbType",872,G__G__FairDBDict_201_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_201_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbException::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_201_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbException::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_201_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbException::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_201_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbException::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_201_0_12, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_201_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_201_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_201_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_201_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbException::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_201_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbException::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_201_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbException::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_201_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbException::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbException", 1621, G__G__FairDBDict_201_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_201_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbException), -1, 1, 1, 1, 1, 0, "u 'FairDbException' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbExceptionLog(void) {
   /* FairDbExceptionLog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog));
   G__memfunc_setup("FairDbExceptionLog",1785,G__G__FairDBDict_204_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 0, 1, 1, 1, 0, "U 'FairDbException' - 10 '0' e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__G__FairDBDict_204_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__G__FairDBDict_204_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR), G__defined_typename("vector<FairDbException>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__FairDBDict_204_0_4, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Size",411,G__G__FairDBDict_204_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__G__FairDBDict_204_0_6, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'FairDbExceptionLog' - 1 - that h - 'UInt_t' 0 '0' start", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLog",555,G__G__FairDBDict_204_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbExceptionLog' - 11 - el", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__G__FairDBDict_204_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbException' - 11 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__G__FairDBDict_204_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - errMsg i - 'Int_t' 0 '-1' code "
"i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__G__FairDBDict_204_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - errMsg i - 'Int_t' 0 '-1' code "
"i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__G__FairDBDict_204_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TSQLServer' - 11 - server i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__G__FairDBDict_204_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TSQLStatement' - 11 - statement i - 'Int_t' 0 '-1' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_204_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGELog",718,G__G__FairDBDict_204_0_14, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbExceptionLog& (*)())(&FairDbExceptionLog::GetGELog) ), 0);
   G__memfunc_setup("GetGlobalErrorLog",1693,G__G__FairDBDict_204_0_15, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbExceptionLog& (*)())(&FairDbExceptionLog::GetGlobalErrorLog) ), 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_204_0_16, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbExceptionLog::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_204_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExceptionLog::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_204_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbExceptionLog::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_204_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbExceptionLog::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_204_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_204_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_204_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_204_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_204_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExceptionLog::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_204_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbExceptionLog::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_204_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExceptionLog::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_204_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbExceptionLog::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbExceptionLog", 1785, G__G__FairDBDict_204_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 0, 1, 1, 1, 0, "u 'FairDbExceptionLog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbExceptionLog", 1911, G__G__FairDBDict_204_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_204_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 1, 1, 1, 0, "u 'FairDbExceptionLog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConnection(void) {
   /* FairDbConnection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection));
   G__memfunc_setup("FairDbConnection",1592,G__G__FairDBDict_224_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 '\"\"' url u 'string' - 11 '\"\"' user "
"u 'string' - 11 '\"\"' password", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbType",872,G__G__FairDBDict_224_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbName",839,G__G__FairDBDict_224_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPassword",1139,G__G__FairDBDict_224_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUrl",595,G__G__FairDBDict_224_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUser",703,G__G__FairDBDict_224_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__FairDBDict_224_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' force", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_224_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServer",919,G__G__FairDBDict_224_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLServer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreatePreparedStatement",2364,G__G__FairDBDict_224_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLStatement), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTemporary",1151,G__G__FairDBDict_224_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableExists",1128,G__G__FairDBDict_224_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTableExists",1428,G__G__FairDBDict_224_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 '\"\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__FairDBDict_224_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisConnect",1002,G__G__FairDBDict_224_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConnectStatement",1663,G__G__FairDBDict_224_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisConnectStatement",1951,G__G__FairDBDict_224_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPermanent",1238,G__G__FairDBDict_224_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' permanent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsClosed",790,G__G__FairDBDict_224_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExceptionLog",1521,G__G__FairDBDict_224_0_20, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearExceptionLog",1720,G__G__FairDBDict_224_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintExceptionLog",1758,G__G__FairDBDict_224_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '3' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecordException",1550,G__G__FairDBDict_224_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefreshExistingTables",2165,G__G__FairDBDict_224_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseIdleConnection",1924,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConnection",1592,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection), -1, 0, 1, 1, 2, 0, "u 'FairDbConnection' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection), -1, 0, 1, 1, 2, 0, "u 'FairDbConnection' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_224_0_28, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConnection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_224_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_224_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConnection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_224_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConnection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_224_0_32, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_224_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_224_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_224_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_224_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_224_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_224_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_224_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConnection", 1718, G__G__FairDBDict_224_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbObjTableMap(void) {
   /* FairDbObjTableMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap));
   G__memfunc_setup("FairDbObjTableMap",1609,G__G__FairDBDict_225_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbObjTableMap",1609,G__G__FairDBDict_225_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 0, "u 'FairDbObjTableMap' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__FairDBDict_225_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 1, 1, 1, 1, 0, "u 'FairDbObjTableMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanCache",742,G__G__FairDBDict_225_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOwner",823,G__G__FairDBDict_225_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairDbResult' - 0 - owner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOwner",811,G__G__FairDBDict_225_0_6, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateObjTableMap",1653,G__G__FairDBDict_225_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIndex",792,G__G__FairDBDict_225_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - defIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_225_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairDbResultPool' - 1 - rs U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Store",525,G__G__FairDBDict_225_0_10, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'FairDbOutTableBuffer' - 1 - - U 'FairDbValRecord' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAggregateNo",1380,G__G__FairDBDict_225_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetComboNo",973,G__G__FairDBDict_225_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetComboNo",985,G__G__FairDBDict_225_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - combo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__FairDBDict_225_0_14, 105, -1, G__defined_typename("FairDb::Version"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVersion",1042,G__G__FairDBDict_225_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'FairDb::Version' 0 - vers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbEntry",984,G__G__FairDBDict_225_0_16, 105, -1, G__defined_typename("FairDb::Version"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDbEntry",996,G__G__FairDBDict_225_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogTitle",1092,G__G__FairDBDict_225_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLogTitle",1104,G__G__FairDBDict_225_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - logTitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContext",1029,G__G__FairDBDict_225_0_20, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValCondition), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - rid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTableDefinition",1809,G__G__FairDBDict_225_0_21, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 '0' alternateName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSeqNo",774,G__G__FairDBDict_225_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetValInterval",1416,G__G__FairDBDict_225_0_23, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - rid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStart",1213,G__G__FairDBDict_225_0_24, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeEnd",966,G__G__FairDBDict_225_0_25, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__FairDBDict_225_0_26, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataType",1084,G__G__FairDBDict_225_0_27, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType), G__defined_typename("DataType::DataType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Serialize",936,G__G__FairDBDict_225_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - str i - 'Int_t' 1 - p_size", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Deserialize",1137,G__G__FairDBDict_225_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - b_str", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FairDBDict_225_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbObjTableMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_225_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbObjTableMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_225_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbObjTableMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_225_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbObjTableMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_225_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_225_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbObjTableMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_225_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbObjTableMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_225_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbObjTableMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_225_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbObjTableMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbObjTableMap", 1735, G__G__FairDBDict_225_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResult(void) {
   /* FairDbResult */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult));
   G__memfunc_setup("CanReuse",790,G__G__FairDBDict_489_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CanSave",673,G__G__FairDBDict_489_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Connect",714,G__G__FairDBDict_489_0_5, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateKey",893,G__G__FairDBDict_489_0_6, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Disconnect",1034,G__G__FairDBDict_489_0_7, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,G__G__FairDBDict_489_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__G__FairDBDict_489_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumAggregates",1610,G__G__FairDBDict_489_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumClients",1314,G__G__FairDBDict_489_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumRows",1019,G__G__FairDBDict_489_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSqlQualifiers",1637,G__G__FairDBDict_489_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjTableMap",1345,G__G__FairDBDict_489_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetObjTableMapByIndex",2036,G__G__FairDBDict_489_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_489_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 9, "U 'FairDbObjTableMap' - 10 '0' row", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetValidityRecGlobal",2001,G__G__FairDBDict_489_0_17, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExtendedContext",1746,G__G__FairDBDict_489_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Owns",423,G__G__FairDBDict_489_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'FairDbObjTableMap' - 10 - table", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResultsFromDb",1324,G__G__FairDBDict_489_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableName",873,G__G__FairDBDict_489_0_21, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CanDelete",869,G__G__FairDBDict_489_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairDbResult' - 10 '0' res", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Satisfies",939,G__G__FairDBDict_489_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Satisfies",939,G__G__FairDBDict_489_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'string' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Satisfies",939,G__G__FairDBDict_489_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - - u 'string' - 11 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeRegisterKey",1303,G__G__FairDBDict_489_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RegisterKey",1134,G__G__FairDBDict_489_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_489_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbBufferFile' - 1 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCanReuse",1090,G__G__FairDBDict_489_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - reuse", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetErrorLog",1100,G__G__FairDBDict_489_0_30, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CaptureExceptionLog",1957,G__G__FairDBDict_489_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - startFrom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResultsFromDb",1624,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildLookUpTable",1586,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LookUpBuilt",1114,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTableName",1173,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetValidityRec",1420,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'FairDbValRecord' - 11 - vRec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 1, 1, 1, 4, 0, "u 'FairDbResult' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_489_0_38, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbResult::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_489_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResult::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_489_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbResult::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_489_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbResult::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_489_0_42, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_489_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_489_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_489_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_489_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResult::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_489_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResult::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_489_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResult::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_489_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResult::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbResult", 1317, G__G__FairDBDict_489_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbTableInterface(void) {
   /* FairDbTableInterface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface));
   G__memfunc_setup("GetDBProxy",968,G__G__FairDBDict_490_0_1, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnectionPool",1738,G__G__FairDBDict_490_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMetaData",1057,G__G__FairDBDict_490_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMetaValid",1175,G__G__FairDBDict_490_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRowName",985,G__G__FairDBDict_490_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableName",1161,G__G__FairDBDict_490_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCache",756,G__G__FairDBDict_490_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__G__FairDBDict_490_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 3, 1, 1, 1, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__G__FairDBDict_490_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 4, 1, 1, 1, 
"u 'string' - 11 - context i - 'FairDb::Version' 11 - task "
"u 'string' - 11 - data u 'string' - 11 - fillOpts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__G__FairDBDict_490_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 2, 1, 1, 1, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__G__FairDBDict_490_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 2, 1, 1, 1, 
"u 'FairDbValRecord' - 11 - vrec g - 'Bool_t' 0 'kTRUE' canReuse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryOverlayCreationDate",2475,G__G__FairDBDict_490_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 2, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefreshMetaData",1488,G__G__FairDBDict_490_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSqlCondition",1539,G__G__FairDBDict_490_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableExists",1128,G__G__FairDBDict_490_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbTableInterface",1953,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 0, 4, 1, 2, 0, 
"U 'FairDbConnectionPool' - 0 - cascader u 'string' - 11 - tableName "
"u 'string' - 11 - vldSuffix U 'FairDbObjTableMap' - 10 - tableRow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbTableInterface",1953,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 0, 1, 1, 4, 0, "u 'FairDbTableInterface' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 1, 4, 0, "u 'FairDbTableInterface' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanReadCache",1122,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanWriteCache",1265,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RestoreFromCache",1612,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'FairDbValRecordFactory' - 11 - factory", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveToCache",1062,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'string' - 11 - name u 'FairDbResult' - 1 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_490_0_23, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbTableInterface::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_490_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterface::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_490_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbTableInterface::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_490_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbTableInterface::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_490_0_27, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_490_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_490_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_490_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_490_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterface::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_490_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableInterface::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_490_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterface::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_490_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableInterface::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbValRecord(void) {
   /* FairDbValRecord */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord));
   G__memfunc_setup("FairDbValRecord",1450,G__G__FairDBDict_491_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' dbNo g - 'Bool_t' 0 'kTRUE' isGap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbValRecord",1450,G__G__FairDBDict_491_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbValRecord",1450,G__G__FairDBDict_491_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 7, 1, 1, 0, 
"u 'ValInterval' - 11 - range i - 'FairDb::Version' 0 - task "
"i - 'Int_t' 0 - aggNo h - 'UInt_t' 0 - seqNo "
"i - 'Int_t' 0 '-1' dbNo g - 'Bool_t' 0 'kFALSE' isGap "
"u 'ValTimeStamp' - 0 'ValTimeStamp()' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__FairDBDict_491_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateObjTableMap",1653,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAggregateNo",1380,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCreationDate",1491,G__G__FairDBDict_491_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbNo",643,G__G__FairDBDict_491_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInsertDate",1299,G__G__FairDBDict_491_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("FairDb::Version"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCacheName",1141,G__G__FairDBDict_491_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeqNo",774,G__G__FairDBDict_491_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_491_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValInterval",1416,G__G__FairDBDict_491_0_14, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValInterval), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasExpired",1005,G__G__FairDBDict_491_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairDbValRecord' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasExpired",1005,G__G__FairDBDict_491_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompatible",1212,G__G__FairDBDict_491_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGap",468,G__G__FairDBDict_491_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCacheName",1141,G__G__FairDBDict_491_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 3, 3, 1, 0, 
"h - 'UInt_t' 0 - seqLo h - 'UInt_t' 0 - seqHi "
"u 'ValTimeStamp' - 0 - ts", (char*)NULL, (void*) G__func2void( (string (*)(UInt_t, UInt_t, ValTimeStamp))(&FairDbValRecord::GetCacheName) ), 0);
   G__memfunc_setup("AndTimeWindow",1306,G__G__FairDBDict_491_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - start u 'ValTimeStamp' - 11 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAggregateNo",1392,G__G__FairDBDict_491_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbNo",655,G__G__FairDBDict_491_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTableInterface",1701,G__G__FairDBDict_491_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairDbTableInterface' - 10 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeWindow",1331,G__G__FairDBDict_491_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - start u 'ValTimeStamp' - 11 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValInterval",1428,G__G__FairDBDict_491_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValInterval' - 11 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trim",412,G__G__FairDBDict_491_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - queryTime u 'FairDbValRecord' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairDbResultPool' - 1 - rs U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Store",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"u 'FairDbOutTableBuffer' - 1 - ors U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_491_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbBufferFile' - 1 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_491_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbValRecord::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_491_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecord::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_491_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbValRecord::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_491_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbValRecord::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_491_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_491_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecord::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_491_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecord::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_491_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecord::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_491_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecord::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbValRecord", 1576, G__G__FairDBDict_491_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbCache(void) {
   /* FairDbCache */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache));
   G__memfunc_setup("FairDbCache",1020,G__G__FairDBDict_493_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache), -1, 0, 2, 1, 1, 0, 
"u 'FairDbTableInterface' - 1 - qp u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxSize",993,G__G__FairDBDict_493_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurSize",997,G__G__FairDBDict_493_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAccepted",1385,G__G__FairDBDict_493_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumReused",1208,G__G__FairDBDict_493_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Search",598,G__G__FairDBDict_493_0_6, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 2, 1, 1, 9, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Search",598,G__G__FairDBDict_493_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 1, 1, 1, 9, "u 'string' - 11 - sqlQualifiers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Search",598,G__G__FairDBDict_493_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 2, 1, 1, 9, 
"u 'FairDbValRecord' - 11 - vr u 'string' - 11 '\"\"' sqlQualifiers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowStatistics",1484,G__G__FairDBDict_493_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogStream), -1, 1, 1, 1, 1, 8, "u 'FairDbLogStream' - 1 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Accept",592,G__G__FairDBDict_493_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'FairDbResult' - 0 - res g - - 0 'true' registerKey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Purge",515,G__G__FairDBDict_493_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStale",805,G__G__FairDBDict_493_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatic",916,G__G__FairDBDict_493_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbCache",1020,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache), -1, 0, 1, 1, 4, 0, "u 'FairDbCache' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbCache), -1, 1, 1, 1, 4, 0, "u 'FairDbCache' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSubCache",1054,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR), G__defined_typename("FairDbCache::ResultList_t"), 0, 1, 1, 4, 9, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Purge",515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'list<FairDbResult*,allocator<FairDbResult*> >' 'FairDbCache::ResultList_t' 1 - subCache U 'FairDbResult' - 10 '0' res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_493_0_18, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbCache::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_493_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbCache::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_493_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbCache::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_493_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbCache::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_493_0_22, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_493_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_493_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_493_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_493_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbCache::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_493_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbCache::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_493_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbCache::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_493_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbCache::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbCache", 1146, G__G__FairDBDict_493_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistry(void) {
   /* FairRegistry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry));
   G__memfunc_setup("FairRegistry",1243,G__G__FairDBDict_505_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 0, 1, 5, 1, 0, "g - - 0 'true' readonly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRegistry",1243,G__G__FairDBDict_505_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 0, 1, 1, 1, 0, "u 'FairRegistry' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__FairDBDict_505_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 1, 1, 1, 1, 0, "u 'FairRegistry' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__G__FairDBDict_505_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairRegistry' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Size",411,G__G__FairDBDict_505_0_5, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KeyExists",937,G__G__FairDBDict_505_0_6, 103, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveKey",919,G__G__FairDBDict_505_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,G__G__FairDBDict_505_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,G__G__FairDBDict_505_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("PrettyPrint",1173,G__G__FairDBDict_505_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ValuesLocked",1218,G__G__FairDBDict_505_0_15, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LockValues",1017,G__G__FairDBDict_505_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLockValues",1212,G__G__FairDBDict_505_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KeysLocked",1006,G__G__FairDBDict_505_0_18, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LockKeys",805,G__G__FairDBDict_505_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLockKeys",1000,G__G__FairDBDict_505_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDirty",824,G__G__FairDBDict_505_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' is_dirty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDirty",712,G__G__FairDBDict_505_0_22, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrorHandler",1524,G__G__FairDBDict_505_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "Y - 'FairRegistry::ErrorHandler' 0 - eh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_505_0_24, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - key c - - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_505_0_25, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - key C - - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_505_0_26, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - key i - - 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_505_0_27, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - key d - - 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_505_0_28, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - key u 'FairRegistry' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__FairDBDict_505_0_29, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 1, 1, 1, 9, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTypeAsString",1517,G__G__FairDBDict_505_0_30, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValueAsString",1608,G__G__FairDBDict_505_0_31, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChar",670,G__G__FairDBDict_505_0_32, 99, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharString",1301,G__G__FairDBDict_505_0_33, 67, -1, -1, 0, 1, 1, 1, 9, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInt",587,G__G__FairDBDict_505_0_34, 105, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDouble",891,G__G__FairDBDict_505_0_35, 100, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFairRegistry",1531,G__G__FairDBDict_505_0_36, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 0, 1, 1, 1, 8, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_505_0_37, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_505_0_38, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_505_0_39, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_505_0_40, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_505_0_41, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key u 'FairRegistry' - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Key",297,G__G__FairDBDict_505_0_42, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistrycLcLFairRegistryKey), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_505_0_43, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_505_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_505_0_45, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_505_0_46, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_505_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_505_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_505_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_505_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_505_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistry::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistry", 1369, G__G__FairDBDict_505_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElement(void) {
   /* FairRegistryElement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement));
   G__memfunc_setup("Dup",297,G__G__FairDBDict_507_0_2, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PrintStream",1145,G__G__FairDBDict_507_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ReadStream",1000,G__G__FairDBDict_507_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetType",706,G__G__FairDBDict_507_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTypeAsString",1517,G__G__FairDBDict_507_0_7, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__FairDBDict_507_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_507_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_507_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_507_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_507_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_507_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_507_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_507_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_507_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElement::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElement", 2083, G__G__FairDBDict_507_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_507_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 1, 1, 1, 1, 0, "u 'FairRegistryElement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConfigurable(void) {
   /* FairDbConfigurable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigurable));
   G__memfunc_setup("Config",598,G__G__FairDBDict_517_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DefaultConfig",1307,G__G__FairDBDict_517_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConfig",886,G__G__FairDBDict_517_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfig",886,G__G__FairDBDict_517_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__G__FairDBDict_517_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_517_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairDbConfigNotice' - 0 '0' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_517_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CommitDefaultConfig",1924,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'FairRegistry' - 11 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FairDBDict_517_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConfigurable::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_517_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigurable::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_517_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConfigurable::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_517_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConfigurable::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_517_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_517_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_517_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_517_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_517_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigurable::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_517_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigurable::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_517_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigurable::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_517_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigurable::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConfigurable", 1911, G__G__FairDBDict_517_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_517_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigurable), -1, 1, 1, 1, 1, 0, "u 'FairDbConfigurable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbStreamer(void) {
   /* FairDbStreamer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer));
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 10 - obj i 'FairDb::DataTypes' - 0 'FairDb::kBinary' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"I - 'Int_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"H - 'UInt_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"S - 'Short_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"R - 'UShort_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"G - 'Bool_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_8, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_9, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - iarr i - 'Int_t' 0 - size "
"i 'FairDb::DataTypes' - 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbStreamer",1387,G__G__FairDBDict_518_0_10, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 0, 1, 1, 1, 0, "u 'FairDbStreamer' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__FairDBDict_518_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStreamer), -1, 1, 1, 1, 1, 0, "u 'FairDbStreamer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_518_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetString",931,G__G__FairDBDict_518_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - aStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__FairDBDict_518_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataType",1084,G__G__FairDBDict_518_0_15, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDataTypes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "H - 'UInt_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "S - 'Short_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_518_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_518_0_24, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbStreamer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_518_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStreamer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_518_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbStreamer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_518_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbStreamer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_518_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_518_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStreamer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_518_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStreamer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_518_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStreamer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_518_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStreamer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbStreamer", 1513, G__G__FairDBDict_518_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbOutTableBuffer(void) {
   /* FairDbOutTableBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer));
   G__memfunc_setup("FairDbOutTableBuffer",1954,G__G__FairDBDict_519_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 0, 1, 1, 1, 0, "U 'FairDbTableMetaData' - 10 - metaData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasGoodData",1055,G__G__FairDBDict_519_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCSV",524,G__G__FairDBDict_519_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsComplete",1013,G__G__FairDBDict_519_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "g - 'Bool_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "c - 'Char_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "C - 'Char_t' 10 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "s - 'Short_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "r - 'UShort_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "f - 'Float_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_14, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_15, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_519_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbOutTableBuffer), -1, 1, 1, 1, 1, 0, "u 'FairDbStreamer' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_519_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Store",525,G__G__FairDBDict_519_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreDefaultIfInvalid",2120,G__G__FairDBDict_519_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'FairDb::DataTypes' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_519_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbOutTableBuffer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_519_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbOutTableBuffer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_519_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbOutTableBuffer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_519_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbOutTableBuffer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_519_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_519_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbOutTableBuffer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_519_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbOutTableBuffer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_519_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbOutTableBuffer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_519_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbOutTableBuffer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbOutTableBuffer", 2080, G__G__FairDBDict_519_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResultPool(void) {
   /* FairDbResultPool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool));
   G__memfunc_setup("FairDbResultPool",1601,G__G__FairDBDict_520_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 6, 1, 1, 0, 
"U 'FairDbStatement' - 0 - stmtDb u 'FairDbString' - 11 - sql "
"U 'FairDbTableMetaData' - 10 - metaData U 'FairDbTableInterface' - 10 - tableProxy "
"h - 'UInt_t' 0 - dbNo u 'string' - 11 '\"\"' fillOpts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CurColExists",1224,G__G__FairDBDict_520_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CurColString",1215,G__G__FairDBDict_520_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CurColValue",1093,G__G__FairDBDict_520_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CurRowNum",914,G__G__FairDBDict_520_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentRowNo",1528,G__G__FairDBDict_520_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbNo",643,G__G__FairDBDict_520_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDBType",840,G__G__FairDBDict_520_0_8, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFillOpts",1101,G__G__FairDBDict_520_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_520_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBeforeFirst",1303,G__G__FairDBDict_520_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExhausted",1127,G__G__FairDBDict_520_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompleted",1113,G__G__FairDBDict_520_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RowAsCsv",792,G__G__FairDBDict_520_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 1 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_15, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "g - 'Bool_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "c - 'Char_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_17, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "s - 'Short_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "r - 'UShort_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_20, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_21, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "l - 'Long_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_22, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "k - 'ULong_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_23, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "f - 'Float_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_24, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_25, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "u 'string' - 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_26, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "u 'ValTimeStamp' - 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_520_0_27, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 1, 1, 1, 1, 0, "u 'FairDbStreamer' - 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FetchRow",802,G__G__FairDBDict_520_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 1, 1, 4, 0, "i 'FairDb::DataTypes' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadCurValue",1191,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringFromTSQL",1647,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TString), -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbResultPool",1601,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 1, 1, 4, 0, "u 'FairDbResultPool' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 1, 1, 4, 0, "u 'FairDbResultPool' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_520_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbResultPool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_520_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultPool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_520_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbResultPool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_520_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbResultPool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_520_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_520_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultPool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_520_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultPool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_520_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultPool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_520_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultPool::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbResultPool", 1727, G__G__FairDBDict_520_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbFieldType(void) {
   /* FairDbFieldType */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType));
   G__memfunc_setup("FairDbFieldType",1454,G__G__FairDBDict_521_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 'FairDb::kInt' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbFieldType",1454,G__G__FairDBDict_521_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - size "
"C - - 10 - typeName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbFieldType",1454,G__G__FairDBDict_521_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 0, 1, 1, 1, 0, "u 'FairDbFieldType' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbFieldType",1454,G__G__FairDBDict_521_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - sql i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_521_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsSQLString",1051,G__G__FairDBDict_521_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "i 'FairDb::DbTypes' - 0 'FairDb::kMySQL' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UndefinedValue",1423,G__G__FairDBDict_521_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConcept",1004,G__G__FairDBDict_521_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__FairDBDict_521_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__FairDBDict_521_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompatible",1212,G__G__FairDBDict_521_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairDbFieldType' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEquivalent",1242,G__G__FairDBDict_521_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairDbFieldType' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,G__G__FairDBDict_521_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairDbFieldType' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSmaller",908,G__G__FairDBDict_521_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'FairDbFieldType' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSigned",790,G__G__FairDBDict_521_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnsigned",1129,G__G__FairDBDict_521_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 '-1' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_521_0_18, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbFieldType::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_521_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbFieldType::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_521_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbFieldType::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_521_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbFieldType::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_521_0_22, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_521_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_521_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_521_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_521_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbFieldType::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_521_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbFieldType::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_521_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbFieldType::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_521_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbFieldType::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbFieldType", 1580, G__G__FairDBDict_521_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_521_0_31, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 1, 1, 1, 0, "u 'FairDbFieldType' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConfigData(void) {
   /* FairDbConfigData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData));
   G__memfunc_setup("FairDbConfigData",1528,G__G__FairDBDict_523_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateObjTableMap",1653,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAggregateNo",1380,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumParams",1204,G__G__FairDBDict_523_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamName",1170,G__G__FairDBDict_523_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - parNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamType",1203,G__G__FairDBDict_523_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - parNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamValue",1294,G__G__FairDBDict_523_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - parNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PushBack",785,G__G__FairDBDict_523_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - value "
"u 'FairDbFieldType' - 11 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAggregateNo",1392,G__G__FairDBDict_523_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairDbResultPool' - 1 - rs U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Store",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"u 'FairDbOutTableBuffer' - 1 - ors U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairDbConfigData",1528,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 0, 1, 1, 4, 0, "u 'FairDbConfigData' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_523_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConfigData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_523_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_523_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConfigData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_523_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConfigData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_523_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_523_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_523_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_523_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_523_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConfigData", 1654, G__G__FairDBDict_523_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_523_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 1, 1, 1, 1, 0, "u 'FairDbConfigData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbTableMetaData(void) {
   /* FairDbTableMetaData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData));
   G__memfunc_setup("FairDbTableMetaData",1809,G__G__FairDBDict_529_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 0, 1, 1, 1, 0, "u 'string' - 11 '\"Unknown\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sql",304,G__G__FairDBDict_529_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "i 'FairDb::DbTypes' - 0 'FairDb::kMySQL' dbType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableName",873,G__G__FairDBDict_529_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRowCounter",1332,G__G__FairDBDict_529_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumCols",705,G__G__FairDBDict_529_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColFieldType",1188,G__G__FairDBDict_529_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColFieldConcept",1486,G__G__FairDBDict_529_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColIsNullable",1289,G__G__FairDBDict_529_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColMustDelimit",1423,G__G__FairDBDict_529_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColName",671,G__G__FairDBDict_529_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFromSql",1008,G__G__FairDBDict_529_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - sql i 'FairDb::DbTypes' - 0 - dbtype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColIsNullable",1589,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - colNum g - 'Bool_t' 0 'true' isNullable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColName",971,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'string' - 11 - name i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColFieldType",1488,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'FairDbFieldType' - 11 - type i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetToken",801,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 3, 4, 0, "C - - 11 - strPtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExpandTo",803,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "h - 'UInt_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAttributes",1351,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes), -1, 1, 1, 1, 4, 9, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAttributes",1363,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes), -1, 1, 1, 1, 4, 0, "i - 'Int_t' 0 - colNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_529_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbTableMetaData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_529_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableMetaData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_529_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbTableMetaData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_529_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbTableMetaData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_529_0_24, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_529_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_529_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_529_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_529_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableMetaData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_529_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableMetaData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_529_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableMetaData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_529_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableMetaData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbTableMetaData", 1809, G__G__FairDBDict_529_0_32, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 0, 1, 1, 1, 0, "u 'FairDbTableMetaData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbTableMetaData", 1935, G__G__FairDBDict_529_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_529_0_34, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 1, 1, 1, 1, 0, "u 'FairDbTableMetaData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbProxy(void) {
   /* FairDbProxy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy));
   G__memfunc_setup("FairDbProxy",1098,G__G__FairDBDict_530_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy), -1, 0, 5, 1, 1, 0, 
"u 'FairDbConnectionPool' - 1 - cascader u 'string' - 11 - tableName "
"U 'FairDbTableMetaData' - 10 - metaData U 'FairDbTableMetaData' - 10 - metaValid "
"U 'FairDbTableInterface' - 10 - tableProxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumDb",758,G__G__FairDBDict_530_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableName",1161,G__G__FairDBDict_530_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_530_0_4, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateMetaData",1365,G__G__FairDBDict_530_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'FairDbTableMetaData' - 1 - metaData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableExists",1128,G__G__FairDBDict_530_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '-1' selectDbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTimeLimits",1410,G__G__FairDBDict_530_0_7, 121, -1, -1, 0, 6, 1, 1, 8, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task "
"h - 'UInt_t' 0 - dbNo u 'ValTimeStamp' - 0 - earliestCreate "
"u 'ValTimeStamp' - 1 - start u 'ValTimeStamp' - 1 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryAllValidities",1853,G__G__FairDBDict_530_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - dbNo h - 'UInt_t' 0 '0' seqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QuerySeqNo",1020,G__G__FairDBDict_530_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryValidity",1372,G__G__FairDBDict_530_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 3, 1, 1, 8, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 11 - task "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryValidity",1372,G__G__FairDBDict_530_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 3, 1, 1, 8, 
"u 'string' - 11 - context i - 'FairDb::Version' 11 - task "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryValidity",1372,G__G__FairDBDict_530_0_12, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultPool), -1, 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceInsertDate",1711,G__G__FairDBDict_530_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'ValTimeStamp' - 11 - ts h - 'UInt_t' 0 - SeqNo "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveSeqNo",1108,G__G__FairDBDict_530_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceSeqNo",1186,G__G__FairDBDict_530_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"h - 'UInt_t' 0 - oldSeqNo h - 'UInt_t' 0 - newSeqNo "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSqlCondition",1539,G__G__FairDBDict_530_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceSeqNoOracle",1784,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"h - 'UInt_t' 0 - oldSeqNo h - 'UInt_t' 0 - newSeqNo "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbProxy",1098,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy), -1, 0, 1, 1, 4, 0, "u 'FairDbProxy' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbProxy), -1, 1, 1, 1, 4, 0, "u 'FairDbProxy' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_530_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbProxy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_530_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbProxy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_530_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbProxy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_530_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbProxy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_530_0_24, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_530_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_530_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_530_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_530_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbProxy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_530_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbProxy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_530_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbProxy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_530_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbProxy::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbProxy", 1224, G__G__FairDBDict_530_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbStatement(void) {
   /* FairDbStatement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement));
   G__memfunc_setup("FairDbStatement",1501,G__G__FairDBDict_537_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement), -1, 0, 1, 1, 1, 0, "u 'FairDbConnection' - 1 - conDb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDBType",840,G__G__FairDBDict_537_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbcLcLDbTypes), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestTranslateSQL",1598,G__G__FairDBDict_537_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR), G__defined_typename("list<TString>"), 0, 2, 1, 1, 0, 
"u 'TString' - 11 - sql i 'FairDb::DbTypes' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteQuery",1257,G__G__FairDBDict_537_0_4, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLStatement), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 '\"\"' sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteUpdate",1334,G__G__FairDBDict_537_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 '\"\"' sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Commit",617,G__G__FairDBDict_537_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintExceptions",1583,G__G__FairDBDict_537_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '3' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExceptionLog",1521,G__G__FairDBDict_537_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExceptionLog), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AppendExceptionLog",1833,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'FairDbException' - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AppendExceptionLog",1833,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TSQLStatement' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AppendExceptionLog",1833,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'FairDbConnection' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearExceptionLog",1720,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateProcessedStatement",2481,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TSQLStatement), -1, 0, 1, 1, 4, 0, "u 'TString' - 11 '\"\"' sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TranslateSQL",1182,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR), G__defined_typename("list<TString>"), 0, 1, 1, 4, 0, "u 'TString' - 11 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_537_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbStatement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_537_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStatement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_537_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbStatement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_537_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbStatement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_537_0_19, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_537_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_537_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_537_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_537_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStatement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_537_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStatement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_537_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStatement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_537_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStatement::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbStatement", 1501, G__G__FairDBDict_537_0_27, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement), -1, 0, 1, 1, 1, 0, "u 'FairDbStatement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbStatement", 1627, G__G__FairDBDict_537_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConnectionPool(void) {
   /* FairDbConnectionPool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool));
   G__memfunc_setup("CreateStatement",1545,G__G__FairDBDict_538_0_1, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStatement), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnection",1328,G__G__FairDBDict_538_0_2, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnection",1328,G__G__FairDBDict_538_0_3, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnection), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbName",839,G__G__FairDBDict_538_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbNo",643,G__G__FairDBDict_538_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - dbName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__FairDBDict_538_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusAsString",1743,G__G__FairDBDict_538_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetURL",531,G__G__FairDBDict_538_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTemporaryTable",1639,G__G__FairDBDict_538_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - tableName i - 'Int_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllocateSeqNo",1291,G__G__FairDBDict_538_0_10, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"u 'string' - 11 - tableName i - 'Int_t' 0 '0' requireGlobal "
"i - 'Int_t' 0 '0' dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAuthorisingDbNo",1808,G__G__FairDBDict_538_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumDb",758,G__G__FairDBDict_538_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableDbNo",1131,G__G__FairDBDict_538_0_13, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - tableName i - 'Int_t' 0 '-1' selectDbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableExists",1128,G__G__FairDBDict_538_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - tableName i - 'Int_t' 0 '-1' selectDbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateTemporaryTable",2047,G__G__FairDBDict_538_0_15, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'string' - 11 - tableName u 'string' - 11 - tableDescr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateTransientTable",2036,G__G__FairDBDict_538_0_16, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'string' - 11 - tableName u 'string' - 11 - tableDescr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HoldConnections",1546,G__G__FairDBDict_538_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReleaseConnections",1860,G__G__FairDBDict_538_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPermanent",1238,G__G__FairDBDict_538_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - dbNo g - 'Bool_t' 0 'true' permanent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HoldConnectionAt",1612,G__G__FairDBDict_538_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - dbNo g - 'Bool_t' 0 'true' permanent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConnectionPool",2002,G__G__FairDBDict_538_0_21, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConnectionPool",2002,G__G__FairDBDict_538_0_22, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool), -1, 0, 1, 1, 1, 0, "u 'FairDbConnectionPool' - 11 - conn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAuthorisingEntry",1995,G__G__FairDBDict_538_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAuthorisingEntry",1983,G__G__FairDBDict_538_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReserveNextSeqNo",1633,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 8, 
"u 'string' - 11 - tableName g - 'Bool_t' 0 - isGlobal "
"h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_538_0_26, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConnectionPool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_538_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionPool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_538_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConnectionPool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_538_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConnectionPool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_538_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_538_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_538_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_538_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_538_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionPool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_538_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnectionPool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_538_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionPool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_538_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnectionPool::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConnectionPool", 2128, G__G__FairDBDict_538_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_538_0_39, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool), -1, 1, 1, 1, 1, 0, "u 'FairDbConnectionPool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbTableBuffer(void) {
   /* FairDbTableBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer));
   G__memfunc_setup("FairDbTableBuffer",1642,G__G__FairDBDict_545_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer), -1, 0, 1, 1, 1, 0, "U 'FairDbTableMetaData' - 10 - metaData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColFieldType",1188,G__G__FairDBDict_545_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetColumnFieldType",1812,G__G__FairDBDict_545_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ColName",671,G__G__FairDBDict_545_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetColumnName",1295,G__G__FairDBDict_545_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CurColFieldType",1486,G__G__FairDBDict_545_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrrentColumnFieldType",2665,G__G__FairDBDict_545_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbFieldType), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CurColName",969,G__G__FairDBDict_545_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentColumnName",2034,G__G__FairDBDict_545_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CurColNum",888,G__G__FairDBDict_545_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentColumnNo",1838,G__G__FairDBDict_545_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasRowCounter",1332,G__G__FairDBDict_545_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRowId",769,G__G__FairDBDict_545_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumCols",705,G__G__FairDBDict_545_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumOfColumns",1510,G__G__FairDBDict_545_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TableName",873,G__G__FairDBDict_545_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTableName",1161,G__G__FairDBDict_545_0_17, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TableNameTc",1056,G__G__FairDBDict_545_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTableNameTc",1344,G__G__FairDBDict_545_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MetaData",769,G__G__FairDBDict_545_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableMetaData), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DecrementCurCol",1503,G__G__FairDBDict_545_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPreviousCurrentColumn",2510,G__G__FairDBDict_545_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IncrementCurCol",1517,G__G__FairDBDict_545_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNextCurrentColumn",2064,G__G__FairDBDict_545_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearCurCol",1071,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetCurrentColumn",1876,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairDbTableBuffer",1642,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer), -1, 0, 1, 1, 4, 0, "u 'FairDbTableBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableBuffer), -1, 0, 1, 1, 4, 0, "u 'FairDbTableBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_545_0_29, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbTableBuffer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_545_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableBuffer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_545_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbTableBuffer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_545_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbTableBuffer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_545_0_33, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_545_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_545_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_545_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_545_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableBuffer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_545_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableBuffer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_545_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableBuffer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_545_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableBuffer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbTableBuffer", 1768, G__G__FairDBDict_545_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbString(void) {
   /* FairDbString */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString));
   G__memfunc_setup("FairDbString",1183,G__G__FairDBDict_546_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbString",1183,G__G__FairDBDict_546_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbString",1183,G__G__FairDBDict_546_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("c_str",539,G__G__FairDBDict_546_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetString",919,G__G__FairDBDict_546_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "f - 'Float_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "c - 'Char_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "C - 'Char_t' 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_546_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_546_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetString",919,G__G__FairDBDict_546_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_546_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbString::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_546_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbString::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_546_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbString::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_546_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbString::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_546_0_18, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_546_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_546_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_546_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_546_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbString::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_546_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbString::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_546_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbString::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_546_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbString::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbString", 1183, G__G__FairDBDict_546_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 0, 1, 1, 1, 0, "u 'FairDbString' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbString", 1309, G__G__FairDBDict_546_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_546_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbString), -1, 1, 1, 1, 1, 0, "u 'FairDbString' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbValRecordFactory(void) {
   /* FairDbValRecordFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory));
   G__memfunc_setup("FairDbValRecordFactory",2178,G__G__FairDBDict_547_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory), -1, 0, 5, 1, 1, 0, 
"u 'FairDbProxy' - 11 - proxy u 'ValCondition' - 11 - vc "
"i - 'FairDb::Version' 11 - task i - 'Int_t' 0 '-1' selectDbNo "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbValRecordFactory",2178,G__G__FairDBDict_547_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory), -1, 0, 3, 1, 1, 0, 
"u 'FairDbProxy' - 11 - proxy u 'string' - 11 - context "
"i - 'FairDb::Version' 11 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbValRecordFactory",2178,G__G__FairDBDict_547_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory), -1, 0, 2, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vr u 'string' - 10 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCacheName",1141,G__G__FairDBDict_547_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__FairDBDict_547_0_5, 105, -1, G__defined_typename("FairDb::Version"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumValidityRec",1712,G__G__FairDBDict_547_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IndexOfAggno",1177,G__G__FairDBDict_547_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExtendedContext",1746,G__G__FairDBDict_547_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_547_0_9, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - rowNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRecFromAggNo",2272,G__G__FairDBDict_547_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRecFromSeqNo",2298,G__G__FairDBDict_547_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - SeqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NonAggregated",1302,G__G__FairDBDict_547_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewAgg",834,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 4, 0, 
"u 'FairDbValRecord' - 11 - vrec i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewGap",843,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeGapRec",944,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'ValCondition' - 11 - vc u 'string' - 11 - tableName "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_547_0_16, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbValRecordFactory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_547_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordFactory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_547_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbValRecordFactory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_547_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbValRecordFactory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_547_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_547_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_547_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_547_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_547_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordFactory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_547_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecordFactory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_547_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordFactory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_547_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecordFactory::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbValRecordFactory", 2178, G__G__FairDBDict_547_0_28, (int) ('i'), 
G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordFactory), -1, 0, 1, 1, 1, 0, "u 'FairDbValRecordFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbValRecordFactory", 2304, G__G__FairDBDict_547_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResultKey(void) {
   /* FairDbResultKey */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey));
   G__memfunc_setup("FairDbResultKey",1488,G__G__FairDBDict_548_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 1, 1, 1, 0, "U 'FairDbResultKey' - 10 '0' that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbResultKey",1488,G__G__FairDBDict_548_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 4, 1, 1, 0, 
"u 'string' - 0 - tableName u 'string' - 0 - rowName "
"h - 'UInt_t' 0 - seqno u 'ValTimeStamp' - 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__G__FairDBDict_548_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,G__G__FairDBDict_548_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'FairDbResultKey' - 10 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEmptyKey",1112,G__G__FairDBDict_548_0_5, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const FairDbResultKey* (*)())(&FairDbResultKey::GetEmptyKey) ), 0);
   G__memfunc_setup("GetNumVrecs",1107,G__G__FairDBDict_548_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjTableMapName",1730,G__G__FairDBDict_548_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqualTo",887,G__G__FairDBDict_548_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'FairDbResultKey' - 10 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVRecKey",930,G__G__FairDBDict_548_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - seqno u 'ValTimeStamp' - 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_548_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbResultKey::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_548_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultKey::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_548_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbResultKey::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_548_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbResultKey::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_548_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_548_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultKey::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_548_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultKey::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_548_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultKey::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_548_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultKey::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbResultKey", 1488, G__G__FairDBDict_548_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 1, 1, 1, 0, "u 'FairDbResultKey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbResultKey", 1614, G__G__FairDBDict_548_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_548_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 1, 1, 1, 1, 0, "u 'FairDbResultKey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResultKeycLcLVRecKey(void) {
   /* FairDbResultKey::VRecKey */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey));
   G__memfunc_setup("VRecKey",665,G__G__FairDBDict_549_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VRecKey",665,G__G__FairDBDict_549_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - seqno u 'ValTimeStamp' - 0 - ts", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("VRecKey", 665, G__G__FairDBDict_549_0_3, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey), -1, 0, 1, 1, 1, 0, "u 'FairDbResultKey::VRecKey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~VRecKey", 791, G__G__FairDBDict_549_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_549_0_5, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey), -1, 1, 1, 1, 1, 0, "u 'FairDbResultKey::VRecKey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResultCombo(void) {
   /* FairDbResultCombo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo));
   G__memfunc_setup("FairDbResultCombo",1687,G__G__FairDBDict_563_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo), -1, 0, 6, 1, 1, 0, 
"u 'string' - 11 '\"Unknown\"' tableName U 'FairDbObjTableMap' - 10 '0' tableRow "
"U 'FairDbCache' - 0 '0' cache U 'FairDbValRecordFactory' - 10 '0' vrecFactory "
"U 'FairDbProxy' - 10 '0' proxy u 'string' - 11 '\"\"' sqlQualifiers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateKey",893,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumAggregates",1610,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumRows",1019,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjTableMap",1345,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - row", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetValidityRec",1408,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 1, 1, 1, 9, "U 'FairDbObjTableMap' - 10 '0' row", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Satisfies",939,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'string' - 11 - sqlQualifiers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbBufferFile' - 1 - bf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FairDBDict_563_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbResultCombo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_563_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultCombo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_563_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbResultCombo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_563_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbResultCombo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_563_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_563_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultCombo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_563_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultCombo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_563_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultCombo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_563_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultCombo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbResultCombo", 1687, G__G__FairDBDict_563_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultCombo), -1, 0, 1, 1, 1, 0, "u 'FairDbResultCombo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbResultCombo", 1813, G__G__FairDBDict_563_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbResultNonCombo(void) {
   /* FairDbResultNonCombo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo));
   G__memfunc_setup("FairDbResultNonCombo",1986,G__G__FairDBDict_572_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo), -1, 0, 5, 1, 1, 0, 
"U 'FairDbResultPool' - 0 '0' resultSet U 'FairDbObjTableMap' - 10 '0' tableRow "
"U 'FairDbValRecord' - 10 '0' vrec g - 'Bool_t' 0 'kTRUE' dropSeqNo "
"u 'string' - 11 '\"\"' sqlQualifiers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateKey",893,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumAggregates",1610,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumRows",1019,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjTableMap",1345,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjTableMapByIndex",2036,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Owns",423,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'FairDbObjTableMap' - 10 - row", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Satisfies",939,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec u 'string' - 11 '\"\"' sqlQualifiers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'FairDbBufferFile' - 1 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DebugCtor",895,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbResultNonCombo",1986,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo), -1, 0, 1, 1, 4, 0, "u 'FairDbResultNonCombo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultNonCombo), -1, 0, 1, 1, 4, 0, "u 'FairDbResultNonCombo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_572_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbResultNonCombo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_572_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultNonCombo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_572_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbResultNonCombo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_572_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbResultNonCombo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_572_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_572_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultNonCombo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_572_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultNonCombo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_572_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbResultNonCombo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_572_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbResultNonCombo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbResultNonCombo", 2112, G__G__FairDBDict_572_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbRollbackTimes(void) {
   /* FairDbRollbackTimes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes));
   G__memfunc_setup("FairDbRollbackTimes",1876,G__G__FairDBDict_573_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDate",670,G__G__FairDBDict_573_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__FairDBDict_573_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__G__FairDBDict_573_0_4, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_573_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_573_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairRegistry' - 1 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_573_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbRollbackTimes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_573_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbRollbackTimes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_573_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbRollbackTimes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_573_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbRollbackTimes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_573_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_573_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_573_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_573_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_573_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbRollbackTimes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_573_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbRollbackTimes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_573_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbRollbackTimes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_573_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbRollbackTimes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbRollbackTimes", 1876, G__G__FairDBDict_573_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes), -1, 0, 1, 1, 1, 0, "u 'FairDbRollbackTimes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbRollbackTimes", 2002, G__G__FairDBDict_573_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_573_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbRollbackTimes), -1, 1, 1, 1, 1, 0, "u 'FairDbRollbackTimes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbTableInterfaceStore(void) {
   /* FairDbTableInterfaceStore */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore));
   G__memfunc_setup("ShowStatistics",1484,G__G__FairDBDict_589_0_1, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__FairDBDict_589_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbTableInterfaceStore& (*)())(&FairDbTableInterfaceStore::Instance) ), 0);
   G__memfunc_setup("IsActive",792,G__G__FairDBDict_589_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&FairDbTableInterfaceStore::IsActive) ), 0);
   G__memfunc_setup("Config",598,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearRollbackTimes",1811,G__G__FairDBDict_589_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearDataTypeUnion",1804,G__G__FairDBDict_589_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnectionPool",1738,G__G__FairDBDict_589_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionPool), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_589_0_8, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 2, 1, 1, 0, 
"u 'string' - 11 - tableName U 'FairDbObjTableMap' - 10 - tableRow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRowCounter",1332,G__G__FairDBDict_589_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PurgeCaches",1098,G__G__FairDBDict_589_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefreshMetaData",1488,G__G__FairDBDict_589_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSqlCondition",1539,G__G__FairDBDict_589_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 '\"\"' sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerbosity",1267,G__G__FairDBDict_589_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbTableInterfaceStore",2478,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoggingStreams",1746,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConfigFromEnvironment",2475,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbTableInterfaceStore",2478,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore), -1, 0, 1, 1, 4, 0, "u 'FairDbTableInterfaceStore' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterfaceStore), -1, 1, 1, 1, 4, 0, "u 'FairDbTableInterfaceStore' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplySqlCondition",1757,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplySqlCondition",1757,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "U 'FairDbTableInterface' - 0 - proxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_589_0_21, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbTableInterfaceStore::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_589_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterfaceStore::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_589_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbTableInterfaceStore::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_589_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbTableInterfaceStore::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_589_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_589_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterfaceStore::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_589_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableInterfaceStore::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_589_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbTableInterfaceStore::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_589_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbTableInterfaceStore::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbDataTypeUnion(void) {
   /* FairDbDataTypeUnion */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion));
   G__memfunc_setup("FairDbDataTypeUnion",1869,G__G__FairDBDict_590_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__FairDBDict_590_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR), G__defined_typename("FairDbDataTypeUnion::SimList_t"), 0, 1, 1, 1, 8, "u 'DataType::EDataType' 'DataType::DataType_t' 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__FairDBDict_590_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__G__FairDBDict_590_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__FairDBDict_590_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion), -1, 1, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const FairDbDataTypeUnion& (*)())(&FairDbDataTypeUnion::Instance) ), 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_590_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_590_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'DataType::EDataType' 'DataType::DataType_t' 10 - value u 'list<DataType::EDataType,allocator<DataType::EDataType> >' 'FairDbDataTypeUnion::SimList_t' 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__FairDBDict_590_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairRegistry' - 1 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_590_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbDataTypeUnion::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_590_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbDataTypeUnion::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_590_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbDataTypeUnion::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_590_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbDataTypeUnion::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_590_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_590_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_590_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_590_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_590_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbDataTypeUnion::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_590_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbDataTypeUnion::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_590_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbDataTypeUnion::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_590_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbDataTypeUnion::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbDataTypeUnion", 1869, G__G__FairDBDict_590_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion), -1, 0, 1, 1, 1, 0, "u 'FairDbDataTypeUnion' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbDataTypeUnion", 1995, G__G__FairDBDict_590_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_590_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDataTypeUnion), -1, 1, 1, 1, 1, 0, "u 'FairDbDataTypeUnion' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbStopWatch(void) {
   /* FairDbStopWatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch));
   G__memfunc_setup("FairDbStopWatch",1477,G__G__FairDBDict_607_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecBegin",767,G__G__FairDBDict_607_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - tableName h - 'UInt_t' 0 - rowSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecEnd",561,G__G__FairDBDict_607_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - numRows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecFillAgg",944,G__G__FairDBDict_607_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecMainQuery",1205,G__G__FairDBDict_607_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resume",625,G__G__FairDBDict_607_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartSubWatch",1327,G__G__FairDBDict_607_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - subWatch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Suspend",738,G__G__FairDBDict_607_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_607_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbStopWatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_607_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_607_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbStopWatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_607_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbStopWatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_607_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_607_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_607_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_607_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_607_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_607_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStopWatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_607_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_607_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStopWatch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbStopWatch", 1477, G__G__FairDBDict_607_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 0, 1, 1, 1, 0, "u 'FairDbStopWatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbStopWatch", 1603, G__G__FairDBDict_607_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_607_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 1, 1, 1, 1, 0, "u 'FairDbStopWatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbStopWatchManager(void) {
   /* FairDbStopWatchManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager));
   G__memfunc_setup("FairDbStopWatchManager",2176,G__G__FairDBDict_610_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enable",583,G__G__FairDBDict_610_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' flag g - 'Bool_t' 0 'kFALSE' enableSubWatch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecBegin",767,G__G__FairDBDict_610_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - tableName h - 'UInt_t' 0 - rowSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecEnd",561,G__G__FairDBDict_610_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - numRows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecFillAgg",944,G__G__FairDBDict_610_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aggNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecMainQuery",1205,G__G__FairDBDict_610_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartSubWatch",1327,G__G__FairDBDict_610_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - subWatch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrent",1027,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pop",303,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push",416,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatch), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_610_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbStopWatchManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_610_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatchManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_610_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbStopWatchManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_610_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbStopWatchManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_610_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_610_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_610_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_610_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_610_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatchManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_610_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStopWatchManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_610_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbStopWatchManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_610_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbStopWatchManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbStopWatchManager", 2176, G__G__FairDBDict_610_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager), -1, 0, 1, 1, 1, 0, "u 'FairDbStopWatchManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbStopWatchManager", 2302, G__G__FairDBDict_610_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_610_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbStopWatchManager), -1, 1, 1, 1, 1, 0, "u 'FairDbStopWatchManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbLogEntry(void) {
   /* FairDbLogEntry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry));
   G__memfunc_setup("FairDbLogEntry",1372,G__G__FairDBDict_628_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry), -1, 0, 8, 1, 1, 0, 
"u 'string' - 11 '\"\"' tableName u 'string' - 11 '\"\"' reason "
"i - 'Int_t' 0 'FairDbDetector::FullMask()' detMask i - 'Int_t' 0 'DataType::FullMask()' simMask "
"i - 'FairDb::Version' 0 '0' task i - 'Int_t' 0 '0' logSeqNoMin "
"i - 'Int_t' 0 '0' logSeqNoMax i - 'Int_t' 0 '0' logNumSeqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateObjTableMap",1653,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbObjTableMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAggregateNo",1380,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLogTableName",1451,G__G__FairDBDict_628_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMask",1510,G__G__FairDBDict_628_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogSeqNoMin",1356,G__G__FairDBDict_628_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogSeqNoMax",1358,G__G__FairDBDict_628_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogNumSeqNo",1368,G__G__FairDBDict_628_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSimMask",981,G__G__FairDBDict_628_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("FairDb::Version"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserName",1088,G__G__FairDBDict_628_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcessName",1408,G__G__FairDBDict_628_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHostName",1087,G__G__FairDBDict_628_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerName",1304,G__G__FairDBDict_628_0_14, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReason",904,G__G__FairDBDict_628_0_15, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpdateTime",1298,G__G__FairDBDict_628_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasReason",900,G__G__FairDBDict_628_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReason",916,G__G__FairDBDict_628_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - reason", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMask",1522,G__G__FairDBDict_628_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - detMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSimMask",993,G__G__FairDBDict_628_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - simMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__G__FairDBDict_628_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'FairDb::Version' 0 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpdateTime",1310,G__G__FairDBDict_628_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 11 - updateTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Recreate",811,G__G__FairDBDict_628_0_23, 121, -1, -1, 0, 8, 1, 1, 0, 
"u 'string' - 11 '\"\"' tableName u 'string' - 11 '\"\"' reason "
"i - 'Int_t' 0 'FairDbDetector::FullMask()' detMask i - 'Int_t' 0 'DataType::FullMask()' simMask "
"i - 'FairDb::Version' 0 '0' task i - 'Int_t' 0 '0' logSeqNoMin "
"i - 'Int_t' 0 '0' logSeqNoMax i - 'Int_t' 0 '0' logNumSeqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairDbResultPool' - 1 - rs U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Store",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"u 'FairDbOutTableBuffer' - 1 - ors U 'FairDbValRecord' - 10 - vrec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,G__G__FairDBDict_628_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - dbNo i - 'Int_t' 0 '0' logSeqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbLogEntry",1372,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry), -1, 0, 1, 1, 4, 0, "u 'FairDbLogEntry' - 11 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetServerName",1316,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_628_0_29, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbLogEntry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_628_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbLogEntry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_628_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbLogEntry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_628_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbLogEntry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_628_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_628_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbLogEntry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_628_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbLogEntry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_628_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbLogEntry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_628_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbLogEntry::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbLogEntry", 1498, G__G__FairDBDict_628_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_628_0_42, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry), -1, 1, 1, 1, 1, 0, "u 'FairDbLogEntry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbExtSqlContent(void) {
   /* FairDbExtSqlContent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent));
   G__memfunc_setup("FairDbExtSqlContent",1892,G__G__FairDBDict_629_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent), -1, 0, 1, 1, 1, 0, "u 'string' - 11 '\"\"' ctxt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbExtSqlContent",1892,G__G__FairDBDict_629_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent), -1, 0, 5, 1, 1, 0, 
"i 'FairDbExtSqlContent::IntervalType' - 0 - interval u 'ValTimeStamp' - 0 - start "
"u 'ValTimeStamp' - 0 - end u 'FairDbDetector::EDetector' 'FairDbDetector::Detector_t' 0 - det "
"u 'DataType::EDataType' 'DataType::DataType_t' 0 - sim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStart",1213,G__G__FairDBDict_629_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeEnd",966,G__G__FairDBDict_629_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__FairDBDict_629_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector), G__defined_typename("FairDbDetector::Detector_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataType",1084,G__G__FairDBDict_629_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_DataTypecLcLEDataType), G__defined_typename("DataType::DataType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_629_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbExtSqlContent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_629_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExtSqlContent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_629_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbExtSqlContent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_629_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbExtSqlContent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_629_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_629_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExtSqlContent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_629_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbExtSqlContent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_629_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbExtSqlContent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_629_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbExtSqlContent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairDbExtSqlContent", 1892, G__G__FairDBDict_629_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent), -1, 0, 1, 1, 1, 0, "u 'FairDbExtSqlContent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDbExtSqlContent", 2018, G__G__FairDBDict_629_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_629_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbExtSqlContent), -1, 1, 1, 1, 1, 0, "u 'FairDbExtSqlContent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConfigBuffer(void) {
   /* FairDbConfigBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer));
   G__memfunc_setup("FairDbConfigBuffer",1752,G__G__FairDBDict_630_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConfigBuffer",1752,G__G__FairDBDict_630_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 0, 5, 1, 1, 0, 
"u 'string' - 11 - SoftwName u 'string' - 11 '\"default\"' ConfigName "
"u 'ValCondition' - 0 'FairDbConfigBuffer::fgDefaultContext' vc i - 'FairDb::Version' 0 '0' task "
"u 'string' - 11 '\"SOFTWARE_CONF\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__G__FairDBDict_630_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 1, 1, 1, 1, 1, "U 'FairRegistry' - 0 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfigData",1264,G__G__FairDBDict_630_0_4, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_630_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 1, 1, 1, 1, 0, "U 'FairRegistry' - 10 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__G__FairDBDict_630_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_630_0_7, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__G__FairDBDict_630_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment "
"g - 'Bool_t' 0 'false' localTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConfigBuffer",1752,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 0, 1, 1, 4, 0, "u 'FairDbConfigBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigBuffer), -1, 0, 1, 1, 4, 0, "u 'FairDbConfigBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_630_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConfigBuffer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_630_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigBuffer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_630_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConfigBuffer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_630_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConfigBuffer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_630_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_630_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_630_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_630_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_630_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigBuffer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_630_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigBuffer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_630_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConfigBuffer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_630_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConfigBuffer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConfigBuffer", 1878, G__G__FairDBDict_630_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbReaderlEFairDbConfigDatagR(void) {
   /* FairDbReader<FairDbConfigData> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR));
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 1, 1, 1, 0, "u 'FairDbReader<FairDbConfigData>' - 11 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 5, 1, 1, 0, 
"u 'string' - 11 - tableName u 'ValCondition' - 11 - vc "
"i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 6, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbExtSqlContent' - 11 - context "
"i - 'FairDb::Version' 11 'FairDb::kAnyVersion' task u 'string' - 11 '\"\"' data "
"u 'string' - 11 '\"\"' fillOpts i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbValRecord' - 11 - vrec "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbConfigData>",2797,G__G__FairDBDict_631_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 0, 4, 1, 1, 0, 
"u 'string' - 11 - tableName h - 'UInt_t' 0 - seqNo "
"h - 'UInt_t' 0 - dbNo i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Activate",817,G__G__FairDBDict_631_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__G__FairDBDict_631_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRows",1019,G__G__FairDBDict_631_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResult",927,G__G__FairDBDict_631_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResultID",1068,G__G__FairDBDict_631_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__G__FairDBDict_631_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRowByIndex",1291,G__G__FairDBDict_631_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConfigData), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_631_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "U 'FairDbObjTableMap' - 10 '0' row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableInterface",1401,G__G__FairDBDict_631_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResultsFromDb",1324,G__G__FairDBDict_631_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_631_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)())(&FairDbReader<FairDbConfigData>::GetTableInterface) ), 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_631_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 3, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)(const string&))(&FairDbReader<FairDbConfigData>::GetTableInterface) ), 0);
   G__memfunc_setup("NextQuery",949,G__G__FairDBDict_631_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' forwards", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_631_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"u 'ValCondition' - 0 - vc i - 'FairDb::Version' 0 '0' task "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_631_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'FairDbExtSqlContent' - 11 - context i - 'FairDb::Version' 11 '0' task "
"u 'string' - 11 '\"\"' data u 'string' - 11 '\"\"' fillOpts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_631_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_631_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_631_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContext",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyAbortTest",1438,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR), -1, 1, 1, 1, 4, 0, "u 'FairDbReader<FairDbConfigData>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_631_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbReader<FairDbConfigData>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_631_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbConfigData>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_631_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbReader<FairDbConfigData>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_631_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbReader<FairDbConfigData>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_631_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_631_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_631_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_631_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_631_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbConfigData>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_631_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbConfigData>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_631_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbConfigData>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_631_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbConfigData>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbReader<FairDbConfigData>", 2923, G__G__FairDBDict_631_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbConnectionManager(void) {
   /* FairDbConnectionManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager));
   G__memfunc_setup("FairDbConnectionManager",2291,G__G__FairDBDict_632_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager), -1, 0, 1, 1, 1, 0, "U 'FairDbConnectionPool' - 0 '0' cascader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbConnectionManager",2291,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager), -1, 0, 1, 1, 4, 0, "u 'FairDbConnectionManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbConnectionManager), -1, 0, 1, 1, 4, 0, "u 'FairDbConnectionManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_632_0_4, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbConnectionManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_632_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_632_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbConnectionManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_632_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbConnectionManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_632_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_632_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_632_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_632_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_632_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_632_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnectionManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_632_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbConnectionManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_632_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbConnectionManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbConnectionManager", 2417, G__G__FairDBDict_632_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbSqlValidityData(void) {
   /* FairDbSqlValidityData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData));
   G__memfunc_setup("FairDbSqlValidityData",2072,G__G__FairDBDict_634_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbSqlValidityData",2072,G__G__FairDBDict_634_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData), -1, 0, 1, 1, 1, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbSqlValidityData",2072,G__G__FairDBDict_634_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData), -1, 0, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanBeStored",1066,G__G__FairDBDict_634_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,G__G__FairDBDict_634_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult), G__defined_typename("FairDbSqlValidityData::CompResult_t"), 0, 4, 1, 1, 8, 
"u 'FairDbSqlValidityData' - 11 - that g - 'Bool_t' 0 'kFALSE' log "
"C - 'Char_t' 10 '\"this\"' thisName C - 'Char_t' 10 '\"that\"' thatName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateTable",1084,G__G__FairDBDict_634_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumErrors",1229,G__G__FairDBDict_634_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSqlStmts",1435,G__G__FairDBDict_634_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeqNo",774,G__G__FairDBDict_634_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCreationDate",1491,G__G__FairDBDict_634_0_10, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStmt",712,G__G__FairDBDict_634_0_11, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - stmtNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStmtValues",1336,G__G__FairDBDict_634_0_12, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - stmtNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableName",1161,G__G__FairDBDict_634_0_13, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,G__G__FairDBDict_634_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"u 'FairDbSqlValidityData' - 11 - that g - 'Bool_t' 0 'kFALSE' log "
"C - 'Char_t' 10 '\"this\"' thisName C - 'Char_t' 10 '\"that\"' thatName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__FairDBDict_634_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Store",525,G__G__FairDBDict_634_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - dbNo g - 'Bool_t' 0 'kFALSE' replace", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__G__FairDBDict_634_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - ios g - 'Bool_t' 0 'kFALSE' addMetadata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Recreate",811,G__G__FairDBDict_634_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'string' - 11 - tableName u 'ValInterval' - 11 - vr "
"i - 'Int_t' 0 - aggNo i - 'FairDb::Version' 0 '0' task "
"u 'ValTimeStamp' - 0 'ValTimeStamp()' creationDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDataRow",955,G__G__FairDBDict_634_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'FairDbTableInterface' - 11 - tblProxy U 'FairDbValRecord' - 10 - vrec "
"u 'FairDbObjTableMap' - 11 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__FairDBDict_634_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCreationDate",1503,G__G__FairDBDict_634_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ValTimeStamp' - 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeqNo",786,G__G__FairDBDict_634_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - seqno", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_634_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", "Doesn't clear fNumErrors.", (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__FairDBDict_634_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddRow",577,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 11 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRow",577,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 0, 
"u 'FairDbTableInterface' - 11 - tblProxy U 'FairDbValRecord' - 10 - vrec "
"u 'FairDbObjTableMap' - 11 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Report",636,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"C - - 10 - msg h - 'UInt_t' 0 - line_num "
"u 'string' - 11 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMetaData",1069,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeqNoOnRow",1287,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'string' - 1 - row u 'string' - 11 - seqno", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbSqlValidityData",2072,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData), -1, 0, 1, 1, 4, 0, "u 'FairDbSqlValidityData' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_634_0_31, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbSqlValidityData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_634_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbSqlValidityData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_634_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbSqlValidityData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_634_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbSqlValidityData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_634_0_35, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_634_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_634_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_634_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_634_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbSqlValidityData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_634_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbSqlValidityData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_634_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbSqlValidityData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_634_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbSqlValidityData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbSqlValidityData", 2198, G__G__FairDBDict_634_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_634_0_44, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbSqlValidityData), -1, 1, 1, 1, 1, 0, "u 'FairDbSqlValidityData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbValRecordMap(void) {
   /* FairDbValRecordMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap));
   G__memfunc_setup("FairDbValRecordMap",1736,G__G__FairDBDict_637_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - tableName h - 'UInt_t' 0 - dbNo "
"h - 'UInt_t' 0 '0' seqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDbNo",643,G__G__FairDBDict_637_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRows",1019,G__G__FairDBDict_637_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableName",1161,G__G__FairDBDict_637_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjTableMap",1345,G__G__FairDBDict_637_0_5, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjTableMapBySeqNo",2018,G__G__FairDBDict_637_0_6, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - seqNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbValRecordMap",1736,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap), -1, 0, 1, 1, 4, 0, "u 'FairDbValRecordMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecordMap), -1, 0, 1, 1, 4, 0, "u 'FairDbValRecordMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_637_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbValRecordMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_637_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_637_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbValRecordMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_637_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbValRecordMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_637_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_637_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_637_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_637_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_637_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_637_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecordMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_637_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbValRecordMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_637_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbValRecordMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbValRecordMap", 1862, G__G__FairDBDict_637_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDBObjectMemberValues(void) {
   /* FairDBObjectMemberValues */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues));
   // automatic default constructor
   G__memfunc_setup("FairDBObjectMemberValues", 2343, G__G__FairDBDict_651_0_1, (int) ('i'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("FairDBObjectMemberValues", 2343, G__G__FairDBDict_651_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues), -1, 0, 1, 1, 1, 0, "u 'FairDBObjectMemberValues' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairDBObjectMemberValues", 2469, G__G__FairDBDict_651_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FairDBDict_651_0_4, (int) ('u'), G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValues), -1, 1, 1, 1, 1, 0, "u 'FairDBObjectMemberValues' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDBObjectMemberValue(void) {
   /* FairDBObjectMemberValue */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue));
   G__memfunc_setup("FairDBObjectMemberValue",2228,G__G__FairDBDict_652_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDBObjectMemberValue",2228,G__G__FairDBDict_652_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue), -1, 0, 1, 5, 1, 0, "u 'FairDBObjectMemberTypes' 'FairDBObjectMemberTypes' 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDBObjectMemberValue",2228,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue), -1, 0, 1, 1, 4, 0, "u 'FairDBObjectMemberValue' - 41 - ot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue), -1, 0, 1, 1, 4, 0, "u 'FairDBObjectMemberValue' - 41 - ot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_652_0_5, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDBObjectMemberValue::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_652_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDBObjectMemberValue::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_652_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDBObjectMemberValue::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_652_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDBObjectMemberValue::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_652_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_652_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_652_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_652_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_652_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDBObjectMemberValue::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_652_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDBObjectMemberValue::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_652_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDBObjectMemberValue::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_652_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDBObjectMemberValue::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDBObjectMemberValue", 2354, G__G__FairDBDict_652_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTSQLObject(void) {
   /* FairTSQLObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject));
   G__memfunc_setup("FairTSQLObject",1309,G__G__FairDBDict_653_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetcurDict",1006,G__G__FairDBDict_653_0_2, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TDictionary), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurCls",876,G__G__FairDBDict_653_0_3, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMemberList",1300,G__G__FairDBDict_653_0_4, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TList), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMethodList",1309,G__G__FairDBDict_653_0_5, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_TList), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMemberType",1306,G__G__FairDBDict_653_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes), G__defined_typename("FairDBObjectMemberTypes"), 0, 1, 1, 1, 0, "u 'string' - 41 - mName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMemberTypeName",1691,G__G__FairDBDict_653_0_7, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - mName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMemberTypeName",1691,G__G__FairDBDict_653_0_8, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 - mName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMemberGetter",1885,G__G__FairDBDict_653_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TMethodCall), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - mName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMember",888,G__G__FairDBDict_653_0_10, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberValue), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - mName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMethod",897,G__G__FairDBDict_653_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TMethod), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - methodName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMethodPrototype",1879,G__G__FairDBDict_653_0_12, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - methodName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMethodReturnTypeName",2340,G__G__FairDBDict_653_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 41 - methodName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMethodReturnTypeName",2340,G__G__FairDBDict_653_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 - methodName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTSQLObject",1309,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject), -1, 0, 1, 1, 4, 0, "u 'FairTSQLObject' - 41 - ot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairTSQLObject), -1, 1, 1, 1, 4, 0, "u 'FairTSQLObject' - 41 - ot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCurClass",1204,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMemList",1103,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMethodList",1425,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_653_0_20, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTSQLObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_653_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSQLObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_653_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTSQLObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_653_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTSQLObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_653_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_653_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSQLObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_653_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTSQLObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_653_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSQLObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_653_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTSQLObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairTSQLObject", 1435, G__G__FairDBDict_653_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbReaderlEFairDbLogEntrygR(void) {
   /* FairDbReader<FairDbLogEntry> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR));
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 1, 1, 1, 0, "u 'FairDbReader<FairDbLogEntry>' - 11 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 5, 1, 1, 0, 
"u 'string' - 11 - tableName u 'ValCondition' - 11 - vc "
"i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 6, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbExtSqlContent' - 11 - context "
"i - 'FairDb::Version' 11 'FairDb::kAnyVersion' task u 'string' - 11 '\"\"' data "
"u 'string' - 11 '\"\"' fillOpts i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbValRecord' - 11 - vrec "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbLogEntry>",2641,G__G__FairDBDict_711_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 0, 4, 1, 1, 0, 
"u 'string' - 11 - tableName h - 'UInt_t' 0 - seqNo "
"h - 'UInt_t' 0 - dbNo i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Activate",817,G__G__FairDBDict_711_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__G__FairDBDict_711_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRows",1019,G__G__FairDBDict_711_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResult",927,G__G__FairDBDict_711_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResultID",1068,G__G__FairDBDict_711_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__G__FairDBDict_711_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRowByIndex",1291,G__G__FairDBDict_711_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbLogEntry), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_711_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "U 'FairDbObjTableMap' - 10 '0' row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableInterface",1401,G__G__FairDBDict_711_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResultsFromDb",1324,G__G__FairDBDict_711_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_711_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)())(&FairDbReader<FairDbLogEntry>::GetTableInterface) ), 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_711_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 3, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)(const string&))(&FairDbReader<FairDbLogEntry>::GetTableInterface) ), 0);
   G__memfunc_setup("NextQuery",949,G__G__FairDBDict_711_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' forwards", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_711_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"u 'ValCondition' - 0 - vc i - 'FairDb::Version' 0 '0' task "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_711_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'FairDbExtSqlContent' - 11 - context i - 'FairDb::Version' 11 '0' task "
"u 'string' - 11 '\"\"' data u 'string' - 11 '\"\"' fillOpts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_711_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_711_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_711_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContext",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyAbortTest",1438,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR), -1, 1, 1, 1, 4, 0, "u 'FairDbReader<FairDbLogEntry>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_711_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbReader<FairDbLogEntry>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_711_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbLogEntry>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_711_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbReader<FairDbLogEntry>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_711_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbReader<FairDbLogEntry>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_711_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_711_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_711_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_711_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_711_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbLogEntry>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_711_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbLogEntry>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_711_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbLogEntry>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_711_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbLogEntry>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbReader<FairDbLogEntry>", 2767, G__G__FairDBDict_711_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbWriterlEFairDbLogEntrygR(void) {
   /* FairDbWriter<FairDbLogEntry> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR));
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,G__G__FairDBDict_712_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,G__G__FairDBDict_712_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 7, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 - task u 'ValTimeStamp' - 0 - creationDate "
"u 'string' - 11 - dbName u 'string' - 11 '\"\"' logComment "
"u 'string' - 11 '\"\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,G__G__FairDBDict_712_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 7, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 '0' task u 'ValTimeStamp' - 0 'ValTimeStamp(0,0)' creationDate "
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment "
"u 'string' - 11 '\"\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,G__G__FairDBDict_712_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec u 'string' - 11 - dbName "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,G__G__FairDBDict_712_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec h - 'UInt_t' 0 '0' dbNo "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableInterface",1401,G__G__FairDBDict_712_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOpen",590,G__G__FairDBDict_712_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' reportErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanOutput",931,G__G__FairDBDict_712_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' reportErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbEntry",996,G__G__FairDBDict_712_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbNo",655,G__G__FairDBDict_712_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbName",851,G__G__FairDBDict_712_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - dbName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogComment",1313,G__G__FairDBDict_712_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - reason", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComboNo",985,G__G__FairDBDict_712_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - combo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__G__FairDBDict_712_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'FairDb::Version' 0 - vers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogTitle",1104,G__G__FairDBDict_712_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - logTitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRequireGlobalSeqno",2144,G__G__FairDBDict_712_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - requireGlobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOverlayCreationDate",2241,G__G__FairDBDict_712_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Abort",504,G__G__FairDBDict_712_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__FairDBDict_712_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 '0' fileSpec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_712_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 - task u 'ValTimeStamp' - 0 - creationDate "
"u 'string' - 11 - dbName u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_712_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 '0' task u 'ValTimeStamp' - 0 'ValTimeStamp()' creationDate "
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_712_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec u 'string' - 11 - dbName "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_712_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec h - 'UInt_t' 0 '0' dbNo "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Activate",817,G__G__FairDBDict_712_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 '-2' aggNo "
"i - 'FairDb::Version' 0 '0' vers i - 'Int_t' 0 '0' dbEntry "
"u 'string' - 11 '\"\"' logTitle u 'ValTimeStamp' - 0 'ValTimeStamp(0,0)' creationDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_712_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_712_0_26, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 1, 1, 1, 1, 0, "u 'FairDbLogEntry' - 11 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NeedsLogEntry",1315,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritingToMaster",1555,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbLogEntry>",2683,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 0, 1, 1, 4, 0, "u 'FairDbWriter<FairDbLogEntry>' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR), -1, 1, 1, 1, 4, 0, "u 'FairDbWriter<FairDbLogEntry>' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("CompleteOpen",1227,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 3, 4, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_712_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbWriter<FairDbLogEntry>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_712_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbLogEntry>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_712_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbWriter<FairDbLogEntry>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_712_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbWriter<FairDbLogEntry>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_712_0_38, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_712_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_712_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_712_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_712_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbLogEntry>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_712_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbWriter<FairDbLogEntry>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_712_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbLogEntry>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_712_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbWriter<FairDbLogEntry>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbWriter<FairDbLogEntry>", 2809, G__G__FairDBDict_712_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbWriterlEFairDbConfigDatagR(void) {
   /* FairDbWriter<FairDbConfigData> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR));
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,G__G__FairDBDict_713_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,G__G__FairDBDict_713_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 7, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 - task u 'ValTimeStamp' - 0 - creationDate "
"u 'string' - 11 - dbName u 'string' - 11 '\"\"' logComment "
"u 'string' - 11 '\"\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,G__G__FairDBDict_713_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 7, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 '0' task u 'ValTimeStamp' - 0 'ValTimeStamp(0,0)' creationDate "
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment "
"u 'string' - 11 '\"\"' tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,G__G__FairDBDict_713_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec u 'string' - 11 - dbName "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,G__G__FairDBDict_713_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec h - 'UInt_t' 0 '0' dbNo "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableInterface",1401,G__G__FairDBDict_713_0_6, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOpen",590,G__G__FairDBDict_713_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' reportErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanOutput",931,G__G__FairDBDict_713_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' reportErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbEntry",996,G__G__FairDBDict_713_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbNo",655,G__G__FairDBDict_713_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbName",851,G__G__FairDBDict_713_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - dbName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogComment",1313,G__G__FairDBDict_713_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - reason", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComboNo",985,G__G__FairDBDict_713_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - combo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__G__FairDBDict_713_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'FairDb::Version' 0 - vers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogTitle",1104,G__G__FairDBDict_713_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - logTitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRequireGlobalSeqno",2144,G__G__FairDBDict_713_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - requireGlobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOverlayCreationDate",2241,G__G__FairDBDict_713_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Abort",504,G__G__FairDBDict_713_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__FairDBDict_713_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 '0' fileSpec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_713_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 - task u 'ValTimeStamp' - 0 - creationDate "
"u 'string' - 11 - dbName u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_713_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 - aggNo "
"i - 'FairDb::Version' 0 '0' task u 'ValTimeStamp' - 0 'ValTimeStamp()' creationDate "
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_713_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec u 'string' - 11 - dbName "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__FairDBDict_713_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'FairDbValRecord' - 11 - vrec h - 'UInt_t' 0 '0' dbNo "
"u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Activate",817,G__G__FairDBDict_713_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'ValInterval' - 11 - vr i - 'Int_t' 0 '-2' aggNo "
"i - 'FairDb::Version' 0 '0' vers i - 'Int_t' 0 '0' dbEntry "
"u 'string' - 11 '\"\"' logTitle u 'ValTimeStamp' - 0 'ValTimeStamp(0,0)' creationDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_713_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__FairDBDict_713_0_26, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 1, 1, 1, 1, 0, "u 'FairDbConfigData' - 11 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NeedsLogEntry",1315,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritingToMaster",1555,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbWriter<FairDbConfigData>",2839,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 0, 1, 1, 4, 0, "u 'FairDbWriter<FairDbConfigData>' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR), -1, 1, 1, 1, 4, 0, "u 'FairDbWriter<FairDbConfigData>' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("CompleteOpen",1227,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 0 '0' dbNo u 'string' - 11 '\"\"' logComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 3, 4, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_713_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbWriter<FairDbConfigData>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_713_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbConfigData>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_713_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbWriter<FairDbConfigData>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_713_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbWriter<FairDbConfigData>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_713_0_38, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_713_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_713_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_713_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_713_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbConfigData>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_713_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbWriter<FairDbConfigData>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_713_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbWriter<FairDbConfigData>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_713_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbWriter<FairDbConfigData>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbWriter<FairDbConfigData>", 2965, G__G__FairDBDict_713_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDbReaderlEFairDbValRecordgR(void) {
   /* FairDbReader<FairDbValRecord> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR));
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_2, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 1, 1, 1, 0, "u 'FairDbReader<FairDbValRecord>' - 11 - that", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_3, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_4, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 5, 1, 1, 0, 
"u 'string' - 11 - tableName u 'ValCondition' - 11 - vc "
"i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_5, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 6, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbExtSqlContent' - 11 - context "
"i - 'FairDb::Version' 11 'FairDb::kAnyVersion' task u 'string' - 11 '\"\"' data "
"u 'string' - 11 '\"\"' fillOpts i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_6, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - tableName u 'FairDbValRecord' - 11 - vrec "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairDbReader<FairDbValRecord>",2719,G__G__FairDBDict_714_0_7, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 0, 4, 1, 1, 0, 
"u 'string' - 11 - tableName h - 'UInt_t' 0 - seqNo "
"h - 'UInt_t' 0 - dbNo i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Activate",817,G__G__FairDBDict_714_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'ValCondition' - 11 - vc i - 'FairDb::Version' 0 'FairDb::kDefaultVersion' task "
"i 'FairDb::AbortTest' - 0 'FairDb::kTableMissing' abortTest g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__G__FairDBDict_714_0_9, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResultKey), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRows",1019,G__G__FairDBDict_714_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResult",927,G__G__FairDBDict_714_0_11, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbResult), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResultID",1068,G__G__FairDBDict_714_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__G__FairDBDict_714_0_13, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - rowNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRowByIndex",1291,G__G__FairDBDict_714_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidityRec",1408,G__G__FairDBDict_714_0_15, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbValRecord), -1, 0, 1, 1, 1, 9, "U 'FairDbObjTableMap' - 10 '0' row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableInterface",1401,G__G__FairDBDict_714_0_16, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResultsFromDb",1324,G__G__FairDBDict_714_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_714_0_18, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)())(&FairDbReader<FairDbValRecord>::GetTableInterface) ), 0);
   G__memfunc_setup("GetTableInterface",1689,G__G__FairDBDict_714_0_19, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbTableInterface), -1, 1, 1, 3, 1, 0, "u 'string' - 11 - tableName", (char*)NULL, (void*) G__func2void( (FairDbTableInterface& (*)(const string&))(&FairDbReader<FairDbValRecord>::GetTableInterface) ), 0);
   G__memfunc_setup("NextQuery",949,G__G__FairDBDict_714_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' forwards", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_714_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"u 'ValCondition' - 0 - vc i - 'FairDb::Version' 0 '0' task "
"g - 'Bool_t' 0 'true' findFullTimeWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_714_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 0, 
"u 'FairDbExtSqlContent' - 11 - context i - 'FairDb::Version' 11 '0' task "
"u 'string' - 11 '\"\"' data u 'string' - 11 '\"\"' fillOpts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_714_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewQuery",832,G__G__FairDBDict_714_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - seqNo h - 'UInt_t' 0 - dbNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__FairDBDict_714_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContext",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'FairDbValRecord' - 11 - vrec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyAbortTest",1438,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR), -1, 1, 1, 1, 4, 0, "u 'FairDbReader<FairDbValRecord>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_714_0_30, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDbReader<FairDbValRecord>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_714_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbValRecord>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_714_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDbReader<FairDbValRecord>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_714_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDbReader<FairDbValRecord>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__FairDBDict_714_0_34, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__FairDBDict_714_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__FairDBDict_714_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_714_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_714_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbValRecord>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_714_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbValRecord>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_714_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDbReader<FairDbValRecord>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_714_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDbReader<FairDbValRecord>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDbReader<FairDbValRecord>", 2845, G__G__FairDBDict_714_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElementGenericlEintgR(void) {
   /* FairRegistryElementGeneric<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR));
   G__memfunc_setup("FairRegistryElementGeneric<int>",3111,G__G__FairDBDict_715_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTypeAsString",1517,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<int>",3111,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR), -1, 0, 1, 1, 4, 0, "I - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,(G__InterfaceMethod) NULL, 73, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "I - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dup",297,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<int>",3111,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_715_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElementGeneric<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_715_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_715_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElementGeneric<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_715_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElementGeneric<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_715_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_715_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_715_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_715_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_715_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<int>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElementGeneric<int>", 3237, G__G__FairDBDict_715_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElementGenericlEdoublegR(void) {
   /* FairRegistryElementGeneric<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR));
   G__memfunc_setup("FairRegistryElementGeneric<double>",3415,G__G__FairDBDict_716_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTypeAsString",1517,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<double>",3415,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR), -1, 0, 1, 1, 4, 0, "D - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,(G__InterfaceMethod) NULL, 68, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "D - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dup",297,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<double>",3415,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_716_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElementGeneric<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_716_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_716_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElementGeneric<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_716_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElementGeneric<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_716_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_716_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_716_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_716_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_716_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElementGeneric<double>", 3541, G__G__FairDBDict_716_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElementGenericlEFairRegistrygR(void) {
   /* FairRegistryElementGeneric<FairRegistry> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR));
   G__memfunc_setup("FairRegistryElementGeneric<FairRegistry>",4023,G__G__FairDBDict_717_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTypeAsString",1517,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<FairRegistry>",4023,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR), -1, 0, 1, 1, 4, 0, "U 'FairRegistry' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistry), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'FairRegistry' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dup",297,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<FairRegistry>",4023,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<FairRegistry>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<FairRegistry>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_717_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElementGeneric<FairRegistry>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_717_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<FairRegistry>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_717_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElementGeneric<FairRegistry>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_717_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElementGeneric<FairRegistry>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_717_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_717_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<FairRegistry>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_717_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<FairRegistry>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_717_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<FairRegistry>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_717_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<FairRegistry>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElementGeneric<FairRegistry>", 4149, G__G__FairDBDict_717_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElementGenericlEchargR(void) {
   /* FairRegistryElementGeneric<char> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR));
   G__memfunc_setup("FairRegistryElementGeneric<char>",3194,G__G__FairDBDict_718_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTypeAsString",1517,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<char>",3194,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR), -1, 0, 1, 1, 4, 0, "C - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dup",297,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<char>",3194,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<char>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<char>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_718_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElementGeneric<char>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_718_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<char>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_718_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElementGeneric<char>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_718_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElementGeneric<char>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_718_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_718_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<char>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_718_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<char>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_718_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<char>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_718_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<char>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElementGeneric<char>", 3320, G__G__FairDBDict_718_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRegistryElementGenericlEconstsPcharmUgR(void) {
   /* FairRegistryElementGeneric<const char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR));
   G__memfunc_setup("FairRegistryElementGeneric<const char*>",3819,G__G__FairDBDict_719_0_1, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStream",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadStream",1000,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__FairDBDictLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTypeAsString",1517,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<const char*>",3819,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR), -1, 0, 1, 1, 4, 0, "C - - 12 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,(G__InterfaceMethod) NULL, 67, -1, -1, 2, 0, 1, 4, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 12 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dup",297,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElement), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRegistryElementGeneric<const char*>",3819,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<const char*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR), -1, 0, 1, 1, 4, 0, "u 'FairRegistryElementGeneric<const char*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FairDBDict_719_0_14, 85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRegistryElementGeneric<const char*>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FairDBDict_719_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<const char*>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FairDBDict_719_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRegistryElementGeneric<const char*>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FairDBDict_719_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRegistryElementGeneric<const char*>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FairDBDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FairDBDict_719_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FairDBDict_719_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<const char*>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FairDBDict_719_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<const char*>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FairDBDict_719_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRegistryElementGeneric<const char*>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FairDBDict_719_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRegistryElementGeneric<const char*>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRegistryElementGeneric<const char*>", 3945, G__G__FairDBDict_719_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__FairDBDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"UNKNOWN_TYPE=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"COMPLEX_TYPE=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"CHAR=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"INT=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"FLOAT=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"DOUBLE=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"UINT=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"INT_ARRAY=31",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"INT_ARRAY_PTR=32",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"FLOAT_ARRAY=41",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"FLOAT_ARRAY_PTR=42",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"DOUBLE_ARRAY=51",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__FairDBDictLN_FairDBObjectMemberTypes),-1,-1,1,"DOUBLE_ARRAY_PTR=52",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__FairDBDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
   G__memfunc_setup("operator==", 998, G__G__FairDBDict__0_1412, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__G__FairDBDict__0_1413, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__G__FairDBDict__0_1414, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__G__FairDBDict__0_1415, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__G__FairDBDict__0_1416, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__G__FairDBDict__0_1417, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__G__FairDBDict__0_1418, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_ValTimeStamp), -1, 0, 2, 1, 1, 0, 
"u 'ValTimeStamp' - 11 - lhs u 'ValTimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<<", 996, G__G__FairDBDict__0_1419, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'ValTimeStamp' - 11 - vldts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__G__FairDBDict__0_1420, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValCondition' - 11 - lhs u 'ValCondition' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__G__FairDBDict__0_1421, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValCondition' - 11 - lhs u 'ValCondition' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__G__FairDBDict__0_1422, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'ValCondition' - 11 - lhs u 'ValCondition' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<<", 996, G__G__FairDBDict__0_1426, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'ValCondition' - 11 - vldc", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func14() {
   G__memfunc_setup("operator<<", 996, G__G__FairDBDict__0_1427, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'ValInterval' - 11 - vldr", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
   G__memfunc_setup("operator<<", 996, G__G__FairDBDict__0_2454, 117, G__get_linked_tagnum(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'FairRegistry' - 11 - r", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__FairDBDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__FairDBDictLN_type_info = { "type_info" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_tm = { "tm" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TMethod = { "TMethod" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_Experiment = { "Experiment" , 110 , -1 };
G__linked_taginfo G__G__FairDBDictLN_ExperimentcLcLEExperiment = { "Experiment::EExperiment" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbDetector = { "FairDbDetector" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbDetectorcLcLEDetector = { "FairDbDetector::EDetector" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_DataType = { "DataType" , 110 , -1 };
G__linked_taginfo G__G__FairDBDictLN_DataTypecLcLEDataType = { "DataType::EDataType" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_timespec = { "timespec" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_ValTimeStamp = { "ValTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_ValCondition = { "ValCondition" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_ValInterval = { "ValInterval" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDb = { "FairDb" , 110 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLVersionTypes = { "FairDb::VersionTypes" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLTypeRegimes = { "FairDb::TypeRegimes" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLDataTypes = { "FairDb::DataTypes" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLDbTypes = { "FairDb::DbTypes" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLAbortTest = { "FairDb::AbortTest" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbcLcLdA = { "FairDb::$" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbException = { "FairDbException" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TSQLServer = { "TSQLServer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TSQLStatement = { "TSQLStatement" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbExceptionLog = { "FairDbExceptionLog" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR = { "vector<FairDbException,allocator<FairDbException> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbException,allocator<FairDbException> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TUrl = { "TUrl" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConnection = { "FairDbConnection" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbObjTableMap = { "FairDbObjTableMap" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbBufferFile = { "FairDbBufferFile" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR = { "vector<FairDbObjTableMap*,allocator<FairDbObjTableMap*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbObjTableMap*,allocator<FairDbObjTableMap*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR = { "list<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResult = { "FairDbResult" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableInterface = { "FairDbTableInterface" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbValRecord = { "FairDbValRecord" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbLogStream = { "FairDbLogStream" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbCache = { "FairDbCache" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR = { "list<FairDbResult*,allocator<FairDbResult*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR = { "map<int,list<FairDbResult*,allocator<FairDbResult*> >,less<int>,allocator<pair<const int,list<FairDbResult*,allocator<FairDbResult*> > > > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistry = { "FairRegistry" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElement = { "FairRegistryElement" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR = { "map<string,FairRegistryElement*,less<string>,allocator<pair<const string,FairRegistryElement*> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistrycLcLFairRegistryKey = { "FairRegistry::FairRegistryKey" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConfigNotice = { "FairDbConfigNotice" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConfigurable = { "FairDbConfigurable" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStreamer = { "FairDbStreamer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbOutTableBuffer = { "FairDbOutTableBuffer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResultPool = { "FairDbResultPool" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbFieldType = { "FairDbFieldType" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits = { "FairDbFieldType::PrecisionLimits" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConfigData = { "FairDbConfigData" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR = { "vector<FairDbConfigData::Param*,allocator<FairDbConfigData::Param*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbConfigData::Param*,allocator<FairDbConfigData::Param*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableMetaData = { "FairDbTableMetaData" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbProxy = { "FairDbProxy" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableMetaDatacLcLdA = { "FairDbTableMetaData::$" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes = { "FairDbTableMetaData::ColumnAttributes" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR = { "vector<FairDbTableMetaData::ColumnAttributes,allocator<FairDbTableMetaData::ColumnAttributes> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbTableMetaData::ColumnAttributes,allocator<FairDbTableMetaData::ColumnAttributes> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStatement = { "FairDbStatement" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConnectionPool = { "FairDbConnectionPool" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus = { "FairDbConnectionPool::Status" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR = { "vector<FairDbConnection*,allocator<FairDbConnection*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbConnection*,allocator<FairDbConnection*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableBuffer = { "FairDbTableBuffer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbString = { "FairDbString" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbValRecordFactory = { "FairDbValRecordFactory" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResultKey = { "FairDbResultKey" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey = { "FairDbResultKey::VRecKey" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlEFairDbResultKeycLcLVRecKeycOallocatorlEFairDbResultKeycLcLVRecKeygRsPgR = { "list<FairDbResultKey::VRecKey,allocator<FairDbResultKey::VRecKey> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR = { "map<unsigned int,const FairDbObjTableMap*,less<unsigned int>,allocator<pair<const unsigned int,const FairDbObjTableMap*> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResultCombo = { "FairDbResultCombo" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR = { "vector<const FairDbResult*,allocator<const FairDbResult*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const FairDbResult*,allocator<const FairDbResult*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR = { "vector<const FairDbObjTableMap*,allocator<const FairDbObjTableMap*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const FairDbObjTableMap*,allocator<const FairDbObjTableMap*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbResultNonCombo = { "FairDbResultNonCombo" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbRollbackTimes = { "FairDbRollbackTimes" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbTableInterfaceStore = { "FairDbTableInterfaceStore" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbDataTypeUnion = { "FairDbDataTypeUnion" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR = { "list<DataType::EDataType,allocator<DataType::EDataType> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR = { "map<DataType::EDataType,list<DataType::EDataType,allocator<DataType::EDataType> >,less<DataType::EDataType>,allocator<pair<const DataType::EDataType,list<DataType::EDataType,allocator<DataType::EDataType> > > > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStopWatch = { "FairDbStopWatch" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage = { "FairDbStopWatch::QueryStage" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStopWatchcLcLdA = { "FairDbStopWatch::$" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbStopWatchManager = { "FairDbStopWatchManager" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_listlEFairDbStopWatchmUcOallocatorlEFairDbStopWatchmUgRsPgR = { "list<FairDbStopWatch*,allocator<FairDbStopWatch*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbValRecordFactorycLcLdA = { "FairDbValRecordFactory::$" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR = { "vector<FairDbValRecord,allocator<FairDbValRecord> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbValRecord,allocator<FairDbValRecord> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR = { "map<int,unsigned int,less<int>,allocator<pair<const int,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbLogEntry = { "FairDbLogEntry" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbExtSqlContent = { "FairDbExtSqlContent" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConfigBuffer = { "FairDbConfigBuffer" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR = { "FairDbReader<FairDbConfigData>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbConnectionManager = { "FairDbConnectionManager" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType = { "FairDbExtSqlContent::IntervalType" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbSqlValidityData = { "FairDbSqlValidityData" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult = { "FairDbSqlValidityData::ECompResult" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbValRecordMap = { "FairDbValRecordMap" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR = { "map<unsigned int,const FairDbValRecord*,less<unsigned int>,allocator<pair<const unsigned int,const FairDbValRecord*> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TDictionary = { "TDictionary" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_TMethodCall = { "TMethodCall" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDBObjectMemberTypes = { "FairDBObjectMemberTypes" , 101 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDBObjectMemberValues = { "FairDBObjectMemberValues" , 117 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDBObjectMemberValue = { "FairDBObjectMemberValue" , 115 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairTSQLObject = { "FairTSQLObject" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOFairDbLogOStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogOStreammUgRsPgRsPgR = { "map<string,FairDbLogOStream*,less<string>,allocator<pair<const string,FairDbLogOStream*> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR = { "vector<FairDbLogOStream*,allocator<FairDbLogOStream*> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbLogOStream*,allocator<FairDbLogOStream*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOFairDbLogStatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStatgRsPgRsPgR = { "map<string,FairDbLogStat,less<string>,allocator<pair<const string,FairDbLogStat> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR = { "map<string,FairDbLogStream*,less<string>,allocator<pair<const string,FairDbLogStream*> > >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR = { "vector<FairDbLogCatStream,allocator<FairDbLogCatStream> >" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairDbLogCatStream,allocator<FairDbLogCatStream> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR = { "FairDbReader<FairDbLogEntry>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR = { "FairDbWriter<FairDbLogEntry>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR = { "FairDbWriter<FairDbConfigData>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR = { "FairDbReader<FairDbValRecord>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElementGenericlEintgR = { "FairRegistryElementGeneric<int>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR = { "FairRegistryElementGeneric<double>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR = { "FairRegistryElementGeneric<FairRegistry>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElementGenericlEchargR = { "FairRegistryElementGeneric<char>" , 99 , -1 };
G__linked_taginfo G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR = { "FairRegistryElementGeneric<const char*>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__FairDBDict() {
  G__G__FairDBDictLN_type_info.tagnum = -1 ;
  G__G__FairDBDictLN_tm.tagnum = -1 ;
  G__G__FairDBDictLN_TClass.tagnum = -1 ;
  G__G__FairDBDictLN_TBuffer.tagnum = -1 ;
  G__G__FairDBDictLN_TMemberInspector.tagnum = -1 ;
  G__G__FairDBDictLN_TObject.tagnum = -1 ;
  G__G__FairDBDictLN_TNamed.tagnum = -1 ;
  G__G__FairDBDictLN_TString.tagnum = -1 ;
  G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_string.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_TList.tagnum = -1 ;
  G__G__FairDBDictLN_TBrowser.tagnum = -1 ;
  G__G__FairDBDictLN_TMethod.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_Experiment.tagnum = -1 ;
  G__G__FairDBDictLN_ExperimentcLcLEExperiment.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbDetector.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbDetectorcLcLEDetector.tagnum = -1 ;
  G__G__FairDBDictLN_DataType.tagnum = -1 ;
  G__G__FairDBDictLN_DataTypecLcLEDataType.tagnum = -1 ;
  G__G__FairDBDictLN_timespec.tagnum = -1 ;
  G__G__FairDBDictLN_ValTimeStamp.tagnum = -1 ;
  G__G__FairDBDictLN_ValCondition.tagnum = -1 ;
  G__G__FairDBDictLN_ValInterval.tagnum = -1 ;
  G__G__FairDBDictLN_FairDb.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLVersionTypes.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLTypeRegimes.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLDataTypes.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLDbTypes.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLAbortTest.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbcLcLdA.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbException.tagnum = -1 ;
  G__G__FairDBDictLN_TSQLServer.tagnum = -1 ;
  G__G__FairDBDictLN_TSQLStatement.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbExceptionLog.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__FairDBDictLN_TUrl.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConnection.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbObjTableMap.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbBufferFile.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResult.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableInterface.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbValRecord.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbLogStream.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbCache.tagnum = -1 ;
  G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistry.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElement.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistrycLcLFairRegistryKey.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConfigNotice.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConfigurable.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStreamer.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbOutTableBuffer.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResultPool.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbFieldType.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConfigData.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableMetaData.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbProxy.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableMetaDatacLcLdA.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStatement.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConnectionPool.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableBuffer.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbString.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbValRecordFactory.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResultKey.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey.tagnum = -1 ;
  G__G__FairDBDictLN_listlEFairDbResultKeycLcLVRecKeycOallocatorlEFairDbResultKeycLcLVRecKeygRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResultCombo.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbResultNonCombo.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbRollbackTimes.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbTableInterfaceStore.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbDataTypeUnion.tagnum = -1 ;
  G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_TStopwatch.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStopWatch.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStopWatchcLcLdA.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbStopWatchManager.tagnum = -1 ;
  G__G__FairDBDictLN_listlEFairDbStopWatchmUcOallocatorlEFairDbStopWatchmUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbValRecordFactorycLcLdA.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbLogEntry.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbExtSqlContent.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConfigBuffer.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbConnectionManager.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbSqlValidityData.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbValRecordMap.tagnum = -1 ;
  G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_TArrayD.tagnum = -1 ;
  G__G__FairDBDictLN_TArrayF.tagnum = -1 ;
  G__G__FairDBDictLN_TArrayI.tagnum = -1 ;
  G__G__FairDBDictLN_TDictionary.tagnum = -1 ;
  G__G__FairDBDictLN_TMethodCall.tagnum = -1 ;
  G__G__FairDBDictLN_FairDBObjectMemberTypes.tagnum = -1 ;
  G__G__FairDBDictLN_FairDBObjectMemberValues.tagnum = -1 ;
  G__G__FairDBDictLN_FairDBObjectMemberValue.tagnum = -1 ;
  G__G__FairDBDictLN_FairTSQLObject.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOFairDbLogOStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogOStreammUgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOFairDbLogStatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStatgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR.tagnum = -1 ;
  G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR.tagnum = -1 ;
  G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElementGenericlEintgR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElementGenericlEchargR.tagnum = -1 ;
  G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__FairDBDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_type_info);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_tm);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_string);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TList);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TMethod);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_Experiment),0,-1,0,(char*)NULL,G__setup_memvarExperiment,G__setup_memfuncExperiment);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_ExperimentcLcLEExperiment),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbDetector),sizeof(FairDbDetector),-1,0,(char*)NULL,G__setup_memvarFairDbDetector,G__setup_memfuncFairDbDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbDetectorcLcLEDetector),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_DataType),0,-1,0,(char*)NULL,G__setup_memvarDataType,G__setup_memfuncDataType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_DataTypecLcLEDataType),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_timespec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_ValTimeStamp),sizeof(ValTimeStamp),-1,298752,(char*)NULL,G__setup_memvarValTimeStamp,G__setup_memfuncValTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_ValCondition),sizeof(ValCondition),-1,324864,"COMBO (FairDbDetector,DataType, TimeStamp)",G__setup_memvarValCondition,G__setup_memfuncValCondition);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_ValInterval),sizeof(ValInterval),-1,324864,"IOV Interval of Validity",G__setup_memvarValInterval,G__setup_memfuncValInterval);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDb),0,-1,262144,(char*)NULL,G__setup_memvarFairDb,G__setup_memfuncFairDb);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLVersionTypes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLTypeRegimes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLDataTypes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLDbTypes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLAbortTest);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbException),sizeof(FairDbException),-1,296704,"Database exception record.",G__setup_memvarFairDbException,G__setup_memfuncFairDbException);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TSQLServer);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TSQLStatement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbExceptionLog),sizeof(FairDbExceptionLog),-1,263424,"Object to hold database exceptions",G__setup_memvarFairDbExceptionLog,G__setup_memfuncFairDbExceptionLog);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbExceptioncOallocatorlEFairDbExceptiongRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TUrl);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConnection),sizeof(FairDbConnection),-1,265984,(char*)NULL,G__setup_memvarFairDbConnection,G__setup_memfuncFairDbConnection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbObjTableMap),sizeof(FairDbObjTableMap),-1,294656,"FairDbObjTableMap for a specific database table.",G__setup_memvarFairDbObjTableMap,G__setup_memfuncFairDbObjTableMap);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbBufferFile);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbObjTableMapmUcOallocatorlEFairDbObjTableMapmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResult),sizeof(FairDbResult),-1,265988,"API for  query result",G__setup_memvarFairDbResult,G__setup_memfuncFairDbResult);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableInterface),sizeof(FairDbTableInterface),-1,298496,"Object to query a specific table.",G__setup_memvarFairDbTableInterface,G__setup_memfuncFairDbTableInterface);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbValRecord),sizeof(FairDbValRecord),-1,327424,"Validity interval table row.",G__setup_memvarFairDbValRecord,G__setup_memfuncFairDbValRecord);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbLogStream);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbCache),sizeof(FairDbCache),-1,298496,"Query result cache",G__setup_memvarFairDbCache,G__setup_memfuncFairDbCache);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOlistlEFairDbResultmUcOallocatorlEFairDbResultmUgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistry),sizeof(FairRegistry),-1,130816,(char*)NULL,G__setup_memvarFairRegistry,G__setup_memfuncFairRegistry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElement),sizeof(FairRegistryElement),-1,29958,"class FairRegistryElement",G__setup_memvarFairRegistryElement,G__setup_memfuncFairRegistryElement);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOFairRegistryElementmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairRegistryElementmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistrycLcLFairRegistryKey);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConfigNotice);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConfigurable),sizeof(FairDbConfigurable),-1,263425,(char*)NULL,G__setup_memvarFairDbConfigurable,G__setup_memfuncFairDbConfigurable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStreamer),sizeof(FairDbStreamer),-1,327424,"FairDbStreamer for a specific database table.",G__setup_memvarFairDbStreamer,G__setup_memfuncFairDbStreamer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbOutTableBuffer),sizeof(FairDbOutTableBuffer),-1,295936,"Output buffer for a single table row",G__setup_memvarFairDbOutTableBuffer,G__setup_memfuncFairDbOutTableBuffer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResultPool),sizeof(FairDbResultPool),-1,298496,"ResultPool from Query to database table",G__setup_memvarFairDbResultPool,G__setup_memfuncFairDbResultPool);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbFieldType),sizeof(FairDbFieldType),-1,296704,"Column field types.",G__setup_memvarFairDbFieldType,G__setup_memfuncFairDbFieldType);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbFieldTypecLcLPrecisionLimits);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConfigData),sizeof(FairDbConfigData),-1,292608,"Configuration data.",G__setup_memvarFairDbConfigData,G__setup_memfuncFairDbConfigData);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConfigDatacLcLParammUcOallocatorlEFairDbConfigDatacLcLParammUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableMetaData),sizeof(FairDbTableMetaData),-1,263424,"TableMetaData for database table",G__setup_memvarFairDbTableMetaData,G__setup_memfuncFairDbTableMetaData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbProxy),sizeof(FairDbProxy),-1,298496,"Proxy for physical database.",G__setup_memvarFairDbProxy,G__setup_memfuncFairDbProxy);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLdA);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableMetaDatacLcLColumnAttributes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbTableMetaDatacLcLColumnAttributescOallocatorlEFairDbTableMetaDatacLcLColumnAttributesgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStatement),sizeof(FairDbStatement),-1,295936,"Customized TSQL_Statement",G__setup_memvarFairDbStatement,G__setup_memfuncFairDbStatement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConnectionPool),sizeof(FairDbConnectionPool),-1,263936,"A priority list of Db connections",G__setup_memvarFairDbConnectionPool,G__setup_memfuncFairDbConnectionPool);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConnectionPoolcLcLStatus);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbConnectionmUcOallocatorlEFairDbConnectionmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableBuffer),sizeof(FairDbTableBuffer),-1,298496,"Table Row Buffer",G__setup_memvarFairDbTableBuffer,G__setup_memfuncFairDbTableBuffer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbString),sizeof(FairDbString),-1,296192,"output stringstream",G__setup_memvarFairDbString,G__setup_memfuncFairDbString);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbValRecordFactory),sizeof(FairDbValRecordFactory),-1,295936,"Factory for  Validity Records",G__setup_memvarFairDbValRecordFactory,G__setup_memfuncFairDbValRecordFactory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResultKey),sizeof(FairDbResultKey),-1,324864,(char*)NULL,G__setup_memvarFairDbResultKey,G__setup_memfuncFairDbResultKey);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResultKeycLcLVRecKey),sizeof(FairDbResultKey::VRecKey),-1,295168,(char*)NULL,G__setup_memvarFairDbResultKeycLcLVRecKey,G__setup_memfuncFairDbResultKeycLcLVRecKey);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlEFairDbResultKeycLcLVRecKeycOallocatorlEFairDbResultKeycLcLVRecKeygRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbObjTableMapmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbObjTableMapmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResultCombo),sizeof(FairDbResultCombo),-1,263424,"Results table of composite data.",G__setup_memvarFairDbResultCombo,G__setup_memfuncFairDbResultCombo);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbResultmUcOallocatorlEconstsPFairDbResultmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEconstsPFairDbObjTableMapmUcOallocatorlEconstsPFairDbObjTableMapmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbResultNonCombo),sizeof(FairDbResultNonCombo),-1,265984,"Non-composite data",G__setup_memvarFairDbResultNonCombo,G__setup_memfuncFairDbResultNonCombo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbRollbackTimes),sizeof(FairDbRollbackTimes),-1,263424,"Rollback times using table name.",G__setup_memvarFairDbRollbackTimes,G__setup_memfuncFairDbRollbackTimes);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbTableInterfaceStore),sizeof(FairDbTableInterfaceStore),-1,265984,"Singleton storing FairDbTableInterface.",G__setup_memvarFairDbTableInterfaceStore,G__setup_memfuncFairDbTableInterfaceStore);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbDataTypeUnion),sizeof(FairDbDataTypeUnion),-1,263424,"DataType types Assoc.",G__setup_memvarFairDbDataTypeUnion,G__setup_memfuncFairDbDataTypeUnion);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRcOlesslEDataTypecLcLEDataTypegRcOallocatorlEpairlEconstsPDataTypecLcLEDataTypecOlistlEDataTypecLcLEDataTypecOallocatorlEDataTypecLcLEDataTypegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TStopwatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStopWatch),sizeof(FairDbStopWatch),-1,263424,"Query StopWatch",G__setup_memvarFairDbStopWatch,G__setup_memfuncFairDbStopWatch);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStopWatchcLcLQueryStage);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStopWatchcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbStopWatchManager),sizeof(FairDbStopWatchManager),-1,263424,"Query StopWatch",G__setup_memvarFairDbStopWatchManager,G__setup_memfuncFairDbStopWatchManager);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_listlEFairDbStopWatchmUcOallocatorlEFairDbStopWatchmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbValRecordFactorycLcLdA);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbValRecordcOallocatorlEFairDbValRecordgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEintcOunsignedsPintcOlesslEintgRcOallocatorlEpairlEconstsPintcOunsignedsPintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbLogEntry),sizeof(FairDbLogEntry),-1,292608,"Global Log Entry",G__setup_memvarFairDbLogEntry,G__setup_memfuncFairDbLogEntry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbExtSqlContent),sizeof(FairDbExtSqlContent),-1,296192,"SQL for Extended Content Query",G__setup_memvarFairDbExtSqlContent,G__setup_memfuncFairDbExtSqlContent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConfigBuffer),sizeof(FairDbConfigBuffer),-1,298752,(char*)NULL,G__setup_memvarFairDbConfigBuffer,G__setup_memfuncFairDbConfigBuffer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbReaderlEFairDbConfigDatagR),sizeof(FairDbReader<FairDbConfigData>),-1,298752,"Reader pointer to specific database table.",G__setup_memvarFairDbReaderlEFairDbConfigDatagR,G__setup_memfuncFairDbReaderlEFairDbConfigDatagR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbConnectionManager),sizeof(FairDbConnectionManager),-1,265984,"Class to manage connections",G__setup_memvarFairDbConnectionManager,G__setup_memfuncFairDbConnectionManager);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbExtSqlContentcLcLIntervalType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbSqlValidityData),sizeof(FairDbSqlValidityData),-1,296704,"SQL to generate Validity Data Stream",G__setup_memvarFairDbSqlValidityData,G__setup_memfuncFairDbSqlValidityData);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbSqlValidityDatacLcLECompResult);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbValRecordMap),sizeof(FairDbValRecordMap),-1,298496,"A map list of FairDbValRecords",G__setup_memvarFairDbValRecordMap,G__setup_memfuncFairDbValRecordMap);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEunsignedsPintcOconstsPFairDbValRecordmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOconstsPFairDbValRecordmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TDictionary);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_TMethodCall);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDBObjectMemberTypes),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDBObjectMemberValues),sizeof(FairDBObjectMemberValues),-1,0,(char*)NULL,G__setup_memvarFairDBObjectMemberValues,G__setup_memfuncFairDBObjectMemberValues);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDBObjectMemberValue),sizeof(FairDBObjectMemberValue),-1,298752,(char*)NULL,G__setup_memvarFairDBObjectMemberValue,G__setup_memfuncFairDBObjectMemberValue);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairTSQLObject),sizeof(FairTSQLObject),-1,294656,(char*)NULL,G__setup_memvarFairTSQLObject,G__setup_memfuncFairTSQLObject);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOFairDbLogOStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogOStreammUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogOStreammUcOallocatorlEFairDbLogOStreammUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOFairDbLogStatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_maplEstringcOFairDbLogStreammUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOFairDbLogStreammUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_vectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_reverse_iteratorlEvectorlEFairDbLogCatStreamcOallocatorlEFairDbLogCatStreamgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbReaderlEFairDbLogEntrygR),sizeof(FairDbReader<FairDbLogEntry>),-1,298752,"Reader pointer to specific database table.",G__setup_memvarFairDbReaderlEFairDbLogEntrygR,G__setup_memfuncFairDbReaderlEFairDbLogEntrygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbWriterlEFairDbLogEntrygR),sizeof(FairDbWriter<FairDbLogEntry>),-1,298752,"Generic Writer to  database payload table.",G__setup_memvarFairDbWriterlEFairDbLogEntrygR,G__setup_memfuncFairDbWriterlEFairDbLogEntrygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbWriterlEFairDbConfigDatagR),sizeof(FairDbWriter<FairDbConfigData>),-1,298752,"Generic Writer to  database payload table.",G__setup_memvarFairDbWriterlEFairDbConfigDatagR,G__setup_memfuncFairDbWriterlEFairDbConfigDatagR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairDbReaderlEFairDbValRecordgR),sizeof(FairDbReader<FairDbValRecord>),-1,298752,"Reader pointer to specific database table.",G__setup_memvarFairDbReaderlEFairDbValRecordgR,G__setup_memfuncFairDbReaderlEFairDbValRecordgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElementGenericlEintgR),sizeof(FairRegistryElementGeneric<int>),-1,130816,(char*)NULL,G__setup_memvarFairRegistryElementGenericlEintgR,G__setup_memfuncFairRegistryElementGenericlEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElementGenericlEdoublegR),sizeof(FairRegistryElementGeneric<double>),-1,130816,(char*)NULL,G__setup_memvarFairRegistryElementGenericlEdoublegR,G__setup_memfuncFairRegistryElementGenericlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElementGenericlEFairRegistrygR),sizeof(FairRegistryElementGeneric<FairRegistry>),-1,130816,(char*)NULL,G__setup_memvarFairRegistryElementGenericlEFairRegistrygR,G__setup_memfuncFairRegistryElementGenericlEFairRegistrygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElementGenericlEchargR),sizeof(FairRegistryElementGeneric<char>),-1,130816,(char*)NULL,G__setup_memvarFairRegistryElementGenericlEchargR,G__setup_memfuncFairRegistryElementGenericlEchargR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FairDBDictLN_FairRegistryElementGenericlEconstsPcharmUgR),sizeof(FairRegistryElementGeneric<const char*>),-1,130816,(char*)NULL,G__setup_memvarFairRegistryElementGenericlEconstsPcharmUgR,G__setup_memfuncFairRegistryElementGenericlEconstsPcharmUgR);
}
extern "C" void G__cpp_setupG__FairDBDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__FairDBDict()");
  G__set_cpp_environmentG__FairDBDict();
  G__cpp_setup_tagtableG__FairDBDict();

  G__cpp_setup_inheritanceG__FairDBDict();

  G__cpp_setup_typetableG__FairDBDict();

  G__cpp_setup_memvarG__FairDBDict();

  G__cpp_setup_memfuncG__FairDBDict();
  G__cpp_setup_globalG__FairDBDict();
  G__cpp_setup_funcG__FairDBDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__FairDBDict();
  return;
}
class G__cpp_setup_initG__FairDBDict {
  public:
    G__cpp_setup_initG__FairDBDict() { G__add_setup_func("G__FairDBDict",(G__incsetup)(&G__cpp_setupG__FairDBDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__FairDBDict() { G__remove_setup_func("G__FairDBDict"); }
};
G__cpp_setup_initG__FairDBDict G__cpp_setup_initializerG__FairDBDict;

