//
// File generated by /Users/yassidayyad/fair_install/FairSoftInst/bin/rootcint at Sat Mar  7 15:05:06 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIUsersdIyassidayyaddIfair_installdIATTPCROOT_Mar_devdIbuilddIbasedIG__BaseDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__BaseDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void FairRunAnaProof_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRunAnaProof(void *p = 0);
   static void *newArray_FairRunAnaProof(Long_t size, void *p);
   static void delete_FairRunAnaProof(void *p);
   static void deleteArray_FairRunAnaProof(void *p);
   static void destruct_FairRunAnaProof(void *p);
   static void streamer_FairRunAnaProof(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunAnaProof*)
   {
      ::FairRunAnaProof *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRunAnaProof >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunAnaProof", ::FairRunAnaProof::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRunAnaProof.h", 23,
                  typeid(::FairRunAnaProof), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRunAnaProof::Dictionary, isa_proxy, 0,
                  sizeof(::FairRunAnaProof) );
      instance.SetNew(&new_FairRunAnaProof);
      instance.SetNewArray(&newArray_FairRunAnaProof);
      instance.SetDelete(&delete_FairRunAnaProof);
      instance.SetDeleteArray(&deleteArray_FairRunAnaProof);
      instance.SetDestructor(&destruct_FairRunAnaProof);
      instance.SetStreamerFunc(&streamer_FairRunAnaProof);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunAnaProof*)
   {
      return GenerateInitInstanceLocal((::FairRunAnaProof*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunAnaProof*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairAnaSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairAnaSelector(void *p = 0);
   static void *newArray_FairAnaSelector(Long_t size, void *p);
   static void delete_FairAnaSelector(void *p);
   static void deleteArray_FairAnaSelector(void *p);
   static void destruct_FairAnaSelector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairAnaSelector*)
   {
      ::FairAnaSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairAnaSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairAnaSelector", ::FairAnaSelector::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairAnaSelector.h", 36,
                  typeid(::FairAnaSelector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairAnaSelector::Dictionary, isa_proxy, 4,
                  sizeof(::FairAnaSelector) );
      instance.SetNew(&new_FairAnaSelector);
      instance.SetNewArray(&newArray_FairAnaSelector);
      instance.SetDelete(&delete_FairAnaSelector);
      instance.SetDeleteArray(&deleteArray_FairAnaSelector);
      instance.SetDestructor(&destruct_FairAnaSelector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairAnaSelector*)
   {
      return GenerateInitInstanceLocal((::FairAnaSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairAnaSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMesh_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMesh(void *p = 0);
   static void *newArray_FairMesh(Long_t size, void *p);
   static void delete_FairMesh(void *p);
   static void deleteArray_FairMesh(void *p);
   static void destruct_FairMesh(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMesh*)
   {
      ::FairMesh *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMesh >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMesh", ::FairMesh::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairMesh.h", 28,
                  typeid(::FairMesh), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMesh::Dictionary, isa_proxy, 4,
                  sizeof(::FairMesh) );
      instance.SetNew(&new_FairMesh);
      instance.SetNewArray(&newArray_FairMesh);
      instance.SetDelete(&delete_FairMesh);
      instance.SetDeleteArray(&deleteArray_FairMesh);
      instance.SetDestructor(&destruct_FairMesh);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMesh*)
   {
      return GenerateInitInstanceLocal((::FairMesh*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMesh*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRadGridManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRadGridManager(void *p = 0);
   static void *newArray_FairRadGridManager(Long_t size, void *p);
   static void delete_FairRadGridManager(void *p);
   static void deleteArray_FairRadGridManager(void *p);
   static void destruct_FairRadGridManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRadGridManager*)
   {
      ::FairRadGridManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRadGridManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRadGridManager", ::FairRadGridManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRadGridManager.h", 34,
                  typeid(::FairRadGridManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRadGridManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairRadGridManager) );
      instance.SetNew(&new_FairRadGridManager);
      instance.SetNewArray(&newArray_FairRadGridManager);
      instance.SetDelete(&delete_FairRadGridManager);
      instance.SetDeleteArray(&deleteArray_FairRadGridManager);
      instance.SetDestructor(&destruct_FairRadGridManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRadGridManager*)
   {
      return GenerateInitInstanceLocal((::FairRadGridManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRadGridManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRadLenManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRadLenManager(void *p = 0);
   static void *newArray_FairRadLenManager(Long_t size, void *p);
   static void delete_FairRadLenManager(void *p);
   static void deleteArray_FairRadLenManager(void *p);
   static void destruct_FairRadLenManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRadLenManager*)
   {
      ::FairRadLenManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRadLenManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRadLenManager", ::FairRadLenManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRadLenManager.h", 27,
                  typeid(::FairRadLenManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRadLenManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairRadLenManager) );
      instance.SetNew(&new_FairRadLenManager);
      instance.SetNewArray(&newArray_FairRadLenManager);
      instance.SetDelete(&delete_FairRadLenManager);
      instance.SetDeleteArray(&deleteArray_FairRadLenManager);
      instance.SetDestructor(&destruct_FairRadLenManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRadLenManager*)
   {
      return GenerateInitInstanceLocal((::FairRadLenManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRadLenManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRadMapManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRadMapManager(void *p = 0);
   static void *newArray_FairRadMapManager(Long_t size, void *p);
   static void delete_FairRadMapManager(void *p);
   static void deleteArray_FairRadMapManager(void *p);
   static void destruct_FairRadMapManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRadMapManager*)
   {
      ::FairRadMapManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRadMapManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRadMapManager", ::FairRadMapManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRadMapManager.h", 26,
                  typeid(::FairRadMapManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRadMapManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairRadMapManager) );
      instance.SetNew(&new_FairRadMapManager);
      instance.SetNewArray(&newArray_FairRadMapManager);
      instance.SetDelete(&delete_FairRadMapManager);
      instance.SetDeleteArray(&deleteArray_FairRadMapManager);
      instance.SetDestructor(&destruct_FairRadMapManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRadMapManager*)
   {
      return GenerateInitInstanceLocal((::FairRadMapManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRadMapManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTimeStamp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTimeStamp(void *p = 0);
   static void *newArray_FairTimeStamp(Long_t size, void *p);
   static void delete_FairTimeStamp(void *p);
   static void deleteArray_FairTimeStamp(void *p);
   static void destruct_FairTimeStamp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTimeStamp*)
   {
      ::FairTimeStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTimeStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTimeStamp", ::FairTimeStamp::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairTimeStamp.h", 35,
                  typeid(::FairTimeStamp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTimeStamp::Dictionary, isa_proxy, 4,
                  sizeof(::FairTimeStamp) );
      instance.SetNew(&new_FairTimeStamp);
      instance.SetNewArray(&newArray_FairTimeStamp);
      instance.SetDelete(&delete_FairTimeStamp);
      instance.SetDeleteArray(&deleteArray_FairTimeStamp);
      instance.SetDestructor(&destruct_FairTimeStamp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTimeStamp*)
   {
      return GenerateInitInstanceLocal((::FairTimeStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTimeStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRingSorter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRingSorter(void *p = 0);
   static void *newArray_FairRingSorter(Long_t size, void *p);
   static void delete_FairRingSorter(void *p);
   static void deleteArray_FairRingSorter(void *p);
   static void destruct_FairRingSorter(void *p);
   static void streamer_FairRingSorter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRingSorter*)
   {
      ::FairRingSorter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRingSorter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRingSorter", ::FairRingSorter::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRingSorter.h", 32,
                  typeid(::FairRingSorter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRingSorter::Dictionary, isa_proxy, 0,
                  sizeof(::FairRingSorter) );
      instance.SetNew(&new_FairRingSorter);
      instance.SetNewArray(&newArray_FairRingSorter);
      instance.SetDelete(&delete_FairRingSorter);
      instance.SetDeleteArray(&deleteArray_FairRingSorter);
      instance.SetDestructor(&destruct_FairRingSorter);
      instance.SetStreamerFunc(&streamer_FairRingSorter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRingSorter*)
   {
      return GenerateInitInstanceLocal((::FairRingSorter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRingSorter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairEventHeader(void *p = 0);
   static void *newArray_FairEventHeader(Long_t size, void *p);
   static void delete_FairEventHeader(void *p);
   static void deleteArray_FairEventHeader(void *p);
   static void destruct_FairEventHeader(void *p);
   static void streamer_FairEventHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairEventHeader*)
   {
      ::FairEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairEventHeader", ::FairEventHeader::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairEventHeader.h", 26,
                  typeid(::FairEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairEventHeader::Dictionary, isa_proxy, 0,
                  sizeof(::FairEventHeader) );
      instance.SetNew(&new_FairEventHeader);
      instance.SetNewArray(&newArray_FairEventHeader);
      instance.SetDelete(&delete_FairEventHeader);
      instance.SetDeleteArray(&deleteArray_FairEventHeader);
      instance.SetDestructor(&destruct_FairEventHeader);
      instance.SetStreamerFunc(&streamer_FairEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairEventHeader*)
   {
      return GenerateInitInstanceLocal((::FairEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairFileHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairFileHeader(void *p = 0);
   static void *newArray_FairFileHeader(Long_t size, void *p);
   static void delete_FairFileHeader(void *p);
   static void deleteArray_FairFileHeader(void *p);
   static void destruct_FairFileHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairFileHeader*)
   {
      ::FairFileHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairFileHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairFileHeader", ::FairFileHeader::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairFileHeader.h", 30,
                  typeid(::FairFileHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairFileHeader::Dictionary, isa_proxy, 4,
                  sizeof(::FairFileHeader) );
      instance.SetNew(&new_FairFileHeader);
      instance.SetNewArray(&newArray_FairFileHeader);
      instance.SetDelete(&delete_FairFileHeader);
      instance.SetDeleteArray(&deleteArray_FairFileHeader);
      instance.SetDestructor(&destruct_FairFileHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairFileHeader*)
   {
      return GenerateInitInstanceLocal((::FairFileHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairFileHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairLink_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairLink(void *p = 0);
   static void *newArray_FairLink(Long_t size, void *p);
   static void delete_FairLink(void *p);
   static void deleteArray_FairLink(void *p);
   static void destruct_FairLink(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairLink*)
   {
      ::FairLink *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairLink >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairLink", ::FairLink::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairLink.h", 27,
                  typeid(::FairLink), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairLink::Dictionary, isa_proxy, 4,
                  sizeof(::FairLink) );
      instance.SetNew(&new_FairLink);
      instance.SetNewArray(&newArray_FairLink);
      instance.SetDelete(&delete_FairLink);
      instance.SetDeleteArray(&deleteArray_FairLink);
      instance.SetDestructor(&destruct_FairLink);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairLink*)
   {
      return GenerateInitInstanceLocal((::FairLink*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairLink*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMCEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMCEventHeader(void *p = 0);
   static void *newArray_FairMCEventHeader(Long_t size, void *p);
   static void delete_FairMCEventHeader(void *p);
   static void deleteArray_FairMCEventHeader(void *p);
   static void destruct_FairMCEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMCEventHeader*)
   {
      ::FairMCEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMCEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMCEventHeader", ::FairMCEventHeader::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairMCEventHeader.h", 24,
                  typeid(::FairMCEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMCEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::FairMCEventHeader) );
      instance.SetNew(&new_FairMCEventHeader);
      instance.SetNewArray(&newArray_FairMCEventHeader);
      instance.SetDelete(&delete_FairMCEventHeader);
      instance.SetDeleteArray(&deleteArray_FairMCEventHeader);
      instance.SetDestructor(&destruct_FairMCEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMCEventHeader*)
   {
      return GenerateInitInstanceLocal((::FairMCEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMCEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTSBufferFunctional_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairTSBufferFunctional(void *p);
   static void deleteArray_FairTSBufferFunctional(void *p);
   static void destruct_FairTSBufferFunctional(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTSBufferFunctional*)
   {
      ::FairTSBufferFunctional *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTSBufferFunctional >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTSBufferFunctional", ::FairTSBufferFunctional::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairTSBufferFunctional.h", 154,
                  typeid(::FairTSBufferFunctional), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTSBufferFunctional::Dictionary, isa_proxy, 4,
                  sizeof(::FairTSBufferFunctional) );
      instance.SetDelete(&delete_FairTSBufferFunctional);
      instance.SetDeleteArray(&deleteArray_FairTSBufferFunctional);
      instance.SetDestructor(&destruct_FairTSBufferFunctional);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTSBufferFunctional*)
   {
      return GenerateInitInstanceLocal((::FairTSBufferFunctional*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTSBufferFunctional*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairWriteoutBuffer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairWriteoutBuffer(void *p);
   static void deleteArray_FairWriteoutBuffer(void *p);
   static void destruct_FairWriteoutBuffer(void *p);
   static void streamer_FairWriteoutBuffer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairWriteoutBuffer*)
   {
      ::FairWriteoutBuffer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairWriteoutBuffer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairWriteoutBuffer", ::FairWriteoutBuffer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairWriteoutBuffer.h", 51,
                  typeid(::FairWriteoutBuffer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairWriteoutBuffer::Dictionary, isa_proxy, 0,
                  sizeof(::FairWriteoutBuffer) );
      instance.SetDelete(&delete_FairWriteoutBuffer);
      instance.SetDeleteArray(&deleteArray_FairWriteoutBuffer);
      instance.SetDestructor(&destruct_FairWriteoutBuffer);
      instance.SetStreamerFunc(&streamer_FairWriteoutBuffer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairWriteoutBuffer*)
   {
      return GenerateInitInstanceLocal((::FairWriteoutBuffer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairWriteoutBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRootManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRootManager(void *p = 0);
   static void *newArray_FairRootManager(Long_t size, void *p);
   static void delete_FairRootManager(void *p);
   static void deleteArray_FairRootManager(void *p);
   static void destruct_FairRootManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRootManager*)
   {
      ::FairRootManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRootManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRootManager", ::FairRootManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRootManager.h", 53,
                  typeid(::FairRootManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRootManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairRootManager) );
      instance.SetNew(&new_FairRootManager);
      instance.SetNewArray(&newArray_FairRootManager);
      instance.SetDelete(&delete_FairRootManager);
      instance.SetDeleteArray(&deleteArray_FairRootManager);
      instance.SetDestructor(&destruct_FairRootManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRootManager*)
   {
      return GenerateInitInstanceLocal((::FairRootManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRootManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTask_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTask(void *p = 0);
   static void *newArray_FairTask(Long_t size, void *p);
   static void delete_FairTask(void *p);
   static void deleteArray_FairTask(void *p);
   static void destruct_FairTask(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTask*)
   {
      ::FairTask *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTask >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTask", ::FairTask::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairTask.h", 37,
                  typeid(::FairTask), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTask::Dictionary, isa_proxy, 4,
                  sizeof(::FairTask) );
      instance.SetNew(&new_FairTask);
      instance.SetNewArray(&newArray_FairTask);
      instance.SetDelete(&delete_FairTask);
      instance.SetDeleteArray(&deleteArray_FairTask);
      instance.SetDestructor(&destruct_FairTask);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTask*)
   {
      return GenerateInitInstanceLocal((::FairTask*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTask*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRingSorterTask_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRingSorterTask(void *p = 0);
   static void *newArray_FairRingSorterTask(Long_t size, void *p);
   static void delete_FairRingSorterTask(void *p);
   static void deleteArray_FairRingSorterTask(void *p);
   static void destruct_FairRingSorterTask(void *p);
   static void streamer_FairRingSorterTask(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRingSorterTask*)
   {
      ::FairRingSorterTask *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRingSorterTask >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRingSorterTask", ::FairRingSorterTask::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRingSorterTask.h", 27,
                  typeid(::FairRingSorterTask), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRingSorterTask::Dictionary, isa_proxy, 0,
                  sizeof(::FairRingSorterTask) );
      instance.SetNew(&new_FairRingSorterTask);
      instance.SetNewArray(&newArray_FairRingSorterTask);
      instance.SetDelete(&delete_FairRingSorterTask);
      instance.SetDeleteArray(&deleteArray_FairRingSorterTask);
      instance.SetDestructor(&destruct_FairRingSorterTask);
      instance.SetStreamerFunc(&streamer_FairRingSorterTask);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRingSorterTask*)
   {
      return GenerateInitInstanceLocal((::FairRingSorterTask*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRingSorterTask*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairField(void *p = 0);
   static void *newArray_FairField(Long_t size, void *p);
   static void delete_FairField(void *p);
   static void deleteArray_FairField(void *p);
   static void destruct_FairField(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairField*)
   {
      ::FairField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairField", ::FairField::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/field/FairField.h", 69,
                  typeid(::FairField), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairField::Dictionary, isa_proxy, 4,
                  sizeof(::FairField) );
      instance.SetNew(&new_FairField);
      instance.SetNewArray(&newArray_FairField);
      instance.SetDelete(&delete_FairField);
      instance.SetDeleteArray(&deleteArray_FairField);
      instance.SetDestructor(&destruct_FairField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairField*)
   {
      return GenerateInitInstanceLocal((::FairField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairRun(void *p);
   static void deleteArray_FairRun(void *p);
   static void destruct_FairRun(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRun*)
   {
      ::FairRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRun", ::FairRun::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRun.h", 32,
                  typeid(::FairRun), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRun::Dictionary, isa_proxy, 4,
                  sizeof(::FairRun) );
      instance.SetDelete(&delete_FairRun);
      instance.SetDeleteArray(&deleteArray_FairRun);
      instance.SetDestructor(&destruct_FairRun);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRun*)
   {
      return GenerateInitInstanceLocal((::FairRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRunInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRunInfo(void *p = 0);
   static void *newArray_FairRunInfo(Long_t size, void *p);
   static void delete_FairRunInfo(void *p);
   static void deleteArray_FairRunInfo(void *p);
   static void destruct_FairRunInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunInfo*)
   {
      ::FairRunInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRunInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunInfo", ::FairRunInfo::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairRunInfo.h", 23,
                  typeid(::FairRunInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRunInfo::Dictionary, isa_proxy, 4,
                  sizeof(::FairRunInfo) );
      instance.SetNew(&new_FairRunInfo);
      instance.SetNewArray(&newArray_FairRunInfo);
      instance.SetDelete(&delete_FairRunInfo);
      instance.SetDeleteArray(&deleteArray_FairRunInfo);
      instance.SetDestructor(&destruct_FairRunInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunInfo*)
   {
      return GenerateInitInstanceLocal((::FairRunInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRunAna_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRunAna(void *p = 0);
   static void *newArray_FairRunAna(Long_t size, void *p);
   static void delete_FairRunAna(void *p);
   static void deleteArray_FairRunAna(void *p);
   static void destruct_FairRunAna(void *p);
   static void streamer_FairRunAna(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunAna*)
   {
      ::FairRunAna *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRunAna >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunAna", ::FairRunAna::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRunAna.h", 35,
                  typeid(::FairRunAna), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRunAna::Dictionary, isa_proxy, 0,
                  sizeof(::FairRunAna) );
      instance.SetNew(&new_FairRunAna);
      instance.SetNewArray(&newArray_FairRunAna);
      instance.SetDelete(&delete_FairRunAna);
      instance.SetDeleteArray(&deleteArray_FairRunAna);
      instance.SetDestructor(&destruct_FairRunAna);
      instance.SetStreamerFunc(&streamer_FairRunAna);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunAna*)
   {
      return GenerateInitInstanceLocal((::FairRunAna*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunAna*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairIon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairIon(void *p = 0);
   static void *newArray_FairIon(Long_t size, void *p);
   static void delete_FairIon(void *p);
   static void deleteArray_FairIon(void *p);
   static void destruct_FairIon(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairIon*)
   {
      ::FairIon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairIon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairIon", ::FairIon::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairIon.h", 32,
                  typeid(::FairIon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairIon::Dictionary, isa_proxy, 4,
                  sizeof(::FairIon) );
      instance.SetNew(&new_FairIon);
      instance.SetNewArray(&newArray_FairIon);
      instance.SetDelete(&delete_FairIon);
      instance.SetDeleteArray(&deleteArray_FairIon);
      instance.SetDestructor(&destruct_FairIon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairIon*)
   {
      return GenerateInitInstanceLocal((::FairIon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairIon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairDetector(void *p);
   static void deleteArray_FairDetector(void *p);
   static void destruct_FairDetector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairDetector*)
   {
      ::FairDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairDetector", ::FairDetector::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairDetector.h", 26,
                  typeid(::FairDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairDetector::Dictionary, isa_proxy, 4,
                  sizeof(::FairDetector) );
      instance.SetDelete(&delete_FairDetector);
      instance.SetDeleteArray(&deleteArray_FairDetector);
      instance.SetDestructor(&destruct_FairDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairDetector*)
   {
      return GenerateInitInstanceLocal((::FairDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairGenericStack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGenericStack(void *p = 0);
   static void *newArray_FairGenericStack(Long_t size, void *p);
   static void delete_FairGenericStack(void *p);
   static void deleteArray_FairGenericStack(void *p);
   static void destruct_FairGenericStack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGenericStack*)
   {
      ::FairGenericStack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGenericStack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGenericStack", ::FairGenericStack::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairGenericStack.h", 38,
                  typeid(::FairGenericStack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairGenericStack::Dictionary, isa_proxy, 4,
                  sizeof(::FairGenericStack) );
      instance.SetNew(&new_FairGenericStack);
      instance.SetNewArray(&newArray_FairGenericStack);
      instance.SetDelete(&delete_FairGenericStack);
      instance.SetDeleteArray(&deleteArray_FairGenericStack);
      instance.SetDestructor(&destruct_FairGenericStack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairGenericStack*)
   {
      return GenerateInitInstanceLocal((::FairGenericStack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGenericStack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairPrimaryGenerator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairPrimaryGenerator(void *p = 0);
   static void *newArray_FairPrimaryGenerator(Long_t size, void *p);
   static void delete_FairPrimaryGenerator(void *p);
   static void deleteArray_FairPrimaryGenerator(void *p);
   static void destruct_FairPrimaryGenerator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairPrimaryGenerator*)
   {
      ::FairPrimaryGenerator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairPrimaryGenerator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairPrimaryGenerator", ::FairPrimaryGenerator::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairPrimaryGenerator.h", 42,
                  typeid(::FairPrimaryGenerator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairPrimaryGenerator::Dictionary, isa_proxy, 4,
                  sizeof(::FairPrimaryGenerator) );
      instance.SetNew(&new_FairPrimaryGenerator);
      instance.SetNewArray(&newArray_FairPrimaryGenerator);
      instance.SetDelete(&delete_FairPrimaryGenerator);
      instance.SetDeleteArray(&deleteArray_FairPrimaryGenerator);
      instance.SetDestructor(&destruct_FairPrimaryGenerator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairPrimaryGenerator*)
   {
      return GenerateInitInstanceLocal((::FairPrimaryGenerator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairPrimaryGenerator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTrajFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTrajFilter(void *p = 0);
   static void *newArray_FairTrajFilter(Long_t size, void *p);
   static void delete_FairTrajFilter(void *p);
   static void deleteArray_FairTrajFilter(void *p);
   static void destruct_FairTrajFilter(void *p);
   static void streamer_FairTrajFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTrajFilter*)
   {
      ::FairTrajFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTrajFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTrajFilter", ::FairTrajFilter::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairTrajFilter.h", 44,
                  typeid(::FairTrajFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTrajFilter::Dictionary, isa_proxy, 0,
                  sizeof(::FairTrajFilter) );
      instance.SetNew(&new_FairTrajFilter);
      instance.SetNewArray(&newArray_FairTrajFilter);
      instance.SetDelete(&delete_FairTrajFilter);
      instance.SetDeleteArray(&deleteArray_FairTrajFilter);
      instance.SetDestructor(&destruct_FairTrajFilter);
      instance.SetStreamerFunc(&streamer_FairTrajFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTrajFilter*)
   {
      return GenerateInitInstanceLocal((::FairTrajFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTrajFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairVolume(void *p = 0);
   static void *newArray_FairVolume(Long_t size, void *p);
   static void delete_FairVolume(void *p);
   static void deleteArray_FairVolume(void *p);
   static void destruct_FairVolume(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairVolume*)
   {
      ::FairVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairVolume", ::FairVolume::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairVolume.h", 28,
                  typeid(::FairVolume), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairVolume::Dictionary, isa_proxy, 4,
                  sizeof(::FairVolume) );
      instance.SetNew(&new_FairVolume);
      instance.SetNewArray(&newArray_FairVolume);
      instance.SetDelete(&delete_FairVolume);
      instance.SetDeleteArray(&deleteArray_FairVolume);
      instance.SetDestructor(&destruct_FairVolume);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairVolume*)
   {
      return GenerateInitInstanceLocal((::FairVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMCApplication_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMCApplication(void *p = 0);
   static void *newArray_FairMCApplication(Long_t size, void *p);
   static void delete_FairMCApplication(void *p);
   static void deleteArray_FairMCApplication(void *p);
   static void destruct_FairMCApplication(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMCApplication*)
   {
      ::FairMCApplication *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMCApplication >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMCApplication", ::FairMCApplication::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairMCApplication.h", 55,
                  typeid(::FairMCApplication), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMCApplication::Dictionary, isa_proxy, 4,
                  sizeof(::FairMCApplication) );
      instance.SetNew(&new_FairMCApplication);
      instance.SetNewArray(&newArray_FairMCApplication);
      instance.SetDelete(&delete_FairMCApplication);
      instance.SetDeleteArray(&deleteArray_FairMCApplication);
      instance.SetDestructor(&destruct_FairMCApplication);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMCApplication*)
   {
      return GenerateInitInstanceLocal((::FairMCApplication*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMCApplication*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairParticle(void *p = 0);
   static void *newArray_FairParticle(Long_t size, void *p);
   static void delete_FairParticle(void *p);
   static void deleteArray_FairParticle(void *p);
   static void destruct_FairParticle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairParticle*)
   {
      ::FairParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairParticle", ::FairParticle::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairParticle.h", 28,
                  typeid(::FairParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairParticle::Dictionary, isa_proxy, 4,
                  sizeof(::FairParticle) );
      instance.SetNew(&new_FairParticle);
      instance.SetNewArray(&newArray_FairParticle);
      instance.SetDelete(&delete_FairParticle);
      instance.SetDeleteArray(&deleteArray_FairParticle);
      instance.SetDestructor(&destruct_FairParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairParticle*)
   {
      return GenerateInitInstanceLocal((::FairParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairModule(void *p = 0);
   static void *newArray_FairModule(Long_t size, void *p);
   static void delete_FairModule(void *p);
   static void deleteArray_FairModule(void *p);
   static void destruct_FairModule(void *p);
   static void streamer_FairModule(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairModule*)
   {
      ::FairModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairModule", ::FairModule::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairModule.h", 50,
                  typeid(::FairModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairModule::Dictionary, isa_proxy, 1,
                  sizeof(::FairModule) );
      instance.SetNew(&new_FairModule);
      instance.SetNewArray(&newArray_FairModule);
      instance.SetDelete(&delete_FairModule);
      instance.SetDeleteArray(&deleteArray_FairModule);
      instance.SetDestructor(&destruct_FairModule);
      instance.SetStreamerFunc(&streamer_FairModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairModule*)
   {
      return GenerateInitInstanceLocal((::FairModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRunSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRunSim(void *p = 0);
   static void *newArray_FairRunSim(Long_t size, void *p);
   static void delete_FairRunSim(void *p);
   static void deleteArray_FairRunSim(void *p);
   static void destruct_FairRunSim(void *p);
   static void streamer_FairRunSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunSim*)
   {
      ::FairRunSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRunSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunSim", ::FairRunSim::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRunSim.h", 34,
                  typeid(::FairRunSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRunSim::Dictionary, isa_proxy, 0,
                  sizeof(::FairRunSim) );
      instance.SetNew(&new_FairRunSim);
      instance.SetNewArray(&newArray_FairRunSim);
      instance.SetDelete(&delete_FairRunSim);
      instance.SetDeleteArray(&deleteArray_FairRunSim);
      instance.SetDestructor(&destruct_FairRunSim);
      instance.SetStreamerFunc(&streamer_FairRunSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunSim*)
   {
      return GenerateInitInstanceLocal((::FairRunSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMultiLinkedData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMultiLinkedData(void *p = 0);
   static void *newArray_FairMultiLinkedData(Long_t size, void *p);
   static void delete_FairMultiLinkedData(void *p);
   static void deleteArray_FairMultiLinkedData(void *p);
   static void destruct_FairMultiLinkedData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMultiLinkedData*)
   {
      ::FairMultiLinkedData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMultiLinkedData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMultiLinkedData", ::FairMultiLinkedData::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairMultiLinkedData.h", 31,
                  typeid(::FairMultiLinkedData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMultiLinkedData::Dictionary, isa_proxy, 4,
                  sizeof(::FairMultiLinkedData) );
      instance.SetNew(&new_FairMultiLinkedData);
      instance.SetNewArray(&newArray_FairMultiLinkedData);
      instance.SetDelete(&delete_FairMultiLinkedData);
      instance.SetDeleteArray(&deleteArray_FairMultiLinkedData);
      instance.SetDestructor(&destruct_FairMultiLinkedData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMultiLinkedData*)
   {
      return GenerateInitInstanceLocal((::FairMultiLinkedData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMultiLinkedData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMultiLinkedData_Interface_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMultiLinkedData_Interface(void *p = 0);
   static void *newArray_FairMultiLinkedData_Interface(Long_t size, void *p);
   static void delete_FairMultiLinkedData_Interface(void *p);
   static void deleteArray_FairMultiLinkedData_Interface(void *p);
   static void destruct_FairMultiLinkedData_Interface(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMultiLinkedData_Interface*)
   {
      ::FairMultiLinkedData_Interface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMultiLinkedData_Interface >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMultiLinkedData_Interface", ::FairMultiLinkedData_Interface::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairMultiLinkedData_Interface.h", 28,
                  typeid(::FairMultiLinkedData_Interface), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMultiLinkedData_Interface::Dictionary, isa_proxy, 4,
                  sizeof(::FairMultiLinkedData_Interface) );
      instance.SetNew(&new_FairMultiLinkedData_Interface);
      instance.SetNewArray(&newArray_FairMultiLinkedData_Interface);
      instance.SetDelete(&delete_FairMultiLinkedData_Interface);
      instance.SetDeleteArray(&deleteArray_FairMultiLinkedData_Interface);
      instance.SetDestructor(&destruct_FairMultiLinkedData_Interface);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMultiLinkedData_Interface*)
   {
      return GenerateInitInstanceLocal((::FairMultiLinkedData_Interface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMultiLinkedData_Interface*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairSource(void *p);
   static void deleteArray_FairSource(void *p);
   static void destruct_FairSource(void *p);
   static void streamer_FairSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairSource*)
   {
      ::FairSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairSource", ::FairSource::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/FairSource.h", 21,
                  typeid(::FairSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairSource::Dictionary, isa_proxy, 0,
                  sizeof(::FairSource) );
      instance.SetDelete(&delete_FairSource);
      instance.SetDeleteArray(&deleteArray_FairSource);
      instance.SetDestructor(&destruct_FairSource);
      instance.SetStreamerFunc(&streamer_FairSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairSource*)
   {
      return GenerateInitInstanceLocal((::FairSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRunOnline_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRunOnline(void *p = 0);
   static void *newArray_FairRunOnline(Long_t size, void *p);
   static void delete_FairRunOnline(void *p);
   static void deleteArray_FairRunOnline(void *p);
   static void destruct_FairRunOnline(void *p);
   static void streamer_FairRunOnline(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunOnline*)
   {
      ::FairRunOnline *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRunOnline >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunOnline", ::FairRunOnline::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairRunOnline.h", 37,
                  typeid(::FairRunOnline), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRunOnline::Dictionary, isa_proxy, 0,
                  sizeof(::FairRunOnline) );
      instance.SetNew(&new_FairRunOnline);
      instance.SetNewArray(&newArray_FairRunOnline);
      instance.SetDelete(&delete_FairRunOnline);
      instance.SetDeleteArray(&deleteArray_FairRunOnline);
      instance.SetDestructor(&destruct_FairRunOnline);
      instance.SetStreamerFunc(&streamer_FairRunOnline);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunOnline*)
   {
      return GenerateInitInstanceLocal((::FairRunOnline*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunOnline*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairLinkManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairLinkManager(void *p = 0);
   static void *newArray_FairLinkManager(Long_t size, void *p);
   static void delete_FairLinkManager(void *p);
   static void deleteArray_FairLinkManager(void *p);
   static void destruct_FairLinkManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairLinkManager*)
   {
      ::FairLinkManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairLinkManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairLinkManager", ::FairLinkManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/steer/FairLinkManager.h", 15,
                  typeid(::FairLinkManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairLinkManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairLinkManager) );
      instance.SetNew(&new_FairLinkManager);
      instance.SetNewArray(&newArray_FairLinkManager);
      instance.SetDelete(&delete_FairLinkManager);
      instance.SetDeleteArray(&deleteArray_FairLinkManager);
      instance.SetDestructor(&destruct_FairLinkManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairLinkManager*)
   {
      return GenerateInitInstanceLocal((::FairLinkManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairLinkManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairBaseContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairBaseContFact(void *p = 0);
   static void *newArray_FairBaseContFact(Long_t size, void *p);
   static void delete_FairBaseContFact(void *p);
   static void deleteArray_FairBaseContFact(void *p);
   static void destruct_FairBaseContFact(void *p);
   static void streamer_FairBaseContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairBaseContFact*)
   {
      ::FairBaseContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairBaseContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairBaseContFact", ::FairBaseContFact::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairBaseContFact.h", 18,
                  typeid(::FairBaseContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairBaseContFact::Dictionary, isa_proxy, 0,
                  sizeof(::FairBaseContFact) );
      instance.SetNew(&new_FairBaseContFact);
      instance.SetNewArray(&newArray_FairBaseContFact);
      instance.SetDelete(&delete_FairBaseContFact);
      instance.SetDeleteArray(&deleteArray_FairBaseContFact);
      instance.SetDestructor(&destruct_FairBaseContFact);
      instance.SetStreamerFunc(&streamer_FairBaseContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairBaseContFact*)
   {
      return GenerateInitInstanceLocal((::FairBaseContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairBaseContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairBaseParSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairBaseParSet(void *p = 0);
   static void *newArray_FairBaseParSet(Long_t size, void *p);
   static void delete_FairBaseParSet(void *p);
   static void deleteArray_FairBaseParSet(void *p);
   static void destruct_FairBaseParSet(void *p);
   static void streamer_FairBaseParSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairBaseParSet*)
   {
      ::FairBaseParSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairBaseParSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairBaseParSet", ::FairBaseParSet::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairBaseParSet.h", 27,
                  typeid(::FairBaseParSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairBaseParSet::Dictionary, isa_proxy, 0,
                  sizeof(::FairBaseParSet) );
      instance.SetNew(&new_FairBaseParSet);
      instance.SetNewArray(&newArray_FairBaseParSet);
      instance.SetDelete(&delete_FairBaseParSet);
      instance.SetDeleteArray(&deleteArray_FairBaseParSet);
      instance.SetDestructor(&destruct_FairBaseParSet);
      instance.SetStreamerFunc(&streamer_FairBaseParSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairBaseParSet*)
   {
      return GenerateInitInstanceLocal((::FairBaseParSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairBaseParSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairGeoParSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoParSet(void *p = 0);
   static void *newArray_FairGeoParSet(Long_t size, void *p);
   static void delete_FairGeoParSet(void *p);
   static void deleteArray_FairGeoParSet(void *p);
   static void destruct_FairGeoParSet(void *p);
   static void streamer_FairGeoParSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoParSet*)
   {
      ::FairGeoParSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoParSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoParSet", ::FairGeoParSet::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairGeoParSet.h", 25,
                  typeid(::FairGeoParSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairGeoParSet::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoParSet) );
      instance.SetNew(&new_FairGeoParSet);
      instance.SetNewArray(&newArray_FairGeoParSet);
      instance.SetDelete(&delete_FairGeoParSet);
      instance.SetDeleteArray(&deleteArray_FairGeoParSet);
      instance.SetDestructor(&destruct_FairGeoParSet);
      instance.SetStreamerFunc(&streamer_FairGeoParSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairGeoParSet*)
   {
      return GenerateInitInstanceLocal((::FairGeoParSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoParSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairVolumeList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairVolumeList(void *p = 0);
   static void *newArray_FairVolumeList(Long_t size, void *p);
   static void delete_FairVolumeList(void *p);
   static void deleteArray_FairVolumeList(void *p);
   static void destruct_FairVolumeList(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairVolumeList*)
   {
      ::FairVolumeList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairVolumeList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairVolumeList", ::FairVolumeList::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairVolumeList.h", 27,
                  typeid(::FairVolumeList), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairVolumeList::Dictionary, isa_proxy, 4,
                  sizeof(::FairVolumeList) );
      instance.SetNew(&new_FairVolumeList);
      instance.SetNewArray(&newArray_FairVolumeList);
      instance.SetDelete(&delete_FairVolumeList);
      instance.SetDeleteArray(&deleteArray_FairVolumeList);
      instance.SetDestructor(&destruct_FairVolumeList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairVolumeList*)
   {
      return GenerateInitInstanceLocal((::FairVolumeList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairVolumeList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairGeaneApplication_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeaneApplication(void *p = 0);
   static void *newArray_FairGeaneApplication(Long_t size, void *p);
   static void delete_FairGeaneApplication(void *p);
   static void deleteArray_FairGeaneApplication(void *p);
   static void destruct_FairGeaneApplication(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeaneApplication*)
   {
      ::FairGeaneApplication *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeaneApplication >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeaneApplication", ::FairGeaneApplication::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairGeaneApplication.h", 32,
                  typeid(::FairGeaneApplication), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairGeaneApplication::Dictionary, isa_proxy, 4,
                  sizeof(::FairGeaneApplication) );
      instance.SetNew(&new_FairGeaneApplication);
      instance.SetNewArray(&newArray_FairGeaneApplication);
      instance.SetDelete(&delete_FairGeaneApplication);
      instance.SetDeleteArray(&deleteArray_FairGeaneApplication);
      instance.SetDestructor(&destruct_FairGeaneApplication);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairGeaneApplication*)
   {
      return GenerateInitInstanceLocal((::FairGeaneApplication*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeaneApplication*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairGenerator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairGenerator(void *p);
   static void deleteArray_FairGenerator(void *p);
   static void destruct_FairGenerator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGenerator*)
   {
      ::FairGenerator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGenerator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGenerator", ::FairGenerator::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairGenerator.h", 35,
                  typeid(::FairGenerator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairGenerator::Dictionary, isa_proxy, 4,
                  sizeof(::FairGenerator) );
      instance.SetDelete(&delete_FairGenerator);
      instance.SetDeleteArray(&deleteArray_FairGenerator);
      instance.SetDestructor(&destruct_FairGenerator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairGenerator*)
   {
      return GenerateInitInstanceLocal((::FairGenerator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGenerator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRunIdGenerator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void FairRunIdGenerator_Dictionary();
   static void *new_FairRunIdGenerator(void *p = 0);
   static void *newArray_FairRunIdGenerator(Long_t size, void *p);
   static void delete_FairRunIdGenerator(void *p);
   static void deleteArray_FairRunIdGenerator(void *p);
   static void destruct_FairRunIdGenerator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRunIdGenerator*)
   {
      ::FairRunIdGenerator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::FairRunIdGenerator),0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRunIdGenerator", "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/sim/FairRunIdGenerator.h", 20,
                  typeid(::FairRunIdGenerator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &FairRunIdGenerator_Dictionary, isa_proxy, 0,
                  sizeof(::FairRunIdGenerator) );
      instance.SetNew(&new_FairRunIdGenerator);
      instance.SetNewArray(&newArray_FairRunIdGenerator);
      instance.SetDelete(&delete_FairRunIdGenerator);
      instance.SetDeleteArray(&deleteArray_FairRunIdGenerator);
      instance.SetDestructor(&destruct_FairRunIdGenerator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRunIdGenerator*)
   {
      return GenerateInitInstanceLocal((::FairRunIdGenerator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRunIdGenerator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void FairRunIdGenerator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunIdGenerator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRecoEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRecoEventHeader(void *p = 0);
   static void *newArray_FairRecoEventHeader(Long_t size, void *p);
   static void delete_FairRecoEventHeader(void *p);
   static void deleteArray_FairRecoEventHeader(void *p);
   static void destruct_FairRecoEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRecoEventHeader*)
   {
      ::FairRecoEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRecoEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRecoEventHeader", ::FairRecoEventHeader::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairRecoEventHeader.h", 26,
                  typeid(::FairRecoEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRecoEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::FairRecoEventHeader) );
      instance.SetNew(&new_FairRecoEventHeader);
      instance.SetNewArray(&newArray_FairRecoEventHeader);
      instance.SetDelete(&delete_FairRecoEventHeader);
      instance.SetDeleteArray(&deleteArray_FairRecoEventHeader);
      instance.SetDestructor(&destruct_FairRecoEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRecoEventHeader*)
   {
      return GenerateInitInstanceLocal((::FairRecoEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRecoEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairEventBuilder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairEventBuilder(void *p);
   static void deleteArray_FairEventBuilder(void *p);
   static void destruct_FairEventBuilder(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairEventBuilder*)
   {
      ::FairEventBuilder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairEventBuilder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairEventBuilder", ::FairEventBuilder::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairEventBuilder.h", 50,
                  typeid(::FairEventBuilder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairEventBuilder::Dictionary, isa_proxy, 4,
                  sizeof(::FairEventBuilder) );
      instance.SetDelete(&delete_FairEventBuilder);
      instance.SetDeleteArray(&deleteArray_FairEventBuilder);
      instance.SetDestructor(&destruct_FairEventBuilder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairEventBuilder*)
   {
      return GenerateInitInstanceLocal((::FairEventBuilder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairEventBuilder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairEventBuilderManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairEventBuilderManager(void *p);
   static void deleteArray_FairEventBuilderManager(void *p);
   static void destruct_FairEventBuilderManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairEventBuilderManager*)
   {
      ::FairEventBuilderManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairEventBuilderManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairEventBuilderManager", ::FairEventBuilderManager::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairEventBuilderManager.h", 48,
                  typeid(::FairEventBuilderManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairEventBuilderManager::Dictionary, isa_proxy, 4,
                  sizeof(::FairEventBuilderManager) );
      instance.SetDelete(&delete_FairEventBuilderManager);
      instance.SetDeleteArray(&deleteArray_FairEventBuilderManager);
      instance.SetDestructor(&destruct_FairEventBuilderManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairEventBuilderManager*)
   {
      return GenerateInitInstanceLocal((::FairEventBuilderManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairEventBuilderManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairFileInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairFileInfo(void *p = 0);
   static void *newArray_FairFileInfo(Long_t size, void *p);
   static void delete_FairFileInfo(void *p);
   static void deleteArray_FairFileInfo(void *p);
   static void destruct_FairFileInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairFileInfo*)
   {
      ::FairFileInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairFileInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairFileInfo", ::FairFileInfo::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairFileInfo.h", 22,
                  typeid(::FairFileInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairFileInfo::Dictionary, isa_proxy, 4,
                  sizeof(::FairFileInfo) );
      instance.SetNew(&new_FairFileInfo);
      instance.SetNewArray(&newArray_FairFileInfo);
      instance.SetDelete(&delete_FairFileInfo);
      instance.SetDeleteArray(&deleteArray_FairFileInfo);
      instance.SetDestructor(&destruct_FairFileInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairFileInfo*)
   {
      return GenerateInitInstanceLocal((::FairFileInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairFileInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairHit(void *p = 0);
   static void *newArray_FairHit(Long_t size, void *p);
   static void delete_FairHit(void *p);
   static void deleteArray_FairHit(void *p);
   static void destruct_FairHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairHit*)
   {
      ::FairHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairHit", ::FairHit::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairHit.h", 30,
                  typeid(::FairHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairHit::Dictionary, isa_proxy, 4,
                  sizeof(::FairHit) );
      instance.SetNew(&new_FairHit);
      instance.SetNewArray(&newArray_FairHit);
      instance.SetDelete(&delete_FairHit);
      instance.SetDeleteArray(&deleteArray_FairHit);
      instance.SetDestructor(&destruct_FairHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairHit*)
   {
      return GenerateInitInstanceLocal((::FairHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMCPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMCPoint(void *p = 0);
   static void *newArray_FairMCPoint(Long_t size, void *p);
   static void delete_FairMCPoint(void *p);
   static void deleteArray_FairMCPoint(void *p);
   static void destruct_FairMCPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMCPoint*)
   {
      ::FairMCPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMCPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMCPoint", ::FairMCPoint::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairMCPoint.h", 30,
                  typeid(::FairMCPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMCPoint::Dictionary, isa_proxy, 4,
                  sizeof(::FairMCPoint) );
      instance.SetNew(&new_FairMCPoint);
      instance.SetNewArray(&newArray_FairMCPoint);
      instance.SetDelete(&delete_FairMCPoint);
      instance.SetDeleteArray(&deleteArray_FairMCPoint);
      instance.SetDestructor(&destruct_FairMCPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMCPoint*)
   {
      return GenerateInitInstanceLocal((::FairMCPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMCPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRadLenPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRadLenPoint(void *p = 0);
   static void *newArray_FairRadLenPoint(Long_t size, void *p);
   static void delete_FairRadLenPoint(void *p);
   static void deleteArray_FairRadLenPoint(void *p);
   static void destruct_FairRadLenPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRadLenPoint*)
   {
      ::FairRadLenPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRadLenPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRadLenPoint", ::FairRadLenPoint::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairRadLenPoint.h", 28,
                  typeid(::FairRadLenPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRadLenPoint::Dictionary, isa_proxy, 4,
                  sizeof(::FairRadLenPoint) );
      instance.SetNew(&new_FairRadLenPoint);
      instance.SetNewArray(&newArray_FairRadLenPoint);
      instance.SetDelete(&delete_FairRadLenPoint);
      instance.SetDeleteArray(&deleteArray_FairRadLenPoint);
      instance.SetDestructor(&destruct_FairRadLenPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRadLenPoint*)
   {
      return GenerateInitInstanceLocal((::FairRadLenPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRadLenPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRadMapPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairRadMapPoint(void *p = 0);
   static void *newArray_FairRadMapPoint(Long_t size, void *p);
   static void delete_FairRadMapPoint(void *p);
   static void deleteArray_FairRadMapPoint(void *p);
   static void destruct_FairRadMapPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRadMapPoint*)
   {
      ::FairRadMapPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRadMapPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRadMapPoint", ::FairRadMapPoint::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairRadMapPoint.h", 27,
                  typeid(::FairRadMapPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRadMapPoint::Dictionary, isa_proxy, 4,
                  sizeof(::FairRadMapPoint) );
      instance.SetNew(&new_FairRadMapPoint);
      instance.SetNewArray(&newArray_FairRadMapPoint);
      instance.SetDelete(&delete_FairRadMapPoint);
      instance.SetDeleteArray(&deleteArray_FairRadMapPoint);
      instance.SetDestructor(&destruct_FairRadMapPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRadMapPoint*)
   {
      return GenerateInitInstanceLocal((::FairRadMapPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRadMapPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairTrackParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTrackParam(void *p = 0);
   static void *newArray_FairTrackParam(Long_t size, void *p);
   static void delete_FairTrackParam(void *p);
   static void deleteArray_FairTrackParam(void *p);
   static void destruct_FairTrackParam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTrackParam*)
   {
      ::FairTrackParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTrackParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTrackParam", ::FairTrackParam::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/event/FairTrackParam.h", 37,
                  typeid(::FairTrackParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairTrackParam::Dictionary, isa_proxy, 4,
                  sizeof(::FairTrackParam) );
      instance.SetNew(&new_FairTrackParam);
      instance.SetNewArray(&newArray_FairTrackParam);
      instance.SetDelete(&delete_FairTrackParam);
      instance.SetDeleteArray(&deleteArray_FairTrackParam);
      instance.SetDestructor(&destruct_FairTrackParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairTrackParam*)
   {
      return GenerateInitInstanceLocal((::FairTrackParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTrackParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairFieldFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairFieldFactory(void *p = 0);
   static void *newArray_FairFieldFactory(Long_t size, void *p);
   static void delete_FairFieldFactory(void *p);
   static void deleteArray_FairFieldFactory(void *p);
   static void destruct_FairFieldFactory(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairFieldFactory*)
   {
      ::FairFieldFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairFieldFactory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairFieldFactory", ::FairFieldFactory::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/field/FairFieldFactory.h", 22,
                  typeid(::FairFieldFactory), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairFieldFactory::Dictionary, isa_proxy, 4,
                  sizeof(::FairFieldFactory) );
      instance.SetNew(&new_FairFieldFactory);
      instance.SetNewArray(&newArray_FairFieldFactory);
      instance.SetDelete(&delete_FairFieldFactory);
      instance.SetDeleteArray(&deleteArray_FairFieldFactory);
      instance.SetDestructor(&destruct_FairFieldFactory);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairFieldFactory*)
   {
      return GenerateInitInstanceLocal((::FairFieldFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairFieldFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRKPropagator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairRKPropagator(void *p);
   static void deleteArray_FairRKPropagator(void *p);
   static void destruct_FairRKPropagator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRKPropagator*)
   {
      ::FairRKPropagator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRKPropagator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRKPropagator", ::FairRKPropagator::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/field/FairRKPropagator.h", 25,
                  typeid(::FairRKPropagator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRKPropagator::Dictionary, isa_proxy, 4,
                  sizeof(::FairRKPropagator) );
      instance.SetDelete(&delete_FairRKPropagator);
      instance.SetDeleteArray(&deleteArray_FairRKPropagator);
      instance.SetDestructor(&destruct_FairRKPropagator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRKPropagator*)
   {
      return GenerateInitInstanceLocal((::FairRKPropagator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRKPropagator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairUnpack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairUnpack(void *p);
   static void deleteArray_FairUnpack(void *p);
   static void destruct_FairUnpack(void *p);
   static void streamer_FairUnpack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairUnpack*)
   {
      ::FairUnpack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairUnpack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairUnpack", ::FairUnpack::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/FairUnpack.h", 22,
                  typeid(::FairUnpack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairUnpack::Dictionary, isa_proxy, 0,
                  sizeof(::FairUnpack) );
      instance.SetDelete(&delete_FairUnpack);
      instance.SetDeleteArray(&deleteArray_FairUnpack);
      instance.SetDestructor(&destruct_FairUnpack);
      instance.SetStreamerFunc(&streamer_FairUnpack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairUnpack*)
   {
      return GenerateInitInstanceLocal((::FairUnpack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairUnpack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairMbsSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairMbsSource(void *p);
   static void deleteArray_FairMbsSource(void *p);
   static void destruct_FairMbsSource(void *p);
   static void streamer_FairMbsSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMbsSource*)
   {
      ::FairMbsSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMbsSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMbsSource", ::FairMbsSource::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/FairMbsSource.h", 26,
                  typeid(::FairMbsSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairMbsSource::Dictionary, isa_proxy, 0,
                  sizeof(::FairMbsSource) );
      instance.SetDelete(&delete_FairMbsSource);
      instance.SetDeleteArray(&deleteArray_FairMbsSource);
      instance.SetDestructor(&destruct_FairMbsSource);
      instance.SetStreamerFunc(&streamer_FairMbsSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairMbsSource*)
   {
      return GenerateInitInstanceLocal((::FairMbsSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMbsSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairLmdSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairLmdSource(void *p = 0);
   static void *newArray_FairLmdSource(Long_t size, void *p);
   static void delete_FairLmdSource(void *p);
   static void deleteArray_FairLmdSource(void *p);
   static void destruct_FairLmdSource(void *p);
   static void streamer_FairLmdSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairLmdSource*)
   {
      ::FairLmdSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairLmdSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairLmdSource", ::FairLmdSource::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/FairLmdSource.h", 33,
                  typeid(::FairLmdSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairLmdSource::Dictionary, isa_proxy, 0,
                  sizeof(::FairLmdSource) );
      instance.SetNew(&new_FairLmdSource);
      instance.SetNewArray(&newArray_FairLmdSource);
      instance.SetDelete(&delete_FairLmdSource);
      instance.SetDeleteArray(&deleteArray_FairLmdSource);
      instance.SetDestructor(&destruct_FairLmdSource);
      instance.SetStreamerFunc(&streamer_FairLmdSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairLmdSource*)
   {
      return GenerateInitInstanceLocal((::FairLmdSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairLmdSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRevBuffer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MRevBuffer(void *p);
   static void deleteArray_MRevBuffer(void *p);
   static void destruct_MRevBuffer(void *p);
   static void streamer_MRevBuffer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRevBuffer*)
   {
      ::MRevBuffer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRevBuffer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRevBuffer", ::MRevBuffer::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/MRevBuffer.h", 70,
                  typeid(::MRevBuffer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRevBuffer::Dictionary, isa_proxy, 0,
                  sizeof(::MRevBuffer) );
      instance.SetDelete(&delete_MRevBuffer);
      instance.SetDeleteArray(&deleteArray_MRevBuffer);
      instance.SetDestructor(&destruct_MRevBuffer);
      instance.SetStreamerFunc(&streamer_MRevBuffer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRevBuffer*)
   {
      return GenerateInitInstanceLocal((::MRevBuffer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRevBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void REvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_REvent(void *p = 0);
   static void *newArray_REvent(Long_t size, void *p);
   static void delete_REvent(void *p);
   static void deleteArray_REvent(void *p);
   static void destruct_REvent(void *p);
   static void streamer_REvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::REvent*)
   {
      ::REvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::REvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("REvent", ::REvent::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/MRevBuffer.h", 34,
                  typeid(::REvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::REvent::Dictionary, isa_proxy, 0,
                  sizeof(::REvent) );
      instance.SetNew(&new_REvent);
      instance.SetNewArray(&newArray_REvent);
      instance.SetDelete(&delete_REvent);
      instance.SetDeleteArray(&deleteArray_REvent);
      instance.SetDestructor(&destruct_REvent);
      instance.SetStreamerFunc(&streamer_REvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::REvent*)
   {
      return GenerateInitInstanceLocal((::REvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::REvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FairRemoteSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FairRemoteSource(void *p);
   static void deleteArray_FairRemoteSource(void *p);
   static void destruct_FairRemoteSource(void *p);
   static void streamer_FairRemoteSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FairRemoteSource*)
   {
      ::FairRemoteSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairRemoteSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairRemoteSource", ::FairRemoteSource::Class_Version(), "/Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/base/source/FairRemoteSource.h", 26,
                  typeid(::FairRemoteSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FairRemoteSource::Dictionary, isa_proxy, 0,
                  sizeof(::FairRemoteSource) );
      instance.SetDelete(&delete_FairRemoteSource);
      instance.SetDeleteArray(&deleteArray_FairRemoteSource);
      instance.SetDestructor(&destruct_FairRemoteSource);
      instance.SetStreamerFunc(&streamer_FairRemoteSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FairRemoteSource*)
   {
      return GenerateInitInstanceLocal((::FairRemoteSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairRemoteSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr FairRunAnaProof::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRunAnaProof::Class_Name()
{
   return "FairRunAnaProof";
}

//______________________________________________________________________________
const char *FairRunAnaProof::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAnaProof*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRunAnaProof::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAnaProof*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRunAnaProof::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAnaProof*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRunAnaProof::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAnaProof*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairAnaSelector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairAnaSelector::Class_Name()
{
   return "FairAnaSelector";
}

//______________________________________________________________________________
const char *FairAnaSelector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairAnaSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairAnaSelector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairAnaSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairAnaSelector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairAnaSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairAnaSelector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairAnaSelector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMesh::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMesh::Class_Name()
{
   return "FairMesh";
}

//______________________________________________________________________________
const char *FairMesh::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMesh*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMesh::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMesh*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMesh::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMesh*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMesh::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMesh*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRadGridManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRadGridManager::Class_Name()
{
   return "FairRadGridManager";
}

//______________________________________________________________________________
const char *FairRadGridManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadGridManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRadGridManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadGridManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRadGridManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadGridManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRadGridManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadGridManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRadLenManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRadLenManager::Class_Name()
{
   return "FairRadLenManager";
}

//______________________________________________________________________________
const char *FairRadLenManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRadLenManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRadLenManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRadLenManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRadMapManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRadMapManager::Class_Name()
{
   return "FairRadMapManager";
}

//______________________________________________________________________________
const char *FairRadMapManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRadMapManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRadMapManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRadMapManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTimeStamp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTimeStamp::Class_Name()
{
   return "FairTimeStamp";
}

//______________________________________________________________________________
const char *FairTimeStamp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTimeStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTimeStamp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTimeStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTimeStamp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTimeStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTimeStamp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTimeStamp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRingSorter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRingSorter::Class_Name()
{
   return "FairRingSorter";
}

//______________________________________________________________________________
const char *FairRingSorter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRingSorter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRingSorter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRingSorter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairEventHeader::Class_Name()
{
   return "FairEventHeader";
}

//______________________________________________________________________________
const char *FairEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairFileHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairFileHeader::Class_Name()
{
   return "FairFileHeader";
}

//______________________________________________________________________________
const char *FairFileHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairFileHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairFileHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairFileHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairLink::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairLink::Class_Name()
{
   return "FairLink";
}

//______________________________________________________________________________
const char *FairLink::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLink*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairLink::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLink*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairLink::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLink*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairLink::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLink*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMCEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMCEventHeader::Class_Name()
{
   return "FairMCEventHeader";
}

//______________________________________________________________________________
const char *FairMCEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMCEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMCEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMCEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTSBufferFunctional::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTSBufferFunctional::Class_Name()
{
   return "FairTSBufferFunctional";
}

//______________________________________________________________________________
const char *FairTSBufferFunctional::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSBufferFunctional*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTSBufferFunctional::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSBufferFunctional*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTSBufferFunctional::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSBufferFunctional*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTSBufferFunctional::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTSBufferFunctional*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairWriteoutBuffer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairWriteoutBuffer::Class_Name()
{
   return "FairWriteoutBuffer";
}

//______________________________________________________________________________
const char *FairWriteoutBuffer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairWriteoutBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairWriteoutBuffer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairWriteoutBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairWriteoutBuffer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairWriteoutBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairWriteoutBuffer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairWriteoutBuffer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRootManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRootManager::Class_Name()
{
   return "FairRootManager";
}

//______________________________________________________________________________
const char *FairRootManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRootManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRootManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRootManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRootManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRootManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRootManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRootManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTask::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTask::Class_Name()
{
   return "FairTask";
}

//______________________________________________________________________________
const char *FairTask::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTask*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTask::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTask*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTask::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTask*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTask::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTask*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRingSorterTask::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRingSorterTask::Class_Name()
{
   return "FairRingSorterTask";
}

//______________________________________________________________________________
const char *FairRingSorterTask::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorterTask*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRingSorterTask::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorterTask*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRingSorterTask::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorterTask*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRingSorterTask::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRingSorterTask*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairField::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairField::Class_Name()
{
   return "FairField";
}

//______________________________________________________________________________
const char *FairField::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairField::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairField::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairField::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairField*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRun::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRun::Class_Name()
{
   return "FairRun";
}

//______________________________________________________________________________
const char *FairRun::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRun::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRun::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRun::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRun*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRunInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRunInfo::Class_Name()
{
   return "FairRunInfo";
}

//______________________________________________________________________________
const char *FairRunInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRunInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRunInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRunInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRunAna::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRunAna::Class_Name()
{
   return "FairRunAna";
}

//______________________________________________________________________________
const char *FairRunAna::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAna*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRunAna::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAna*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRunAna::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAna*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRunAna::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunAna*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairIon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairIon::Class_Name()
{
   return "FairIon";
}

//______________________________________________________________________________
const char *FairIon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairIon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairIon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairIon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairIon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairIon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairIon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairIon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairDetector::Class_Name()
{
   return "FairDetector";
}

//______________________________________________________________________________
const char *FairDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairGenericStack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairGenericStack::Class_Name()
{
   return "FairGenericStack";
}

//______________________________________________________________________________
const char *FairGenericStack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenericStack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGenericStack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenericStack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGenericStack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenericStack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGenericStack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenericStack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairPrimaryGenerator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairPrimaryGenerator::Class_Name()
{
   return "FairPrimaryGenerator";
}

//______________________________________________________________________________
const char *FairPrimaryGenerator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairPrimaryGenerator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairPrimaryGenerator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairPrimaryGenerator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairPrimaryGenerator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairPrimaryGenerator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairPrimaryGenerator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairPrimaryGenerator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTrajFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTrajFilter::Class_Name()
{
   return "FairTrajFilter";
}

//______________________________________________________________________________
const char *FairTrajFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrajFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTrajFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrajFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTrajFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrajFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTrajFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrajFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairVolume::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairVolume::Class_Name()
{
   return "FairVolume";
}

//______________________________________________________________________________
const char *FairVolume::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairVolume::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairVolume::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairVolume::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolume*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMCApplication::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMCApplication::Class_Name()
{
   return "FairMCApplication";
}

//______________________________________________________________________________
const char *FairMCApplication::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCApplication*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMCApplication::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCApplication*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMCApplication::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCApplication*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMCApplication::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCApplication*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairParticle::Class_Name()
{
   return "FairParticle";
}

//______________________________________________________________________________
const char *FairParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairModule::Class_Name()
{
   return "FairModule";
}

//______________________________________________________________________________
const char *FairModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairModule*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRunSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRunSim::Class_Name()
{
   return "FairRunSim";
}

//______________________________________________________________________________
const char *FairRunSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRunSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRunSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRunSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMultiLinkedData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMultiLinkedData::Class_Name()
{
   return "FairMultiLinkedData";
}

//______________________________________________________________________________
const char *FairMultiLinkedData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMultiLinkedData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMultiLinkedData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMultiLinkedData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMultiLinkedData_Interface::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMultiLinkedData_Interface::Class_Name()
{
   return "FairMultiLinkedData_Interface";
}

//______________________________________________________________________________
const char *FairMultiLinkedData_Interface::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData_Interface*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMultiLinkedData_Interface::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData_Interface*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMultiLinkedData_Interface::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData_Interface*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMultiLinkedData_Interface::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMultiLinkedData_Interface*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairSource::Class_Name()
{
   return "FairSource";
}

//______________________________________________________________________________
const char *FairSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRunOnline::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRunOnline::Class_Name()
{
   return "FairRunOnline";
}

//______________________________________________________________________________
const char *FairRunOnline::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunOnline*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRunOnline::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunOnline*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRunOnline::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunOnline*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRunOnline::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRunOnline*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairLinkManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairLinkManager::Class_Name()
{
   return "FairLinkManager";
}

//______________________________________________________________________________
const char *FairLinkManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLinkManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairLinkManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLinkManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairLinkManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLinkManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairLinkManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLinkManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairBaseContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairBaseContFact::Class_Name()
{
   return "FairBaseContFact";
}

//______________________________________________________________________________
const char *FairBaseContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairBaseContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairBaseContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairBaseContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairBaseParSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairBaseParSet::Class_Name()
{
   return "FairBaseParSet";
}

//______________________________________________________________________________
const char *FairBaseParSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseParSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairBaseParSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseParSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairBaseParSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseParSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairBaseParSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairBaseParSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairGeoParSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoParSet::Class_Name()
{
   return "FairGeoParSet";
}

//______________________________________________________________________________
const char *FairGeoParSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeoParSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoParSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeoParSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoParSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeoParSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoParSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeoParSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairVolumeList::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairVolumeList::Class_Name()
{
   return "FairVolumeList";
}

//______________________________________________________________________________
const char *FairVolumeList::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolumeList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairVolumeList::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolumeList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairVolumeList::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolumeList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairVolumeList::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairVolumeList*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairGeaneApplication::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeaneApplication::Class_Name()
{
   return "FairGeaneApplication";
}

//______________________________________________________________________________
const char *FairGeaneApplication::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeaneApplication*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeaneApplication::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeaneApplication*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeaneApplication::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeaneApplication*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeaneApplication::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGeaneApplication*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairGenerator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairGenerator::Class_Name()
{
   return "FairGenerator";
}

//______________________________________________________________________________
const char *FairGenerator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenerator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGenerator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenerator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGenerator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenerator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGenerator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairGenerator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRecoEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRecoEventHeader::Class_Name()
{
   return "FairRecoEventHeader";
}

//______________________________________________________________________________
const char *FairRecoEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRecoEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRecoEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRecoEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRecoEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRecoEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRecoEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRecoEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairEventBuilder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairEventBuilder::Class_Name()
{
   return "FairEventBuilder";
}

//______________________________________________________________________________
const char *FairEventBuilder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairEventBuilder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairEventBuilder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairEventBuilder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairEventBuilderManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairEventBuilderManager::Class_Name()
{
   return "FairEventBuilderManager";
}

//______________________________________________________________________________
const char *FairEventBuilderManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilderManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairEventBuilderManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilderManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairEventBuilderManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilderManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairEventBuilderManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairEventBuilderManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairFileInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairFileInfo::Class_Name()
{
   return "FairFileInfo";
}

//______________________________________________________________________________
const char *FairFileInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairFileInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairFileInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairFileInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFileInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairHit::Class_Name()
{
   return "FairHit";
}

//______________________________________________________________________________
const char *FairHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMCPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMCPoint::Class_Name()
{
   return "FairMCPoint";
}

//______________________________________________________________________________
const char *FairMCPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMCPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMCPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMCPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMCPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRadLenPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRadLenPoint::Class_Name()
{
   return "FairRadLenPoint";
}

//______________________________________________________________________________
const char *FairRadLenPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRadLenPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRadLenPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRadLenPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadLenPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRadMapPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRadMapPoint::Class_Name()
{
   return "FairRadMapPoint";
}

//______________________________________________________________________________
const char *FairRadMapPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRadMapPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRadMapPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRadMapPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRadMapPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairTrackParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairTrackParam::Class_Name()
{
   return "FairTrackParam";
}

//______________________________________________________________________________
const char *FairTrackParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrackParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTrackParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrackParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTrackParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrackParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTrackParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairTrackParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairFieldFactory::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairFieldFactory::Class_Name()
{
   return "FairFieldFactory";
}

//______________________________________________________________________________
const char *FairFieldFactory::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFieldFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairFieldFactory::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairFieldFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairFieldFactory::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFieldFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairFieldFactory::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairFieldFactory*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRKPropagator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRKPropagator::Class_Name()
{
   return "FairRKPropagator";
}

//______________________________________________________________________________
const char *FairRKPropagator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRKPropagator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRKPropagator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRKPropagator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRKPropagator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRKPropagator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRKPropagator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRKPropagator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairUnpack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairUnpack::Class_Name()
{
   return "FairUnpack";
}

//______________________________________________________________________________
const char *FairUnpack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairUnpack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairUnpack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairUnpack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairUnpack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairUnpack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairUnpack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairUnpack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairMbsSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairMbsSource::Class_Name()
{
   return "FairMbsSource";
}

//______________________________________________________________________________
const char *FairMbsSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMbsSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMbsSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairMbsSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMbsSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMbsSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMbsSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairMbsSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairLmdSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairLmdSource::Class_Name()
{
   return "FairLmdSource";
}

//______________________________________________________________________________
const char *FairLmdSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLmdSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairLmdSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairLmdSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairLmdSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLmdSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairLmdSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairLmdSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRevBuffer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRevBuffer::Class_Name()
{
   return "MRevBuffer";
}

//______________________________________________________________________________
const char *MRevBuffer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRevBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRevBuffer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRevBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRevBuffer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRevBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRevBuffer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRevBuffer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr REvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *REvent::Class_Name()
{
   return "REvent";
}

//______________________________________________________________________________
const char *REvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::REvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int REvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::REvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void REvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::REvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *REvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::REvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FairRemoteSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FairRemoteSource::Class_Name()
{
   return "FairRemoteSource";
}

//______________________________________________________________________________
const char *FairRemoteSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRemoteSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairRemoteSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FairRemoteSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairRemoteSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRemoteSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairRemoteSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FairRemoteSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void FairBaseContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairBaseContFact.

   FairContFact::Streamer(R__b);
}

//______________________________________________________________________________
void FairBaseContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairBaseContFact.
      TClass *R__cl = ::FairBaseContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairBaseContFact(void *p) {
      return  p ? new(p) ::FairBaseContFact : new ::FairBaseContFact;
   }
   static void *newArray_FairBaseContFact(Long_t nElements, void *p) {
      return p ? new(p) ::FairBaseContFact[nElements] : new ::FairBaseContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairBaseContFact(void *p) {
      delete ((::FairBaseContFact*)p);
   }
   static void deleteArray_FairBaseContFact(void *p) {
      delete [] ((::FairBaseContFact*)p);
   }
   static void destruct_FairBaseContFact(void *p) {
      typedef ::FairBaseContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairBaseContFact(TBuffer &buf, void *obj) {
      ((::FairBaseContFact*)obj)->::FairBaseContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairBaseContFact

//______________________________________________________________________________
void FairBaseParSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairBaseParSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairParGenericSet::Streamer(R__b);
      R__b >> fDetList;
      R__b >> fPriGen;
      R__b >> fBeamMom;
      R__b >> fContNameList;
      R__b.CheckByteCount(R__s, R__c, FairBaseParSet::IsA());
   } else {
      R__c = R__b.WriteVersion(FairBaseParSet::IsA(), kTRUE);
      FairParGenericSet::Streamer(R__b);
      R__b << fDetList;
      R__b << fPriGen;
      R__b << fBeamMom;
      R__b << fContNameList;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairBaseParSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairBaseParSet.
      TClass *R__cl = ::FairBaseParSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetList", &fDetList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPriGen", &fPriGen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamMom", &fBeamMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fContNameList", &fContNameList);
      FairParGenericSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairBaseParSet(void *p) {
      return  p ? new(p) ::FairBaseParSet : new ::FairBaseParSet;
   }
   static void *newArray_FairBaseParSet(Long_t nElements, void *p) {
      return p ? new(p) ::FairBaseParSet[nElements] : new ::FairBaseParSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairBaseParSet(void *p) {
      delete ((::FairBaseParSet*)p);
   }
   static void deleteArray_FairBaseParSet(void *p) {
      delete [] ((::FairBaseParSet*)p);
   }
   static void destruct_FairBaseParSet(void *p) {
      typedef ::FairBaseParSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairBaseParSet(TBuffer &buf, void *obj) {
      ((::FairBaseParSet*)obj)->::FairBaseParSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairBaseParSet

//______________________________________________________________________________
void FairGeoParSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoParSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairParGenericSet::Streamer(R__b);
      R__b >> fGeom;
      R__b.CheckByteCount(R__s, R__c, FairGeoParSet::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoParSet::IsA(), kTRUE);
      FairParGenericSet::Streamer(R__b);
      R__b << fGeom;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoParSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoParSet.
      TClass *R__cl = ::FairGeoParSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeoNodes", &fGeoNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      FairParGenericSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairGeoParSet(void *p) {
      return  p ? new(p) ::FairGeoParSet : new ::FairGeoParSet;
   }
   static void *newArray_FairGeoParSet(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoParSet[nElements] : new ::FairGeoParSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoParSet(void *p) {
      delete ((::FairGeoParSet*)p);
   }
   static void deleteArray_FairGeoParSet(void *p) {
      delete [] ((::FairGeoParSet*)p);
   }
   static void destruct_FairGeoParSet(void *p) {
      typedef ::FairGeoParSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoParSet(TBuffer &buf, void *obj) {
      ((::FairGeoParSet*)obj)->::FairGeoParSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairGeoParSet

//______________________________________________________________________________
void FairDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairDetector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairDetector::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairDetector::Class(),this);
   }
}

//______________________________________________________________________________
void FairDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairDetector.
      TClass *R__cl = ::FairDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetId", &fDetId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairDetector(void *p) {
      delete ((::FairDetector*)p);
   }
   static void deleteArray_FairDetector(void *p) {
      delete [] ((::FairDetector*)p);
   }
   static void destruct_FairDetector(void *p) {
      typedef ::FairDetector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairDetector

//______________________________________________________________________________
void FairEventBuilder::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairEventBuilder.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairEventBuilder::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairEventBuilder::Class(),this);
   }
}

//______________________________________________________________________________
void FairEventBuilder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairEventBuilder.
      TClass *R__cl = ::FairEventBuilder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBuilderName", &fBuilderName);
      R__insp.InspectMember(fBuilderName, "fBuilderName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimer", &fTimer);
      R__insp.InspectMember(fTimer, "fTimer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExecTime", &fExecTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentifier", &fIdentifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxAllowedEventCreationTime", &fMaxAllowedEventCreationTime);
      FairWriteoutBuffer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairEventBuilder(void *p) {
      delete ((::FairEventBuilder*)p);
   }
   static void deleteArray_FairEventBuilder(void *p) {
      delete [] ((::FairEventBuilder*)p);
   }
   static void destruct_FairEventBuilder(void *p) {
      typedef ::FairEventBuilder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairEventBuilder

//______________________________________________________________________________
void FairEventBuilderManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairEventBuilderManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairEventBuilderManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairEventBuilderManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairEventBuilderManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairEventBuilderManager.
      TClass *R__cl = ::FairEventBuilderManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventBuilders", (void*)&fEventBuilders);
      R__insp.InspectMember("vector<FairEventBuilder*>", (void*)&fEventBuilders, "fEventBuilders.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPossibleEvents", (void*)&fPossibleEvents);
      R__insp.InspectMember("vector<std::vector<std::pair<double,FairRecoEventHeader*> > >", (void*)&fPossibleEvents, "fPossibleEvents.", false);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairEventBuilderManager(void *p) {
      delete ((::FairEventBuilderManager*)p);
   }
   static void deleteArray_FairEventBuilderManager(void *p) {
      delete [] ((::FairEventBuilderManager*)p);
   }
   static void destruct_FairEventBuilderManager(void *p) {
      typedef ::FairEventBuilderManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairEventBuilderManager

//______________________________________________________________________________
void FairEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairEventHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fRunId;
      R__b >> fEventTime;
      R__b >> fInputFileId;
      R__b >> fMCEntryNo;
      R__b.CheckByteCount(R__s, R__c, FairEventHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(FairEventHeader::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fRunId;
      R__b << fEventTime;
      R__b << fInputFileId;
      R__b << fMCEntryNo;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairEventHeader.
      TClass *R__cl = ::FairEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTime", &fEventTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputFileId", &fInputFileId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCEntryNo", &fMCEntryNo);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairEventHeader(void *p) {
      return  p ? new(p) ::FairEventHeader : new ::FairEventHeader;
   }
   static void *newArray_FairEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::FairEventHeader[nElements] : new ::FairEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairEventHeader(void *p) {
      delete ((::FairEventHeader*)p);
   }
   static void deleteArray_FairEventHeader(void *p) {
      delete [] ((::FairEventHeader*)p);
   }
   static void destruct_FairEventHeader(void *p) {
      typedef ::FairEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairEventHeader(TBuffer &buf, void *obj) {
      ((::FairEventHeader*)obj)->::FairEventHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairEventHeader

//______________________________________________________________________________
void FairFileHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairFileHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairFileHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairFileHeader::Class(),this);
   }
}

//______________________________________________________________________________
void FairFileHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairFileHeader.
      TClass *R__cl = ::FairFileHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTaskList", &fTaskList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileList", &fFileList);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairFileHeader(void *p) {
      return  p ? new(p) ::FairFileHeader : new ::FairFileHeader;
   }
   static void *newArray_FairFileHeader(Long_t nElements, void *p) {
      return p ? new(p) ::FairFileHeader[nElements] : new ::FairFileHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairFileHeader(void *p) {
      delete ((::FairFileHeader*)p);
   }
   static void deleteArray_FairFileHeader(void *p) {
      delete [] ((::FairFileHeader*)p);
   }
   static void destruct_FairFileHeader(void *p) {
      typedef ::FairFileHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairFileHeader

//______________________________________________________________________________
void FairGeaneApplication::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeaneApplication.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairGeaneApplication::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairGeaneApplication::Class(),this);
   }
}

//______________________________________________________________________________
void FairGeaneApplication::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeaneApplication.
      TClass *R__cl = ::FairGeaneApplication::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxField", &fxField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcVersion", &fMcVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrkPos", &fTrkPos);
      R__insp.InspectMember(fTrkPos, "fTrkPos.");
      TVirtualMCApplication::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairGeaneApplication(void *p) {
      return  p ? new(p) ::FairGeaneApplication : new ::FairGeaneApplication;
   }
   static void *newArray_FairGeaneApplication(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeaneApplication[nElements] : new ::FairGeaneApplication[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeaneApplication(void *p) {
      delete ((::FairGeaneApplication*)p);
   }
   static void deleteArray_FairGeaneApplication(void *p) {
      delete [] ((::FairGeaneApplication*)p);
   }
   static void destruct_FairGeaneApplication(void *p) {
      typedef ::FairGeaneApplication current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairGeaneApplication

//______________________________________________________________________________
void FairGenerator::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGenerator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairGenerator::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairGenerator::Class(),this);
   }
}

//______________________________________________________________________________
void FairGenerator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGenerator.
      TClass *R__cl = ::FairGenerator::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairGenerator(void *p) {
      delete ((::FairGenerator*)p);
   }
   static void deleteArray_FairGenerator(void *p) {
      delete [] ((::FairGenerator*)p);
   }
   static void destruct_FairGenerator(void *p) {
      typedef ::FairGenerator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairGenerator

//______________________________________________________________________________
void FairLink::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairLink.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairLink::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairLink::Class(),this);
   }
}

//______________________________________________________________________________
void FairLink::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairLink.
      TClass *R__cl = ::FairLink::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFile", &fFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntry", &fEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeight", &fWeight);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairLink(void *p) {
      return  p ? new(p) ::FairLink : new ::FairLink;
   }
   static void *newArray_FairLink(Long_t nElements, void *p) {
      return p ? new(p) ::FairLink[nElements] : new ::FairLink[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairLink(void *p) {
      delete ((::FairLink*)p);
   }
   static void deleteArray_FairLink(void *p) {
      delete [] ((::FairLink*)p);
   }
   static void destruct_FairLink(void *p) {
      typedef ::FairLink current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairLink

//______________________________________________________________________________
void FairMultiLinkedData::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMultiLinkedData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMultiLinkedData::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMultiLinkedData::Class(),this);
   }
}

//______________________________________________________________________________
void FairMultiLinkedData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMultiLinkedData.
      TClass *R__cl = ::FairMultiLinkedData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLinks", (void*)&fLinks);
      R__insp.InspectMember("set<FairLink>", (void*)&fLinks, "fLinks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPersistanceCheck", &fPersistanceCheck);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultType", &fDefaultType);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMultiLinkedData(void *p) {
      return  p ? new(p) ::FairMultiLinkedData : new ::FairMultiLinkedData;
   }
   static void *newArray_FairMultiLinkedData(Long_t nElements, void *p) {
      return p ? new(p) ::FairMultiLinkedData[nElements] : new ::FairMultiLinkedData[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMultiLinkedData(void *p) {
      delete ((::FairMultiLinkedData*)p);
   }
   static void deleteArray_FairMultiLinkedData(void *p) {
      delete [] ((::FairMultiLinkedData*)p);
   }
   static void destruct_FairMultiLinkedData(void *p) {
      typedef ::FairMultiLinkedData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMultiLinkedData

//______________________________________________________________________________
void FairMultiLinkedData_Interface::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMultiLinkedData_Interface.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMultiLinkedData_Interface::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMultiLinkedData_Interface::Class(),this);
   }
}

//______________________________________________________________________________
void FairMultiLinkedData_Interface::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMultiLinkedData_Interface.
      TClass *R__cl = ::FairMultiLinkedData_Interface::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefToLinks", &fRefToLinks);
      R__insp.InspectMember(fRefToLinks, "fRefToLinks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLinkBranchName", &fLinkBranchName);
      R__insp.InspectMember(fLinkBranchName, "fLinkBranchName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMultiLinkedData_Interface(void *p) {
      return  p ? new(p) ::FairMultiLinkedData_Interface : new ::FairMultiLinkedData_Interface;
   }
   static void *newArray_FairMultiLinkedData_Interface(Long_t nElements, void *p) {
      return p ? new(p) ::FairMultiLinkedData_Interface[nElements] : new ::FairMultiLinkedData_Interface[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMultiLinkedData_Interface(void *p) {
      delete ((::FairMultiLinkedData_Interface*)p);
   }
   static void deleteArray_FairMultiLinkedData_Interface(void *p) {
      delete [] ((::FairMultiLinkedData_Interface*)p);
   }
   static void destruct_FairMultiLinkedData_Interface(void *p) {
      typedef ::FairMultiLinkedData_Interface current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMultiLinkedData_Interface

//______________________________________________________________________________
void FairHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairHit::Class(),this);
   }
}

//______________________________________________________________________________
void FairHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairHit.
      TClass *R__cl = ::FairHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDz", &fDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefIndex", &fRefIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorID", &fDetectorID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      FairTimeStamp::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairHit(void *p) {
      return  p ? new(p) ::FairHit : new ::FairHit;
   }
   static void *newArray_FairHit(Long_t nElements, void *p) {
      return p ? new(p) ::FairHit[nElements] : new ::FairHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairHit(void *p) {
      delete ((::FairHit*)p);
   }
   static void deleteArray_FairHit(void *p) {
      delete [] ((::FairHit*)p);
   }
   static void destruct_FairHit(void *p) {
      typedef ::FairHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairHit

//______________________________________________________________________________
void FairIon::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairIon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairIon::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairIon::Class(),this);
   }
}

//______________________________________________________________________________
void FairIon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairIon.
      TClass *R__cl = ::FairIon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ", &fQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExcEnergy", &fExcEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &fMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairIon(void *p) {
      return  p ? new(p) ::FairIon : new ::FairIon;
   }
   static void *newArray_FairIon(Long_t nElements, void *p) {
      return p ? new(p) ::FairIon[nElements] : new ::FairIon[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairIon(void *p) {
      delete ((::FairIon*)p);
   }
   static void deleteArray_FairIon(void *p) {
      delete [] ((::FairIon*)p);
   }
   static void destruct_FairIon(void *p) {
      typedef ::FairIon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairIon

//______________________________________________________________________________
void FairMCApplication::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMCApplication.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMCApplication::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMCApplication::Class(),this);
   }
}

//______________________________________________________________________________
void FairMCApplication::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMCApplication.
      TClass *R__cl = ::FairMCApplication::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fActDetIter", &fActDetIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fActiveDetectors", &fActiveDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFairTaskList", &fFairTaskList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetIter", &fDetIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetectors", &fDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetMap", &fDetMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fModIter", &fModIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fModules", &fModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoSenVolumes", &fNoSenVolumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPythiaDecayer", &fPythiaDecayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPythiaDecayerConfig", &fPythiaDecayerConfig);
      R__insp.InspectMember(fPythiaDecayerConfig, "fPythiaDecayerConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStack", &fStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRootManager", &fRootManager);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSenVolumes", &fSenVolumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxField", &fxField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvGen", &fEvGen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcVersion", &fMcVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrajFilter", &fTrajFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrajAccepted", &fTrajAccepted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserDecay", &fUserDecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserDecayConfig", &fUserDecayConfig);
      R__insp.InspectMember(fUserDecayConfig, "fUserDecayConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisVol", &fDisVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisDet", &fDisDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolMap", (void*)&fVolMap);
      R__insp.InspectMember("multimap<Int_t,FairVolume*>", (void*)&fVolMap, "fVolMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolIter", (void*)&fVolIter);
      R__insp.InspectMember("multimap<int,FairVolume*,less<int>,allocator<pair<const int,FairVolume*> > >::iterator", (void*)&fVolIter, "fVolIter.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModVolMap", (void*)&fModVolMap);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&fModVolMap, "fModVolMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModVolIter", (void*)&fModVolIter);
      R__insp.InspectMember("map<int,int,less<int>,allocator<pair<const int,int> > >::iterator", (void*)&fModVolIter, "fModVolIter.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrkPos", &fTrkPos);
      R__insp.InspectMember(fTrkPos, "fTrkPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadLength", &fRadLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRadLenMan", &fRadLenMan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadMap", &fRadMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRadMapMan", &fRadMapMan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRadGridMan", &fRadGridMan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventHeader", &fEventHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCEventHeader", &fMCEventHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunInfo", &fRunInfo);
      R__insp.InspectMember(fRunInfo, "fRunInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeometryIsInitialized", &fGeometryIsInitialized);
      TVirtualMCApplication::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMCApplication(void *p) {
      return  p ? new(p) ::FairMCApplication : new ::FairMCApplication;
   }
   static void *newArray_FairMCApplication(Long_t nElements, void *p) {
      return p ? new(p) ::FairMCApplication[nElements] : new ::FairMCApplication[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMCApplication(void *p) {
      delete ((::FairMCApplication*)p);
   }
   static void deleteArray_FairMCApplication(void *p) {
      delete [] ((::FairMCApplication*)p);
   }
   static void destruct_FairMCApplication(void *p) {
      typedef ::FairMCApplication current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMCApplication

//______________________________________________________________________________
void FairMCEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMCEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMCEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMCEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void FairMCEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMCEventHeader.
      TClass *R__cl = ::FairMCEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT", &fT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPrim", &fNPrim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSet", &fIsSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRotX", &fRotX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRotY", &fRotY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRotZ", &fRotZ);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMCEventHeader(void *p) {
      return  p ? new(p) ::FairMCEventHeader : new ::FairMCEventHeader;
   }
   static void *newArray_FairMCEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::FairMCEventHeader[nElements] : new ::FairMCEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMCEventHeader(void *p) {
      delete ((::FairMCEventHeader*)p);
   }
   static void deleteArray_FairMCEventHeader(void *p) {
      delete [] ((::FairMCEventHeader*)p);
   }
   static void destruct_FairMCEventHeader(void *p) {
      typedef ::FairMCEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMCEventHeader

//______________________________________________________________________________
void FairMCPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMCPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMCPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMCPoint::Class(),this);
   }
}

//______________________________________________________________________________
void FairMCPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMCPoint.
      TClass *R__cl = ::FairMCPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPz", &fPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorID", &fDetectorID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      FairMultiLinkedData_Interface::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMCPoint(void *p) {
      return  p ? new(p) ::FairMCPoint : new ::FairMCPoint;
   }
   static void *newArray_FairMCPoint(Long_t nElements, void *p) {
      return p ? new(p) ::FairMCPoint[nElements] : new ::FairMCPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMCPoint(void *p) {
      delete ((::FairMCPoint*)p);
   }
   static void deleteArray_FairMCPoint(void *p) {
      delete [] ((::FairMCPoint*)p);
   }
   static void destruct_FairMCPoint(void *p) {
      typedef ::FairMCPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMCPoint

//______________________________________________________________________________
void FairModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairModule.
      TClass *R__cl = ::FairModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherVolumeName", &fMotherVolumeName);
      R__insp.InspectMember(fMotherVolumeName, "fMotherVolumeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgeoVer", &fgeoVer);
      R__insp.InspectMember(fgeoVer, "fgeoVer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgeoName", &fgeoName);
      R__insp.InspectMember(fgeoName, "fgeoName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModId", &fModId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActive", &fActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbOfSensitiveVol", &fNbOfSensitiveVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerboseLevel", &fVerboseLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*flGeoPar", &flGeoPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kGeoSaved", &kGeoSaved);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairModule(void *p) {
      return  p ? new(p) ::FairModule : new ::FairModule;
   }
   static void *newArray_FairModule(Long_t nElements, void *p) {
      return p ? new(p) ::FairModule[nElements] : new ::FairModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairModule(void *p) {
      delete ((::FairModule*)p);
   }
   static void deleteArray_FairModule(void *p) {
      delete [] ((::FairModule*)p);
   }
   static void destruct_FairModule(void *p) {
      typedef ::FairModule current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairModule(TBuffer &buf, void *obj) {
      ((::FairModule*)obj)->::FairModule::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairModule

//______________________________________________________________________________
void FairParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairParticle::Class(),this);
   }
}

//______________________________________________________________________________
void FairParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairParticle.
      TClass *R__cl = ::FairParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpdg", &fpdg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticle", &fParticle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMother", &fMother);
      R__insp.InspectMember(fMother, "fMother.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDaughters", &fDaughters);
      R__insp.InspectMember(fDaughters, "fDaughters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fname", &fname);
      R__insp.InspectMember(const_cast<  TString &>( fname ), "fname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmcType", &fmcType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmass", &fmass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcharge", &fcharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDecayTime", &fDecayTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpType", &fpType);
      R__insp.InspectMember(const_cast<  TString &>( fpType ), "fpType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwidth", &fwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiSpin", &fiSpin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiParity", &fiParity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiConjugation", &fiConjugation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiIsospin", &fiIsospin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiIsospinZ", &fiIsospinZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgParity", &fgParity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flepton", &flepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbaryon", &fbaryon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fstable", &fstable);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairParticle(void *p) {
      return  p ? new(p) ::FairParticle : new ::FairParticle;
   }
   static void *newArray_FairParticle(Long_t nElements, void *p) {
      return p ? new(p) ::FairParticle[nElements] : new ::FairParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairParticle(void *p) {
      delete ((::FairParticle*)p);
   }
   static void deleteArray_FairParticle(void *p) {
      delete [] ((::FairParticle*)p);
   }
   static void destruct_FairParticle(void *p) {
      typedef ::FairParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairParticle

//______________________________________________________________________________
void FairPrimaryGenerator::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairPrimaryGenerator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairPrimaryGenerator::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairPrimaryGenerator::Class(),this);
   }
}

//______________________________________________________________________________
void FairPrimaryGenerator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairPrimaryGenerator.
      TClass *R__cl = ::FairPrimaryGenerator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamX0", &fBeamX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamY0", &fBeamY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamSigmaX", &fBeamSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamSigmaY", &fBeamSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleX0", &fBeamAngleX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleY0", &fBeamAngleY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleX", &fBeamAngleX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleY", &fBeamAngleY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleSigmaX", &fBeamAngleSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngleSigmaY", &fBeamAngleSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamDirection", &fBeamDirection);
      R__insp.InspectMember(fBeamDirection, "fBeamDirection.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMin", &fPhiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMax", &fPhiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTargetZ", &fTargetZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrTargets", &fNrTargets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetDz", &fTargetDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertex", &fVertex);
      R__insp.InspectMember(fVertex, "fVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracks", &fNTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearVertexZ", &fSmearVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearGausVertexZ", &fSmearGausVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearVertexXY", &fSmearVertexXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearGausVertexXY", &fSmearGausVertexXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamAngle", &fBeamAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlane", &fEventPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStack", &fStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGenList", &fGenList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fListIter", &fListIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdoTracking", &fdoTracking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCIndexOffset", &fMCIndexOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairPrimaryGenerator(void *p) {
      return  p ? new(p) ::FairPrimaryGenerator : new ::FairPrimaryGenerator;
   }
   static void *newArray_FairPrimaryGenerator(Long_t nElements, void *p) {
      return p ? new(p) ::FairPrimaryGenerator[nElements] : new ::FairPrimaryGenerator[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairPrimaryGenerator(void *p) {
      delete ((::FairPrimaryGenerator*)p);
   }
   static void deleteArray_FairPrimaryGenerator(void *p) {
      delete [] ((::FairPrimaryGenerator*)p);
   }
   static void destruct_FairPrimaryGenerator(void *p) {
      typedef ::FairPrimaryGenerator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairPrimaryGenerator

//______________________________________________________________________________
void FairRecoEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRecoEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRecoEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRecoEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void FairRecoEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRecoEventHeader.
      TClass *R__cl = ::FairRecoEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentifier", &fIdentifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTime", &fEventTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeError", &fEventTimeError);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRecoEventHeader(void *p) {
      return  p ? new(p) ::FairRecoEventHeader : new ::FairRecoEventHeader;
   }
   static void *newArray_FairRecoEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::FairRecoEventHeader[nElements] : new ::FairRecoEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRecoEventHeader(void *p) {
      delete ((::FairRecoEventHeader*)p);
   }
   static void deleteArray_FairRecoEventHeader(void *p) {
      delete [] ((::FairRecoEventHeader*)p);
   }
   static void destruct_FairRecoEventHeader(void *p) {
      typedef ::FairRecoEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRecoEventHeader

//______________________________________________________________________________
void FairRootManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRootManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRootManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRootManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairRootManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRootManager.
      TClass *R__cl = ::FairRootManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOldEntryNr", &fOldEntryNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCbmout", &fCbmout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCbmroot", &fCbmroot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentTime", &fCurrentTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInFile", &fInFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInChain", &fInChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInTree", &fInTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutFile", &fOutFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutTree", &fOutTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fListFolder", &fListFolder);
      R__insp.InspectMember(fListFolder, "fListFolder.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObj2", &fObj2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNObj", &fNObj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMap", (void*)&fMap);
      R__insp.InspectMember("map<TString,TObject*>", (void*)&fMap, "fMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPtrTree", &fPtrTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEntries", &fCurrentEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchSeqId", &fBranchSeqId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBranchNameList", &fBranchNameList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataContainer", (void*)&fDataContainer);
      R__insp.InspectMember("map<TString,std::queue<TClonesArray*> >", (void*)&fDataContainer, "fDataContainer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActiveContainer", (void*)&fActiveContainer);
      R__insp.InspectMember("map<TString,TClonesArray*>", (void*)&fActiveContainer, "fActiveContainer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTSBufferMap", (void*)&fTSBufferMap);
      R__insp.InspectMember("map<TString,FairTSBufferFunctional*>", (void*)&fTSBufferMap, "fTSBufferMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWriteoutBufferMap", (void*)&fWriteoutBufferMap);
      R__insp.InspectMember("map<TString,FairWriteoutBuffer*>", (void*)&fWriteoutBufferMap, "fWriteoutBufferMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputBranchMap", (void*)&fInputBranchMap);
      R__insp.InspectMember("map<Int_t,TBranch*>", (void*)&fInputBranchMap, "fInputBranchMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCompressData", &fCompressData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamps", &fTimeStamps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchPerMap", &fBranchPerMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBrPerMap", (void*)&fBrPerMap);
      R__insp.InspectMember("map<TString,Int_t>", (void*)&fBrPerMap, "fBrPerMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBrPerMapIter", (void*)&fBrPerMapIter);
      R__insp.InspectMember("map<TString,int,less<TString>,allocator<pair<const TString,int> > >::iterator", (void*)&fBrPerMapIter, "fBrPerMapIter.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFriendFileList", (void*)&fFriendFileList);
      R__insp.InspectMember("list<TString>", (void*)&fFriendFileList, "fFriendFileList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputFileName", &fInputFileName);
      R__insp.InspectMember(fInputFileName, "fInputFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputChainList", (void*)&fInputChainList);
      R__insp.InspectMember("list<TString>", (void*)&fInputChainList, "fInputChainList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFriendTypeList", (void*)&fFriendTypeList);
      R__insp.InspectMember("map<TString,TChain*>", (void*)&fFriendTypeList, "fFriendTypeList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCheckInputBranches", (void*)&fCheckInputBranches);
      R__insp.InspectMember("map<TString,std::list<TString>*>", (void*)&fCheckInputBranches, "fCheckInputBranches.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputLevel", (void*)&fInputLevel);
      R__insp.InspectMember("list<TString>", (void*)&fInputLevel, "fInputLevel.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunIdInfoAll", (void*)&fRunIdInfoAll);
      R__insp.InspectMember("map<TString,std::multimap<TString,TArrayI> >", (void*)&fRunIdInfoAll, "fRunIdInfoAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMixedInput", &fMixedInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActualSignalIdentifier", &fActualSignalIdentifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoOfSignals", &fNoOfSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalChainList", &fSignalChainList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBackgroundChain", &fBackgroundChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBackgroundFile", &fBackgroundFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignalTypeList", (void*)&fSignalTypeList);
      R__insp.InspectMember("map<UInt_t,TChain*>", (void*)&fSignalTypeList, "fSignalTypeList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeMin", &fEventTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeMax", &fEventTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTime", &fEventTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventMeanTime", &fEventMeanTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeProb", &fTimeProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCHeader", &fMCHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileHeader", &fFileHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignalBGN", (void*)&fSignalBGN);
      R__insp.InspectMember("map<UInt_t,Double_t>", (void*)&fSignalBGN, "fSignalBGN.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeInMCHeader", &fEventTimeInMCHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSBRatiobyN", &fSBRatiobyN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSBRatiobyT", &fSBRatiobyT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEntryNo", &fCurrentEntryNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeforEntryNo", &fTimeforEntryNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoOfBGEntries", &fNoOfBGEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEntry", (void*)&fCurrentEntry);
      R__insp.InspectMember("map<UInt_t,UInt_t>", (void*)&fCurrentEntry, "fCurrentEntry.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtHeaderIsNew", &fEvtHeaderIsNew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillLastData", &fFillLastData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntryNr", &fEntryNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseFairLinks", &fUseFairLinks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInitFairLinksOnce", &fInitFairLinksOnce);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFairLinksBranchName", &fFairLinksBranchName);
      R__insp.InspectMember(fFairLinksBranchName, "fFairLinksBranchName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRootManager(void *p) {
      return  p ? new(p) ::FairRootManager : new ::FairRootManager;
   }
   static void *newArray_FairRootManager(Long_t nElements, void *p) {
      return p ? new(p) ::FairRootManager[nElements] : new ::FairRootManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRootManager(void *p) {
      delete ((::FairRootManager*)p);
   }
   static void deleteArray_FairRootManager(void *p) {
      delete [] ((::FairRootManager*)p);
   }
   static void destruct_FairRootManager(void *p) {
      typedef ::FairRootManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRootManager

//______________________________________________________________________________
void FairRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRun.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRun::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRun::Class(),this);
   }
}

//______________________________________________________________________________
void FairRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRun.
      TClass *R__cl = ::FairRun::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTasks", &fNTasks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtdb", &fRtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTask", &fTask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutname", &fOutname);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRootManager", &fRootManager);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutFile", &fOutFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAna", &fAna);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvHead", &fEvHead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileHeader", &fFileHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGenerateRunInfo", &fGenerateRunInfo);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairRun(void *p) {
      delete ((::FairRun*)p);
   }
   static void deleteArray_FairRun(void *p) {
      delete [] ((::FairRun*)p);
   }
   static void destruct_FairRun(void *p) {
      typedef ::FairRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRun

//______________________________________________________________________________
void FairRunAna::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRunAna.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairRun::Streamer(R__b);
      R__b >> fIsInitialized;
      R__b >> fInputGeoFile;
      R__b >> fLoadGeo;
      R__b >> fField;
      R__b >> fTimeStamps;
      R__b.CheckByteCount(R__s, R__c, FairRunAna::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRunAna::IsA(), kTRUE);
      FairRun::Streamer(R__b);
      R__b << fIsInitialized;
      R__b << fInputGeoFile;
      R__b << fLoadGeo;
      R__b << fField;
      R__b << fTimeStamps;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRunAna::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRunAna.
      TClass *R__cl = ::FairRunAna::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunInfo", &fRunInfo);
      R__insp.InspectMember(fRunInfo, "fRunInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInitialized", &fIsInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputGeoFile", &fInputGeoFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoadGeo", &fLoadGeo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCHeader", &fMCHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatic", &fStatic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fField", &fField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamps", &fTimeStamps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInFileIsOpen", &fInFileIsOpen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMixedInput", &fMixedInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeMin", &fEventTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTimeMax", &fEventTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTime", &fEventTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventMeanTime", &fEventMeanTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeProb", &fTimeProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFinishProcessingLMDFile", &fFinishProcessingLMDFile);
      FairRun::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunAna(void *p) {
      return  p ? new(p) ::FairRunAna : new ::FairRunAna;
   }
   static void *newArray_FairRunAna(Long_t nElements, void *p) {
      return p ? new(p) ::FairRunAna[nElements] : new ::FairRunAna[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunAna(void *p) {
      delete ((::FairRunAna*)p);
   }
   static void deleteArray_FairRunAna(void *p) {
      delete [] ((::FairRunAna*)p);
   }
   static void destruct_FairRunAna(void *p) {
      typedef ::FairRunAna current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRunAna(TBuffer &buf, void *obj) {
      ((::FairRunAna*)obj)->::FairRunAna::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRunAna

//______________________________________________________________________________
void FairRunAnaProof::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRunAnaProof.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairRunAna::Streamer(R__b);
      R__b >> fProof;
      fProofOutputStatus.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, FairRunAnaProof::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRunAnaProof::IsA(), kTRUE);
      FairRunAna::Streamer(R__b);
      R__b << fProof;
      fProofOutputStatus.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRunAnaProof::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRunAnaProof.
      TClass *R__cl = ::FairRunAnaProof::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProof", &fProof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunOnProofWorker", &fRunOnProofWorker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProofServerName", &fProofServerName);
      R__insp.InspectMember(fProofServerName, "fProofServerName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProofParName", &fProofParName);
      R__insp.InspectMember(fProofParName, "fProofParName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputDirectory", &fOutputDirectory);
      R__insp.InspectMember(fOutputDirectory, "fOutputDirectory.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProofOutputStatus", &fProofOutputStatus);
      R__insp.InspectMember(fProofOutputStatus, "fProofOutputStatus.");
      FairRunAna::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunAnaProof(void *p) {
      return  p ? new(p) ::FairRunAnaProof : new ::FairRunAnaProof;
   }
   static void *newArray_FairRunAnaProof(Long_t nElements, void *p) {
      return p ? new(p) ::FairRunAnaProof[nElements] : new ::FairRunAnaProof[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunAnaProof(void *p) {
      delete ((::FairRunAnaProof*)p);
   }
   static void deleteArray_FairRunAnaProof(void *p) {
      delete [] ((::FairRunAnaProof*)p);
   }
   static void destruct_FairRunAnaProof(void *p) {
      typedef ::FairRunAnaProof current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRunAnaProof(TBuffer &buf, void *obj) {
      ((::FairRunAnaProof*)obj)->::FairRunAnaProof::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRunAnaProof

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunIdGenerator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRunIdGenerator : new ::FairRunIdGenerator;
   }
   static void *newArray_FairRunIdGenerator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRunIdGenerator[nElements] : new ::FairRunIdGenerator[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunIdGenerator(void *p) {
      delete ((::FairRunIdGenerator*)p);
   }
   static void deleteArray_FairRunIdGenerator(void *p) {
      delete [] ((::FairRunIdGenerator*)p);
   }
   static void destruct_FairRunIdGenerator(void *p) {
      typedef ::FairRunIdGenerator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRunIdGenerator

//______________________________________________________________________________
void FairRunSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRunSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairRun::Streamer(R__b);
      R__b >> fField;
      R__b >> fUserDecay;
      R__b.CheckByteCount(R__s, R__c, FairRunSim::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRunSim::IsA(), kTRUE);
      FairRun::Streamer(R__b);
      R__b << fField;
      R__b << fUserDecay;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRunSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRunSim.
      TClass *R__cl = ::FairRunSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "count", &count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fApp", &fApp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamMom", &fBeamMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseBeamMom", &fUseBeamMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGen", &fGen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCEvHead", &fMCEvHead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fField", &fField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMapName", &fMapName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIons", &fIons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticles", &fParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ListOfModules", &ListOfModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MatFname", &MatFname);
      R__insp.InspectMember(MatFname, "MatFname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreTraj", &fStoreTraj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoaderName", &fLoaderName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPythiaDecayer", &fPythiaDecayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPythiaDecayerConfig", &fPythiaDecayerConfig);
      R__insp.InspectMember(fPythiaDecayerConfig, "fPythiaDecayerConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserDecay", &fUserDecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserDecayConfig", &fUserDecayConfig);
      R__insp.InspectMember(fUserDecayConfig, "fUserDecayConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadLength", &fRadLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadMap", &fRadMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadGrid", &fRadGrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeshList", &fMeshList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserConfig", &fUserConfig);
      R__insp.InspectMember(fUserConfig, "fUserConfig.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserCuts", &fUserCuts);
      R__insp.InspectMember(fUserCuts, "fUserCuts.");
      FairRun::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunSim(void *p) {
      return  p ? new(p) ::FairRunSim : new ::FairRunSim;
   }
   static void *newArray_FairRunSim(Long_t nElements, void *p) {
      return p ? new(p) ::FairRunSim[nElements] : new ::FairRunSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunSim(void *p) {
      delete ((::FairRunSim*)p);
   }
   static void deleteArray_FairRunSim(void *p) {
      delete [] ((::FairRunSim*)p);
   }
   static void destruct_FairRunSim(void *p) {
      typedef ::FairRunSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRunSim(TBuffer &buf, void *obj) {
      ((::FairRunSim*)obj)->::FairRunSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRunSim

//______________________________________________________________________________
void FairTrackParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTrackParam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTrackParam::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTrackParam::Class(),this);
   }
}

//______________________________________________________________________________
void FairTrackParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTrackParam.
      TClass *R__cl = ::FairTrackParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTx", &fTx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTy", &fTy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQp", &fQp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovMatrix[15]", fCovMatrix);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairTrackParam(void *p) {
      return  p ? new(p) ::FairTrackParam : new ::FairTrackParam;
   }
   static void *newArray_FairTrackParam(Long_t nElements, void *p) {
      return p ? new(p) ::FairTrackParam[nElements] : new ::FairTrackParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTrackParam(void *p) {
      delete ((::FairTrackParam*)p);
   }
   static void deleteArray_FairTrackParam(void *p) {
      delete [] ((::FairTrackParam*)p);
   }
   static void destruct_FairTrackParam(void *p) {
      typedef ::FairTrackParam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairTrackParam

//______________________________________________________________________________
void FairTrajFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTrajFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> fVxMin;
      R__b >> fVxMax;
      R__b >> fVyMin;
      R__b >> fVyMax;
      R__b >> fVzMin;
      R__b >> fVzMax;
      R__b >> fPMin;
      R__b >> fPMax;
      R__b >> fThetaMin;
      R__b >> fThetaMax;
      R__b >> fPhiMin;
      R__b >> fPhiMax;
      R__b >> fPxMin;
      R__b >> fPxMax;
      R__b >> fPyMin;
      R__b >> fPyMax;
      R__b >> fPzMin;
      R__b >> fPzMax;
      R__b >> fPtMin;
      R__b >> fPtMax;
      R__b >> fRapidityMin;
      R__b >> fRapidityMax;
      R__b >> fKinCutType;
      R__b >> fEtotMin;
      R__b >> fEtotMax;
      R__b >> fStorePrim;
      R__b >> fStoreSec;
      R__b >> fStepSizeMin;
      fTrackCollection->Streamer(R__b);
      R__b >> fCurrentTrk;
      R__b.CheckByteCount(R__s, R__c, FairTrajFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(FairTrajFilter::IsA(), kTRUE);
      R__b << fVxMin;
      R__b << fVxMax;
      R__b << fVyMin;
      R__b << fVyMax;
      R__b << fVzMin;
      R__b << fVzMax;
      R__b << fPMin;
      R__b << fPMax;
      R__b << fThetaMin;
      R__b << fThetaMax;
      R__b << fPhiMin;
      R__b << fPhiMax;
      R__b << fPxMin;
      R__b << fPxMax;
      R__b << fPyMin;
      R__b << fPyMax;
      R__b << fPzMin;
      R__b << fPzMax;
      R__b << fPtMin;
      R__b << fPtMax;
      R__b << fRapidityMin;
      R__b << fRapidityMax;
      R__b << fKinCutType;
      R__b << fEtotMin;
      R__b << fEtotMax;
      R__b << fStorePrim;
      R__b << fStoreSec;
      R__b << fStepSizeMin;
      fTrackCollection->Streamer(R__b);
      R__b << fCurrentTrk;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairTrajFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTrajFilter.
      TClass *R__cl = ::FairTrajFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVxMin", &fVxMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVxMax", &fVxMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVyMin", &fVyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVyMax", &fVyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVzMin", &fVzMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVzMax", &fVzMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMin", &fPMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMax", &fPMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaMin", &fThetaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaMax", &fThetaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMin", &fPhiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMax", &fPhiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPxMin", &fPxMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPxMax", &fPxMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPyMin", &fPyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPyMax", &fPyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPzMin", &fPzMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPzMax", &fPzMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtMin", &fPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtMax", &fPtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRapidityMin", &fRapidityMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRapidityMax", &fRapidityMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKinCutType", &fKinCutType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtotMin", &fEtotMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtotMax", &fEtotMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStorePrim", &fStorePrim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreSec", &fStoreSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStepSizeMin", &fStepSizeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackCollection", &fTrackCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentTrk", &fCurrentTrk);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairTrajFilter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairTrajFilter : new ::FairTrajFilter;
   }
   static void *newArray_FairTrajFilter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairTrajFilter[nElements] : new ::FairTrajFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTrajFilter(void *p) {
      delete ((::FairTrajFilter*)p);
   }
   static void deleteArray_FairTrajFilter(void *p) {
      delete [] ((::FairTrajFilter*)p);
   }
   static void destruct_FairTrajFilter(void *p) {
      typedef ::FairTrajFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairTrajFilter(TBuffer &buf, void *obj) {
      ((::FairTrajFilter*)obj)->::FairTrajFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairTrajFilter

//______________________________________________________________________________
void FairVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairVolume.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairVolume::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairVolume::Class(),this);
   }
}

//______________________________________________________________________________
void FairVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairVolume.
      TClass *R__cl = ::FairVolume::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRealName", &fRealName);
      R__insp.InspectMember(fRealName, "fRealName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeId", &fVolumeId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModId", &fModId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCid", &fMCid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCopyNo", &fCopyNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherId", &fMotherId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherCopyNo", &fMotherCopyNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fModule", &fModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNode", &fNode);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairVolume(void *p) {
      return  p ? new(p) ::FairVolume : new ::FairVolume;
   }
   static void *newArray_FairVolume(Long_t nElements, void *p) {
      return p ? new(p) ::FairVolume[nElements] : new ::FairVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairVolume(void *p) {
      delete ((::FairVolume*)p);
   }
   static void deleteArray_FairVolume(void *p) {
      delete [] ((::FairVolume*)p);
   }
   static void destruct_FairVolume(void *p) {
      typedef ::FairVolume current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairVolume

//______________________________________________________________________________
void FairVolumeList::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairVolumeList.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairVolumeList::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairVolumeList::Class(),this);
   }
}

//______________________________________________________________________________
void FairVolumeList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairVolumeList.
      TClass *R__cl = ::FairVolumeList::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairVolumeList(void *p) {
      return  p ? new(p) ::FairVolumeList : new ::FairVolumeList;
   }
   static void *newArray_FairVolumeList(Long_t nElements, void *p) {
      return p ? new(p) ::FairVolumeList[nElements] : new ::FairVolumeList[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairVolumeList(void *p) {
      delete ((::FairVolumeList*)p);
   }
   static void deleteArray_FairVolumeList(void *p) {
      delete [] ((::FairVolumeList*)p);
   }
   static void destruct_FairVolumeList(void *p) {
      typedef ::FairVolumeList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairVolumeList

//______________________________________________________________________________
void FairField::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairField.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairField::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairField::Class(),this);
   }
}

//______________________________________________________________________________
void FairField::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairField.
      TClass *R__cl = ::FairField::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      TVirtualMagField::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairField(void *p) {
      return  p ? new(p) ::FairField : new ::FairField;
   }
   static void *newArray_FairField(Long_t nElements, void *p) {
      return p ? new(p) ::FairField[nElements] : new ::FairField[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairField(void *p) {
      delete ((::FairField*)p);
   }
   static void deleteArray_FairField(void *p) {
      delete [] ((::FairField*)p);
   }
   static void destruct_FairField(void *p) {
      typedef ::FairField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairField

//______________________________________________________________________________
void FairGenericStack::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGenericStack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairGenericStack::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairGenericStack::Class(),this);
   }
}

//______________________________________________________________________________
void FairGenericStack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGenericStack.
      TClass *R__cl = ::FairGenericStack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetList", &fDetList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetIter", &fDetIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      TVirtualMCStack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairGenericStack(void *p) {
      return  p ? new(p) ::FairGenericStack : new ::FairGenericStack;
   }
   static void *newArray_FairGenericStack(Long_t nElements, void *p) {
      return p ? new(p) ::FairGenericStack[nElements] : new ::FairGenericStack[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGenericStack(void *p) {
      delete ((::FairGenericStack*)p);
   }
   static void deleteArray_FairGenericStack(void *p) {
      delete [] ((::FairGenericStack*)p);
   }
   static void destruct_FairGenericStack(void *p) {
      typedef ::FairGenericStack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairGenericStack

//______________________________________________________________________________
void FairTask::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTask.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTask::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTask::Class(),this);
   }
}

//______________________________________________________________________________
void FairTask::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTask.
      TClass *R__cl = ::FairTask::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputPersistance", &fInputPersistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairTask(void *p) {
      return  p ? new(p) ::FairTask : new ::FairTask;
   }
   static void *newArray_FairTask(Long_t nElements, void *p) {
      return p ? new(p) ::FairTask[nElements] : new ::FairTask[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTask(void *p) {
      delete ((::FairTask*)p);
   }
   static void deleteArray_FairTask(void *p) {
      delete [] ((::FairTask*)p);
   }
   static void destruct_FairTask(void *p) {
      typedef ::FairTask current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairTask

//______________________________________________________________________________
void FairFieldFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairFieldFactory.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairFieldFactory::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairFieldFactory::Class(),this);
   }
}

//______________________________________________________________________________
void FairFieldFactory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairFieldFactory.
      TClass *R__cl = ::FairFieldFactory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCreator", &fCreator);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairFieldFactory(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairFieldFactory : new ::FairFieldFactory;
   }
   static void *newArray_FairFieldFactory(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairFieldFactory[nElements] : new ::FairFieldFactory[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairFieldFactory(void *p) {
      delete ((::FairFieldFactory*)p);
   }
   static void deleteArray_FairFieldFactory(void *p) {
      delete [] ((::FairFieldFactory*)p);
   }
   static void destruct_FairFieldFactory(void *p) {
      typedef ::FairFieldFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairFieldFactory

//______________________________________________________________________________
void FairRadLenPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRadLenPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRadLenPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRadLenPoint::Class(),this);
   }
}

//______________________________________________________________________________
void FairRadLenPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRadLenPoint.
      TClass *R__cl = ::FairRadLenPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmat", &fZmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadLen", &fRadLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXOut", &fXOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYOut", &fYOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZOut", &fZOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPxOut", &fPxOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPyOut", &fPyOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPzOut", &fPzOut);
      FairMCPoint::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRadLenPoint(void *p) {
      return  p ? new(p) ::FairRadLenPoint : new ::FairRadLenPoint;
   }
   static void *newArray_FairRadLenPoint(Long_t nElements, void *p) {
      return p ? new(p) ::FairRadLenPoint[nElements] : new ::FairRadLenPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRadLenPoint(void *p) {
      delete ((::FairRadLenPoint*)p);
   }
   static void deleteArray_FairRadLenPoint(void *p) {
      delete [] ((::FairRadLenPoint*)p);
   }
   static void destruct_FairRadLenPoint(void *p) {
      typedef ::FairRadLenPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRadLenPoint

//______________________________________________________________________________
void FairRadLenManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRadLenManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRadLenManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRadLenManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairRadLenManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRadLenManager.
      TClass *R__cl = ::FairRadLenManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointCollection", &fPointCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosIn", &fPosIn);
      R__insp.InspectMember(fPosIn, "fPosIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosOut", &fPosOut);
      R__insp.InspectMember(fPosOut, "fPosOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomIn", &fMomIn);
      R__insp.InspectMember(fMomIn, "fMomIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomOut", &fMomOut);
      R__insp.InspectMember(fMomOut, "fMomOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmat", &fZmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadl", &fRadl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsl", &fAbsl);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRadLenManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadLenManager : new ::FairRadLenManager;
   }
   static void *newArray_FairRadLenManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadLenManager[nElements] : new ::FairRadLenManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRadLenManager(void *p) {
      delete ((::FairRadLenManager*)p);
   }
   static void deleteArray_FairRadLenManager(void *p) {
      delete [] ((::FairRadLenManager*)p);
   }
   static void destruct_FairRadLenManager(void *p) {
      typedef ::FairRadLenManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRadLenManager

//______________________________________________________________________________
void FairRadGridManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRadGridManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRadGridManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRadGridManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairRadGridManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRadGridManager.
      TClass *R__cl = ::FairRadGridManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointCollection", &fPointCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosIn", &fPosIn);
      R__insp.InspectMember(fPosIn, "fPosIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosOut", &fPosOut);
      R__insp.InspectMember(fPosOut, "fPosOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomIn", &fMomIn);
      R__insp.InspectMember(fMomIn, "fMomIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomOut", &fMomOut);
      R__insp.InspectMember(fMomOut, "fMomOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmat", &fZmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadl", &fRadl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsl", &fAbsl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEstimator", &fEstimator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeshList", &fMeshList);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRadGridManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadGridManager : new ::FairRadGridManager;
   }
   static void *newArray_FairRadGridManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadGridManager[nElements] : new ::FairRadGridManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRadGridManager(void *p) {
      delete ((::FairRadGridManager*)p);
   }
   static void deleteArray_FairRadGridManager(void *p) {
      delete [] ((::FairRadGridManager*)p);
   }
   static void destruct_FairRadGridManager(void *p) {
      typedef ::FairRadGridManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRadGridManager

//______________________________________________________________________________
void FairRadMapManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRadMapManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRadMapManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRadMapManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairRadMapManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRadMapManager.
      TClass *R__cl = ::FairRadMapManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointCollection", &fPointCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdg", &fPdg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosIn", &fPosIn);
      R__insp.InspectMember(fPosIn, "fPosIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosOut", &fPosOut);
      R__insp.InspectMember(fPosOut, "fPosOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomIn", &fMomIn);
      R__insp.InspectMember(fMomIn, "fMomIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomOut", &fMomOut);
      R__insp.InspectMember(fMomOut, "fMomOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStep", &fStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDose", &fDose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoseSL", &fDoseSL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmat", &fZmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadl", &fRadl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsl", &fAbsl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActVol", &fActVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActMass", &fActMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMassMap", &fMassMap);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRadMapManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadMapManager : new ::FairRadMapManager;
   }
   static void *newArray_FairRadMapManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FairRadMapManager[nElements] : new ::FairRadMapManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRadMapManager(void *p) {
      delete ((::FairRadMapManager*)p);
   }
   static void deleteArray_FairRadMapManager(void *p) {
      delete [] ((::FairRadMapManager*)p);
   }
   static void destruct_FairRadMapManager(void *p) {
      typedef ::FairRadMapManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRadMapManager

//______________________________________________________________________________
void FairMesh::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMesh.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMesh::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMesh::Class(),this);
   }
}

//______________________________________________________________________________
void FairMesh::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMesh.
      TClass *R__cl = ::FairMesh::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmin", &fZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmax", &fZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NXbin", &NXbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NYbin", &NYbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NZbin", &NZbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinVolume", &fBinVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiag", &fDiag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeshTid", &fMeshTid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeshFlu", &fMeshFlu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeshSEU", &fMeshSEU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhname", &fhname);
      R__insp.InspectMember(fhname, "fhname.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairMesh(void *p) {
      return  p ? new(p) ::FairMesh : new ::FairMesh;
   }
   static void *newArray_FairMesh(Long_t nElements, void *p) {
      return p ? new(p) ::FairMesh[nElements] : new ::FairMesh[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMesh(void *p) {
      delete ((::FairMesh*)p);
   }
   static void deleteArray_FairMesh(void *p) {
      delete [] ((::FairMesh*)p);
   }
   static void destruct_FairMesh(void *p) {
      typedef ::FairMesh current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairMesh

//______________________________________________________________________________
void FairRKPropagator::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRKPropagator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRKPropagator::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRKPropagator::Class(),this);
   }
}

//______________________________________________________________________________
void FairRKPropagator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRKPropagator.
      TClass *R__cl = ::FairRKPropagator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxStep", &fMaxStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMagField", &fMagField);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairRKPropagator(void *p) {
      delete ((::FairRKPropagator*)p);
   }
   static void deleteArray_FairRKPropagator(void *p) {
      delete [] ((::FairRKPropagator*)p);
   }
   static void destruct_FairRKPropagator(void *p) {
      typedef ::FairRKPropagator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRKPropagator

//______________________________________________________________________________
void FairTimeStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTimeStamp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTimeStamp::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTimeStamp::Class(),this);
   }
}

//______________________________________________________________________________
void FairTimeStamp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTimeStamp.
      TClass *R__cl = ::FairTimeStamp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStampError", &fTimeStampError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntryNr", &fEntryNr);
      R__insp.InspectMember(fEntryNr, "fEntryNr.");
      FairMultiLinkedData_Interface::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairTimeStamp(void *p) {
      return  p ? new(p) ::FairTimeStamp : new ::FairTimeStamp;
   }
   static void *newArray_FairTimeStamp(Long_t nElements, void *p) {
      return p ? new(p) ::FairTimeStamp[nElements] : new ::FairTimeStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTimeStamp(void *p) {
      delete ((::FairTimeStamp*)p);
   }
   static void deleteArray_FairTimeStamp(void *p) {
      delete [] ((::FairTimeStamp*)p);
   }
   static void destruct_FairTimeStamp(void *p) {
      typedef ::FairTimeStamp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairTimeStamp

//______________________________________________________________________________
void FairRadMapPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRadMapPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRadMapPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRadMapPoint::Class(),this);
   }
}

//______________________________________________________________________________
void FairRadMapPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRadMapPoint.
      TClass *R__cl = ::FairRadMapPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdg", &fPdg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmat", &fZmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolMass", &fVolMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStep", &fStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDose", &fDose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoseSL", &fDoseSL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXOut", &fXOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYOut", &fYOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZOut", &fZOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPxOut", &fPxOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPyOut", &fPyOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPzOut", &fPzOut);
      FairMCPoint::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRadMapPoint(void *p) {
      return  p ? new(p) ::FairRadMapPoint : new ::FairRadMapPoint;
   }
   static void *newArray_FairRadMapPoint(Long_t nElements, void *p) {
      return p ? new(p) ::FairRadMapPoint[nElements] : new ::FairRadMapPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRadMapPoint(void *p) {
      delete ((::FairRadMapPoint*)p);
   }
   static void deleteArray_FairRadMapPoint(void *p) {
      delete [] ((::FairRadMapPoint*)p);
   }
   static void destruct_FairRadMapPoint(void *p) {
      typedef ::FairRadMapPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRadMapPoint

//______________________________________________________________________________
void FairTSBufferFunctional::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTSBufferFunctional.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTSBufferFunctional::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTSBufferFunctional::Class(),this);
   }
}

//______________________________________________________________________________
void FairTSBufferFunctional::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTSBufferFunctional.
      TClass *R__cl = ::FairTSBufferFunctional::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBufferArray", &fBufferArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartFunction", &fStartFunction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStopFunction", &fStopFunction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBranch", &fBranch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchIndex", &fBranchIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartIndex", &fStartIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairTSBufferFunctional(void *p) {
      delete ((::FairTSBufferFunctional*)p);
   }
   static void deleteArray_FairTSBufferFunctional(void *p) {
      delete [] ((::FairTSBufferFunctional*)p);
   }
   static void destruct_FairTSBufferFunctional(void *p) {
      typedef ::FairTSBufferFunctional current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairTSBufferFunctional

//______________________________________________________________________________
void FairFileInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairFileInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairFileInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairFileInfo::Class(),this);
   }
}

//______________________________________________________________________________
void FairFileInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairFileInfo.
      TClass *R__cl = ::FairFileInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPath", &fPath);
      R__insp.InspectMember(fPath, "fPath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentifier", &fIdentifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInChainId", &fInChainId);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairFileInfo(void *p) {
      return  p ? new(p) ::FairFileInfo : new ::FairFileInfo;
   }
   static void *newArray_FairFileInfo(Long_t nElements, void *p) {
      return p ? new(p) ::FairFileInfo[nElements] : new ::FairFileInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairFileInfo(void *p) {
      delete ((::FairFileInfo*)p);
   }
   static void deleteArray_FairFileInfo(void *p) {
      delete [] ((::FairFileInfo*)p);
   }
   static void destruct_FairFileInfo(void *p) {
      typedef ::FairFileInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairFileInfo

//______________________________________________________________________________
void FairRunInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRunInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairRunInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairRunInfo::Class(),this);
   }
}

//______________________________________________________________________________
void FairRunInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRunInfo.
      TClass *R__cl = ::FairRunInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.InspectMember(fTimeStamp, "fTimeStamp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCpuInfo", &fCpuInfo);
      R__insp.InspectMember(fCpuInfo, "fCpuInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMemInfo", &fMemInfo);
      R__insp.InspectMember(fMemInfo, "fMemInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcInfo", &fProcInfo);
      R__insp.InspectMember(fProcInfo, "fProcInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeDiff", (void*)&fTimeDiff);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTimeDiff, "fTimeDiff.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", (void*)&fTime);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTime, "fTime.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResidentMemory", (void*)&fResidentMemory);
      R__insp.InspectMember("vector<Long_t>", (void*)&fResidentMemory, "fResidentMemory.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVirtualMemory", (void*)&fVirtualMemory);
      R__insp.InspectMember("vector<Long_t>", (void*)&fVirtualMemory, "fVirtualMemory.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunInfo(void *p) {
      return  p ? new(p) ::FairRunInfo : new ::FairRunInfo;
   }
   static void *newArray_FairRunInfo(Long_t nElements, void *p) {
      return p ? new(p) ::FairRunInfo[nElements] : new ::FairRunInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunInfo(void *p) {
      delete ((::FairRunInfo*)p);
   }
   static void deleteArray_FairRunInfo(void *p) {
      delete [] ((::FairRunInfo*)p);
   }
   static void destruct_FairRunInfo(void *p) {
      typedef ::FairRunInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairRunInfo

//______________________________________________________________________________
void FairWriteoutBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairWriteoutBuffer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         multimap<double,std::pair<double,FairTimeStamp*> > &R__stl =  fStartTime_map;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(pair<double,FairTimeStamp*>));
         if (R__tcl2==0) {
            Error("fStartTime_map streamer","Missing the TClass object for pair<double,FairTimeStamp*>!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            pair<double,FairTimeStamp*> R__t2;
            R__b.StreamObject(&R__t2,R__tcl2);
            typedef double Value_t;
            std::pair<Value_t const, pair<double,FairTimeStamp*> > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         multimap<double,FairTimeStamp*> &R__stl =  fDeadTime_map;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(FairTimeStamp));
         if (R__tcl2==0) {
            Error("fDeadTime_map streamer","Missing the TClass object for FairTimeStamp!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            FairTimeStamp* R__t2;
            R__t2 = (FairTimeStamp*)R__b.ReadObjectAny(R__tcl2);
            typedef double Value_t;
            std::pair<Value_t const, FairTimeStamp* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      fBranchName.Streamer(R__b);
      fClassName.Streamer(R__b);
      R__b >> fTreeSave;
      R__b >> fActivateBuffering;
      R__b >> fVerbose;
      R__b.CheckByteCount(R__s, R__c, FairWriteoutBuffer::IsA());
   } else {
      R__c = R__b.WriteVersion(FairWriteoutBuffer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         multimap<double,std::pair<double,FairTimeStamp*> > &R__stl =  fStartTime_map;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl2 = TBuffer::GetClass(typeid(pair<double,FairTimeStamp*>));
         if (R__tcl2==0) {
            Error("fStartTime_mapstreamer","Missing the TClass object for pair<double,FairTimeStamp*>!");
            return;
         }
            multimap<double,std::pair<double,FairTimeStamp*> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b.StreamObject((pair<double,FairTimeStamp*>*)&((*R__k).second),R__tcl2);
            }
         }
      }
      {
         multimap<double,FairTimeStamp*> &R__stl =  fDeadTime_map;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            multimap<double,FairTimeStamp*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      fBranchName.Streamer(R__b);
      fClassName.Streamer(R__b);
      R__b << fTreeSave;
      R__b << fActivateBuffering;
      R__b << fVerbose;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairWriteoutBuffer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairWriteoutBuffer.
      TClass *R__cl = ::FairWriteoutBuffer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartTime_map", (void*)&fStartTime_map);
      R__insp.InspectMember("multimap<double,std::pair<double,FairTimeStamp*> >", (void*)&fStartTime_map, "fStartTime_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeadTime_map", (void*)&fDeadTime_map);
      R__insp.InspectMember("multimap<double,FairTimeStamp*>", (void*)&fDeadTime_map, "fDeadTime_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchName", &fBranchName);
      R__insp.InspectMember(fBranchName, "fBranchName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassName", &fClassName);
      R__insp.InspectMember(fClassName, "fClassName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeSave", &fTreeSave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActivateBuffering", &fActivateBuffering);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairWriteoutBuffer(void *p) {
      delete ((::FairWriteoutBuffer*)p);
   }
   static void deleteArray_FairWriteoutBuffer(void *p) {
      delete [] ((::FairWriteoutBuffer*)p);
   }
   static void destruct_FairWriteoutBuffer(void *p) {
      typedef ::FairWriteoutBuffer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairWriteoutBuffer(TBuffer &buf, void *obj) {
      ((::FairWriteoutBuffer*)obj)->::FairWriteoutBuffer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairWriteoutBuffer

//______________________________________________________________________________
void FairRingSorter::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRingSorter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<std::multimap<double,FairTimeStamp*> > &R__stl =  fRingBuffer;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >));
         if (R__tcl1==0) {
            Error("fRingBuffer streamer","Missing the TClass object for multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<FairTimeStamp*> &R__stl =  fOutputData;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(FairTimeStamp));
         if (R__tcl1==0) {
            Error("fOutputData streamer","Missing the TClass object for FairTimeStamp!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            FairTimeStamp* R__t;
            R__t = (FairTimeStamp*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.StreamObject(&(fLowerBoundPointer),typeid(pair<int,double>));
      R__b >> fCellWidth;
      R__b >> fVerbose;
      R__b.CheckByteCount(R__s, R__c, FairRingSorter::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRingSorter::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<std::multimap<double,FairTimeStamp*> > &R__stl =  fRingBuffer;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >));
         if (R__tcl1==0) {
            Error("fRingBuffer streamer","Missing the TClass object for multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >!");
            return;
         }
            vector<std::multimap<double,FairTimeStamp*> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<FairTimeStamp*> &R__stl =  fOutputData;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<FairTimeStamp*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.StreamObject(&(fLowerBoundPointer),typeid(pair<int,double>));
      R__b << fCellWidth;
      R__b << fVerbose;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRingSorter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRingSorter.
      TClass *R__cl = ::FairRingSorter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingBuffer", (void*)&fRingBuffer);
      R__insp.InspectMember("vector<std::multimap<double,FairTimeStamp*> >", (void*)&fRingBuffer, "fRingBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputData", (void*)&fOutputData);
      R__insp.InspectMember("vector<FairTimeStamp*>", (void*)&fOutputData, "fOutputData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerBoundPointer", (void*)&fLowerBoundPointer);
      R__insp.InspectMember("pair<int,double>", (void*)&fLowerBoundPointer, "fLowerBoundPointer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellWidth", &fCellWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRingSorter(void *p) {
      return  p ? new(p) ::FairRingSorter : new ::FairRingSorter;
   }
   static void *newArray_FairRingSorter(Long_t nElements, void *p) {
      return p ? new(p) ::FairRingSorter[nElements] : new ::FairRingSorter[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRingSorter(void *p) {
      delete ((::FairRingSorter*)p);
   }
   static void deleteArray_FairRingSorter(void *p) {
      delete [] ((::FairRingSorter*)p);
   }
   static void destruct_FairRingSorter(void *p) {
      typedef ::FairRingSorter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRingSorter(TBuffer &buf, void *obj) {
      ((::FairRingSorter*)obj)->::FairRingSorter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRingSorter

//______________________________________________________________________________
void FairRingSorterTask::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRingSorterTask.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fSorter;
      R__b >> fPersistance;
      R__b >> fDigiPixelMCInfo;
      R__b >> fNumberOfCells;
      R__b >> fWidthOfCells;
      fInputBranch.Streamer(R__b);
      fInputArray->Streamer(R__b);
      fOutputBranch.Streamer(R__b);
      fFolder.Streamer(R__b);
      fOutputArray->Streamer(R__b);
      R__b >> fEntryNr;
      R__b.CheckByteCount(R__s, R__c, FairRingSorterTask::IsA());
   } else {
      R__c = R__b.WriteVersion(FairRingSorterTask::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fSorter;
      R__b << fPersistance;
      R__b << fDigiPixelMCInfo;
      R__b << fNumberOfCells;
      R__b << fWidthOfCells;
      fInputBranch.Streamer(R__b);
      fInputArray->Streamer(R__b);
      fOutputBranch.Streamer(R__b);
      fFolder.Streamer(R__b);
      fOutputArray->Streamer(R__b);
      R__b << fEntryNr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairRingSorterTask::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRingSorterTask.
      TClass *R__cl = ::FairRingSorterTask::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSorter", &fSorter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPersistance", &fPersistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDigiPixelMCInfo", &fDigiPixelMCInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfCells", &fNumberOfCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidthOfCells", &fWidthOfCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputBranch", &fInputBranch);
      R__insp.InspectMember(fInputBranch, "fInputBranch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputBranch", &fOutputBranch);
      R__insp.InspectMember(fOutputBranch, "fOutputBranch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFolder", &fFolder);
      R__insp.InspectMember(fFolder, "fFolder.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntryNr", &fEntryNr);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRingSorterTask(void *p) {
      return  p ? new(p) ::FairRingSorterTask : new ::FairRingSorterTask;
   }
   static void *newArray_FairRingSorterTask(Long_t nElements, void *p) {
      return p ? new(p) ::FairRingSorterTask[nElements] : new ::FairRingSorterTask[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRingSorterTask(void *p) {
      delete ((::FairRingSorterTask*)p);
   }
   static void deleteArray_FairRingSorterTask(void *p) {
      delete [] ((::FairRingSorterTask*)p);
   }
   static void destruct_FairRingSorterTask(void *p) {
      typedef ::FairRingSorterTask current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRingSorterTask(TBuffer &buf, void *obj) {
      ((::FairRingSorterTask*)obj)->::FairRingSorterTask::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRingSorterTask

//______________________________________________________________________________
void FairAnaSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairAnaSelector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairAnaSelector::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairAnaSelector::Class(),this);
   }
}

//______________________________________________________________________________
void FairAnaSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairAnaSelector.
      TClass *R__cl = ::FairAnaSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProofFile", &fProofFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChain", &fChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunAna", &fRunAna);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TSelector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairAnaSelector(void *p) {
      return  p ? new(p) ::FairAnaSelector : new ::FairAnaSelector;
   }
   static void *newArray_FairAnaSelector(Long_t nElements, void *p) {
      return p ? new(p) ::FairAnaSelector[nElements] : new ::FairAnaSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairAnaSelector(void *p) {
      delete ((::FairAnaSelector*)p);
   }
   static void deleteArray_FairAnaSelector(void *p) {
      delete [] ((::FairAnaSelector*)p);
   }
   static void destruct_FairAnaSelector(void *p) {
      typedef ::FairAnaSelector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairAnaSelector

//______________________________________________________________________________
void FairLinkManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairLinkManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairLinkManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairLinkManager::Class(),this);
   }
}

//______________________________________________________________________________
void FairLinkManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairLinkManager.
      TClass *R__cl = ::FairLinkManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIgnoreTypes", (void*)&fIgnoreTypes);
      R__insp.InspectMember("set<Int_t>", (void*)&fIgnoreTypes, "fIgnoreTypes.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIgnoreSetting", &fIgnoreSetting);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairLinkManager(void *p) {
      return  p ? new(p) ::FairLinkManager : new ::FairLinkManager;
   }
   static void *newArray_FairLinkManager(Long_t nElements, void *p) {
      return p ? new(p) ::FairLinkManager[nElements] : new ::FairLinkManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairLinkManager(void *p) {
      delete ((::FairLinkManager*)p);
   }
   static void deleteArray_FairLinkManager(void *p) {
      delete [] ((::FairLinkManager*)p);
   }
   static void destruct_FairLinkManager(void *p) {
      typedef ::FairLinkManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FairLinkManager

//______________________________________________________________________________
void FairRunOnline::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRunOnline.

   FairRun::Streamer(R__b);
}

//______________________________________________________________________________
void FairRunOnline::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRunOnline.
      TClass *R__cl = ::FairRunOnline::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAutomaticFinish", &fAutomaticFinish);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInitialized", &fIsInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatic", &fStatic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fField", &fField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSource", &fSource);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFolder", &fFolder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGenerateHtml", &fGenerateHtml);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistFileName", &fHistFileName);
      R__insp.InspectMember(fHistFileName, "fHistFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefreshRate", &fRefreshRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNevents", &fNevents);
      FairRun::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairRunOnline(void *p) {
      return  p ? new(p) ::FairRunOnline : new ::FairRunOnline;
   }
   static void *newArray_FairRunOnline(Long_t nElements, void *p) {
      return p ? new(p) ::FairRunOnline[nElements] : new ::FairRunOnline[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairRunOnline(void *p) {
      delete ((::FairRunOnline*)p);
   }
   static void deleteArray_FairRunOnline(void *p) {
      delete [] ((::FairRunOnline*)p);
   }
   static void destruct_FairRunOnline(void *p) {
      typedef ::FairRunOnline current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRunOnline(TBuffer &buf, void *obj) {
      ((::FairRunOnline*)obj)->::FairRunOnline::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRunOnline

//______________________________________________________________________________
void FairSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairSource.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairSource.
      TClass *R__cl = ::FairSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairSource(void *p) {
      delete ((::FairSource*)p);
   }
   static void deleteArray_FairSource(void *p) {
      delete [] ((::FairSource*)p);
   }
   static void destruct_FairSource(void *p) {
      typedef ::FairSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairSource(TBuffer &buf, void *obj) {
      ((::FairSource*)obj)->::FairSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairSource

//______________________________________________________________________________
void FairMbsSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMbsSource.

   FairSource::Streamer(R__b);
}

//______________________________________________________________________________
void FairMbsSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMbsSource.
      TClass *R__cl = ::FairMbsSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUnpackers", &fUnpackers);
      FairSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairMbsSource(void *p) {
      delete ((::FairMbsSource*)p);
   }
   static void deleteArray_FairMbsSource(void *p) {
      delete [] ((::FairMbsSource*)p);
   }
   static void destruct_FairMbsSource(void *p) {
      typedef ::FairMbsSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairMbsSource(TBuffer &buf, void *obj) {
      ((::FairMbsSource*)obj)->::FairMbsSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairMbsSource

//______________________________________________________________________________
void FairRemoteSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairRemoteSource.

   FairMbsSource::Streamer(R__b);
}

//______________________________________________________________________________
void FairRemoteSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairRemoteSource.
      TClass *R__cl = ::FairRemoteSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNode", &fNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSocket", &fSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBuffer", &fBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fREvent", &fREvent);
      FairMbsSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairRemoteSource(void *p) {
      delete ((::FairRemoteSource*)p);
   }
   static void deleteArray_FairRemoteSource(void *p) {
      delete [] ((::FairRemoteSource*)p);
   }
   static void destruct_FairRemoteSource(void *p) {
      typedef ::FairRemoteSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairRemoteSource(TBuffer &buf, void *obj) {
      ((::FairRemoteSource*)obj)->::FairRemoteSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairRemoteSource

//______________________________________________________________________________
void FairLmdSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairLmdSource.

   FairMbsSource::Streamer(R__b);
}

//______________________________________________________________________________
void FairLmdSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairLmdSource.
      TClass *R__cl = ::FairLmdSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentFile", &fCurrentFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEvent", &fNEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEvent", &fCurrentEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileNames", &fFileNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxInputChannel", &fxInputChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxEvent", &fxEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxBuffer", &fxBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxEventData", &fxEventData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxSubEvent", &fxSubEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fxInfoHeader", &fxInfoHeader);
      FairMbsSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FairLmdSource(void *p) {
      return  p ? new(p) ::FairLmdSource : new ::FairLmdSource;
   }
   static void *newArray_FairLmdSource(Long_t nElements, void *p) {
      return p ? new(p) ::FairLmdSource[nElements] : new ::FairLmdSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairLmdSource(void *p) {
      delete ((::FairLmdSource*)p);
   }
   static void deleteArray_FairLmdSource(void *p) {
      delete [] ((::FairLmdSource*)p);
   }
   static void destruct_FairLmdSource(void *p) {
      typedef ::FairLmdSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairLmdSource(TBuffer &buf, void *obj) {
      ((::FairLmdSource*)obj)->::FairLmdSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairLmdSource

//______________________________________________________________________________
void FairUnpack::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairUnpack.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void FairUnpack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairUnpack.
      TClass *R__cl = ::FairUnpack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSubType", &fSubType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcId", &fProcId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSubCrate", &fSubCrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fControl", &fControl);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_FairUnpack(void *p) {
      delete ((::FairUnpack*)p);
   }
   static void deleteArray_FairUnpack(void *p) {
      delete [] ((::FairUnpack*)p);
   }
   static void destruct_FairUnpack(void *p) {
      typedef ::FairUnpack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairUnpack(TBuffer &buf, void *obj) {
      ((::FairUnpack*)obj)->::FairUnpack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::FairUnpack

//______________________________________________________________________________
void MRevBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRevBuffer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void MRevBuffer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRevBuffer.
      TClass *R__cl = ::MRevBuffer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTSocket", &pTSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSocket", &iSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iBufNo1", &iBufNo1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iBufNo2", &iBufNo2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iDebug", &iDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSwap", &iSwap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iStatus", &iStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iBufSizeAlloc", &iBufSizeAlloc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iBufSize", &iBufSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iBufNo", &iBufNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFragBegin", &iFragBegin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFragConc", &iFragConc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFragBeginIgn", &iFragBeginIgn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFragEndIgn", &iFragEndIgn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iHeadPar", &iHeadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvtMax", &iEvtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvtNo", &iEvtNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvtRel", &iEvtRel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvtBuf", &iEvtBuf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvtPar", &iEvtPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*piBuf", &piBuf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*piNextEvt", &piNextEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pEvt", &pEvt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MRevBuffer(void *p) {
      delete ((::MRevBuffer*)p);
   }
   static void deleteArray_MRevBuffer(void *p) {
      delete [] ((::MRevBuffer*)p);
   }
   static void destruct_MRevBuffer(void *p) {
      typedef ::MRevBuffer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MRevBuffer(TBuffer &buf, void *obj) {
      ((::MRevBuffer*)obj)->::MRevBuffer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MRevBuffer

//______________________________________________________________________________
void REvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class REvent.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void REvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class REvent.
      TClass *R__cl = ::REvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSize", &iSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iNumb", &iNumb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*piData", &piData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSubEvt", &nSubEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtSize[100]", subEvtSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtType[100]", subEvtType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtSubType[100]", subEvtSubType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtProcId[100]", subEvtProcId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtSubCrate[100]", subEvtSubCrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtControl[100]", subEvtControl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSubEvt[100]", &pSubEvt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_REvent(void *p) {
      return  p ? new(p) ::REvent : new ::REvent;
   }
   static void *newArray_REvent(Long_t nElements, void *p) {
      return p ? new(p) ::REvent[nElements] : new ::REvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_REvent(void *p) {
      delete ((::REvent*)p);
   }
   static void deleteArray_REvent(void *p) {
      delete [] ((::REvent*)p);
   }
   static void destruct_REvent(void *p) {
      typedef ::REvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_REvent(TBuffer &buf, void *obj) {
      ((::REvent*)obj)->::REvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::REvent

namespace ROOTDict {
   void maplETStringcOTClonesArraymUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTClonesArraymUgR_Dictionary();
   static void *new_maplETStringcOTClonesArraymUgR(void *p = 0);
   static void *newArray_maplETStringcOTClonesArraymUgR(Long_t size, void *p);
   static void delete_maplETStringcOTClonesArraymUgR(void *p);
   static void deleteArray_maplETStringcOTClonesArraymUgR(void *p);
   static void destruct_maplETStringcOTClonesArraymUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TClonesArray*>*)
   {
      map<TString,TClonesArray*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TClonesArray*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TClonesArray*>", -2, "prec_stl/map", 63,
                  typeid(map<TString,TClonesArray*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTClonesArraymUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TClonesArray*>) );
      instance.SetNew(&new_maplETStringcOTClonesArraymUgR);
      instance.SetNewArray(&newArray_maplETStringcOTClonesArraymUgR);
      instance.SetDelete(&delete_maplETStringcOTClonesArraymUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTClonesArraymUgR);
      instance.SetDestructor(&destruct_maplETStringcOTClonesArraymUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TClonesArray*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TClonesArray*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTClonesArraymUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TClonesArray*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTClonesArraymUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TClonesArray*> : new map<TString,TClonesArray*>;
   }
   static void *newArray_maplETStringcOTClonesArraymUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TClonesArray*>[nElements] : new map<TString,TClonesArray*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTClonesArraymUgR(void *p) {
      delete ((map<TString,TClonesArray*>*)p);
   }
   static void deleteArray_maplETStringcOTClonesArraymUgR(void *p) {
      delete [] ((map<TString,TClonesArray*>*)p);
   }
   static void destruct_maplETStringcOTClonesArraymUgR(void *p) {
      typedef map<TString,TClonesArray*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TClonesArray*>

namespace ROOTDict {
   void maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR_Dictionary();
   static void *new_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p = 0);
   static void *newArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(Long_t size, void *p);
   static void delete_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p);
   static void deleteArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p);
   static void destruct_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,queue<TClonesArray*,deque<TClonesArray*> > >*)
   {
      map<TString,queue<TClonesArray*,deque<TClonesArray*> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,queue<TClonesArray*,deque<TClonesArray*> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,queue<TClonesArray*,deque<TClonesArray*> > >", -2, "prec_stl/map", 63,
                  typeid(map<TString,queue<TClonesArray*,deque<TClonesArray*> > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,queue<TClonesArray*,deque<TClonesArray*> > >) );
      instance.SetNew(&new_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR);
      instance.SetNewArray(&newArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR);
      instance.SetDelete(&delete_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR);
      instance.SetDestructor(&destruct_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,queue<TClonesArray*,deque<TClonesArray*> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,queue<TClonesArray*,deque<TClonesArray*> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,queue<TClonesArray*,deque<TClonesArray*> > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,queue<TClonesArray*,deque<TClonesArray*> > > : new map<TString,queue<TClonesArray*,deque<TClonesArray*> > >;
   }
   static void *newArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,queue<TClonesArray*,deque<TClonesArray*> > >[nElements] : new map<TString,queue<TClonesArray*,deque<TClonesArray*> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p) {
      delete ((map<TString,queue<TClonesArray*,deque<TClonesArray*> > >*)p);
   }
   static void deleteArray_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p) {
      delete [] ((map<TString,queue<TClonesArray*,deque<TClonesArray*> > >*)p);
   }
   static void destruct_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUgRsPgRsPgR(void *p) {
      typedef map<TString,queue<TClonesArray*,deque<TClonesArray*> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,queue<TClonesArray*,deque<TClonesArray*> > >

namespace ROOTDict {
   void multimaplEdoublecOFairTimeStampmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void multimaplEdoublecOFairTimeStampmUgR_Dictionary();
   static void *new_multimaplEdoublecOFairTimeStampmUgR(void *p = 0);
   static void *newArray_multimaplEdoublecOFairTimeStampmUgR(Long_t size, void *p);
   static void delete_multimaplEdoublecOFairTimeStampmUgR(void *p);
   static void deleteArray_multimaplEdoublecOFairTimeStampmUgR(void *p);
   static void destruct_multimaplEdoublecOFairTimeStampmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const multimap<double,FairTimeStamp*>*)
   {
      multimap<double,FairTimeStamp*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(multimap<double,FairTimeStamp*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("multimap<double,FairTimeStamp*>", -2, "prec_stl/multimap", 63,
                  typeid(multimap<double,FairTimeStamp*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &multimaplEdoublecOFairTimeStampmUgR_Dictionary, isa_proxy, 0,
                  sizeof(multimap<double,FairTimeStamp*>) );
      instance.SetNew(&new_multimaplEdoublecOFairTimeStampmUgR);
      instance.SetNewArray(&newArray_multimaplEdoublecOFairTimeStampmUgR);
      instance.SetDelete(&delete_multimaplEdoublecOFairTimeStampmUgR);
      instance.SetDeleteArray(&deleteArray_multimaplEdoublecOFairTimeStampmUgR);
      instance.SetDestructor(&destruct_multimaplEdoublecOFairTimeStampmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< multimap<double,FairTimeStamp*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const multimap<double,FairTimeStamp*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void multimaplEdoublecOFairTimeStampmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const multimap<double,FairTimeStamp*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_multimaplEdoublecOFairTimeStampmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) multimap<double,FairTimeStamp*> : new multimap<double,FairTimeStamp*>;
   }
   static void *newArray_multimaplEdoublecOFairTimeStampmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) multimap<double,FairTimeStamp*>[nElements] : new multimap<double,FairTimeStamp*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_multimaplEdoublecOFairTimeStampmUgR(void *p) {
      delete ((multimap<double,FairTimeStamp*>*)p);
   }
   static void deleteArray_multimaplEdoublecOFairTimeStampmUgR(void *p) {
      delete [] ((multimap<double,FairTimeStamp*>*)p);
   }
   static void destruct_multimaplEdoublecOFairTimeStampmUgR(void *p) {
      typedef multimap<double,FairTimeStamp*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class multimap<double,FairTimeStamp*>

namespace ROOTDict {
   void multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR_Dictionary();
   static void *new_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p = 0);
   static void *newArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(Long_t size, void *p);
   static void delete_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p);
   static void deleteArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p);
   static void destruct_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const multimap<double,pair<double,FairTimeStamp*> >*)
   {
      multimap<double,pair<double,FairTimeStamp*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(multimap<double,pair<double,FairTimeStamp*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("multimap<double,pair<double,FairTimeStamp*> >", -2, "prec_stl/multimap", 63,
                  typeid(multimap<double,pair<double,FairTimeStamp*> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(multimap<double,pair<double,FairTimeStamp*> >) );
      instance.SetNew(&new_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR);
      instance.SetNewArray(&newArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDelete(&delete_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDeleteArray(&deleteArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDestructor(&destruct_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< multimap<double,pair<double,FairTimeStamp*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const multimap<double,pair<double,FairTimeStamp*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const multimap<double,pair<double,FairTimeStamp*> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) multimap<double,pair<double,FairTimeStamp*> > : new multimap<double,pair<double,FairTimeStamp*> >;
   }
   static void *newArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) multimap<double,pair<double,FairTimeStamp*> >[nElements] : new multimap<double,pair<double,FairTimeStamp*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p) {
      delete ((multimap<double,pair<double,FairTimeStamp*> >*)p);
   }
   static void deleteArray_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p) {
      delete [] ((multimap<double,pair<double,FairTimeStamp*> >*)p);
   }
   static void destruct_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRsPgR(void *p) {
      typedef multimap<double,pair<double,FairTimeStamp*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class multimap<double,pair<double,FairTimeStamp*> >

namespace ROOTDict {
   void setlEFairLinkgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void setlEFairLinkgR_Dictionary();
   static void *new_setlEFairLinkgR(void *p = 0);
   static void *newArray_setlEFairLinkgR(Long_t size, void *p);
   static void delete_setlEFairLinkgR(void *p);
   static void deleteArray_setlEFairLinkgR(void *p);
   static void destruct_setlEFairLinkgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const set<FairLink>*)
   {
      set<FairLink> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(set<FairLink>),0);
      static ::ROOT::TGenericClassInfo 
         instance("set<FairLink>", -2, "prec_stl/set", 49,
                  typeid(set<FairLink>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &setlEFairLinkgR_Dictionary, isa_proxy, 0,
                  sizeof(set<FairLink>) );
      instance.SetNew(&new_setlEFairLinkgR);
      instance.SetNewArray(&newArray_setlEFairLinkgR);
      instance.SetDelete(&delete_setlEFairLinkgR);
      instance.SetDeleteArray(&deleteArray_setlEFairLinkgR);
      instance.SetDestructor(&destruct_setlEFairLinkgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Insert< set<FairLink> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const set<FairLink>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void setlEFairLinkgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const set<FairLink>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_setlEFairLinkgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) set<FairLink> : new set<FairLink>;
   }
   static void *newArray_setlEFairLinkgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) set<FairLink>[nElements] : new set<FairLink>[nElements];
   }
   // Wrapper around operator delete
   static void delete_setlEFairLinkgR(void *p) {
      delete ((set<FairLink>*)p);
   }
   static void deleteArray_setlEFairLinkgR(void *p) {
      delete [] ((set<FairLink>*)p);
   }
   static void destruct_setlEFairLinkgR(void *p) {
      typedef set<FairLink> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class set<FairLink>

namespace ROOTDict {
   void vectorlEFairEventBuildermUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEFairEventBuildermUgR_Dictionary();
   static void *new_vectorlEFairEventBuildermUgR(void *p = 0);
   static void *newArray_vectorlEFairEventBuildermUgR(Long_t size, void *p);
   static void delete_vectorlEFairEventBuildermUgR(void *p);
   static void deleteArray_vectorlEFairEventBuildermUgR(void *p);
   static void destruct_vectorlEFairEventBuildermUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<FairEventBuilder*>*)
   {
      vector<FairEventBuilder*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<FairEventBuilder*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<FairEventBuilder*>", -2, "prec_stl/vector", 49,
                  typeid(vector<FairEventBuilder*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEFairEventBuildermUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<FairEventBuilder*>) );
      instance.SetNew(&new_vectorlEFairEventBuildermUgR);
      instance.SetNewArray(&newArray_vectorlEFairEventBuildermUgR);
      instance.SetDelete(&delete_vectorlEFairEventBuildermUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEFairEventBuildermUgR);
      instance.SetDestructor(&destruct_vectorlEFairEventBuildermUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<FairEventBuilder*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<FairEventBuilder*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEFairEventBuildermUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<FairEventBuilder*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEFairEventBuildermUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<FairEventBuilder*> : new vector<FairEventBuilder*>;
   }
   static void *newArray_vectorlEFairEventBuildermUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<FairEventBuilder*>[nElements] : new vector<FairEventBuilder*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEFairEventBuildermUgR(void *p) {
      delete ((vector<FairEventBuilder*>*)p);
   }
   static void deleteArray_vectorlEFairEventBuildermUgR(void *p) {
      delete [] ((vector<FairEventBuilder*>*)p);
   }
   static void destruct_vectorlEFairEventBuildermUgR(void *p) {
      typedef vector<FairEventBuilder*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<FairEventBuilder*>

namespace ROOTDict {
   void vectorlEFairTimeStampmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEFairTimeStampmUgR_Dictionary();
   static void *new_vectorlEFairTimeStampmUgR(void *p = 0);
   static void *newArray_vectorlEFairTimeStampmUgR(Long_t size, void *p);
   static void delete_vectorlEFairTimeStampmUgR(void *p);
   static void deleteArray_vectorlEFairTimeStampmUgR(void *p);
   static void destruct_vectorlEFairTimeStampmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<FairTimeStamp*>*)
   {
      vector<FairTimeStamp*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<FairTimeStamp*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<FairTimeStamp*>", -2, "prec_stl/vector", 49,
                  typeid(vector<FairTimeStamp*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEFairTimeStampmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<FairTimeStamp*>) );
      instance.SetNew(&new_vectorlEFairTimeStampmUgR);
      instance.SetNewArray(&newArray_vectorlEFairTimeStampmUgR);
      instance.SetDelete(&delete_vectorlEFairTimeStampmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEFairTimeStampmUgR);
      instance.SetDestructor(&destruct_vectorlEFairTimeStampmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<FairTimeStamp*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<FairTimeStamp*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEFairTimeStampmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<FairTimeStamp*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEFairTimeStampmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<FairTimeStamp*> : new vector<FairTimeStamp*>;
   }
   static void *newArray_vectorlEFairTimeStampmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<FairTimeStamp*>[nElements] : new vector<FairTimeStamp*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEFairTimeStampmUgR(void *p) {
      delete ((vector<FairTimeStamp*>*)p);
   }
   static void deleteArray_vectorlEFairTimeStampmUgR(void *p) {
      delete [] ((vector<FairTimeStamp*>*)p);
   }
   static void destruct_vectorlEFairTimeStampmUgR(void *p) {
      typedef vector<FairTimeStamp*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<FairTimeStamp*>

namespace ROOTDict {
   void vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR_Dictionary();
   static void *new_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p = 0);
   static void *newArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(Long_t size, void *p);
   static void delete_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p);
   static void deleteArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p);
   static void destruct_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<multimap<double,FairTimeStamp*> >*)
   {
      vector<multimap<double,FairTimeStamp*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<multimap<double,FairTimeStamp*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<multimap<double,FairTimeStamp*> >", -2, "prec_stl/vector", 49,
                  typeid(vector<multimap<double,FairTimeStamp*> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<multimap<double,FairTimeStamp*> >) );
      instance.SetNew(&new_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR);
      instance.SetNewArray(&newArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDelete(&delete_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR);
      instance.SetDestructor(&destruct_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<multimap<double,FairTimeStamp*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<multimap<double,FairTimeStamp*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<multimap<double,FairTimeStamp*> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<multimap<double,FairTimeStamp*> > : new vector<multimap<double,FairTimeStamp*> >;
   }
   static void *newArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<multimap<double,FairTimeStamp*> >[nElements] : new vector<multimap<double,FairTimeStamp*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p) {
      delete ((vector<multimap<double,FairTimeStamp*> >*)p);
   }
   static void deleteArray_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p) {
      delete [] ((vector<multimap<double,FairTimeStamp*> >*)p);
   }
   static void destruct_vectorlEmultimaplEdoublecOFairTimeStampmUgRsPgR(void *p) {
      typedef vector<multimap<double,FairTimeStamp*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<multimap<double,FairTimeStamp*> >

namespace ROOTDict {
   void vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR_Dictionary();
   static void *new_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p);
   static void destruct_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<double,FairRecoEventHeader*> >*)
   {
      vector<pair<double,FairRecoEventHeader*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<double,FairRecoEventHeader*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<double,FairRecoEventHeader*> >", -2, "prec_stl/vector", 49,
                  typeid(vector<pair<double,FairRecoEventHeader*> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<double,FairRecoEventHeader*> >) );
      instance.SetNew(&new_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<pair<double,FairRecoEventHeader*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<double,FairRecoEventHeader*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<pair<double,FairRecoEventHeader*> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<double,FairRecoEventHeader*> > : new vector<pair<double,FairRecoEventHeader*> >;
   }
   static void *newArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<double,FairRecoEventHeader*> >[nElements] : new vector<pair<double,FairRecoEventHeader*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p) {
      delete ((vector<pair<double,FairRecoEventHeader*> >*)p);
   }
   static void deleteArray_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p) {
      delete [] ((vector<pair<double,FairRecoEventHeader*> >*)p);
   }
   static void destruct_vectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgR(void *p) {
      typedef vector<pair<double,FairRecoEventHeader*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<pair<double,FairRecoEventHeader*> >

namespace ROOTDict {
   void vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<pair<double,FairRecoEventHeader*> > >*)
   {
      vector<vector<pair<double,FairRecoEventHeader*> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<pair<double,FairRecoEventHeader*> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<pair<double,FairRecoEventHeader*> > >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<pair<double,FairRecoEventHeader*> > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<pair<double,FairRecoEventHeader*> > >) );
      instance.SetNew(&new_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<pair<double,FairRecoEventHeader*> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<pair<double,FairRecoEventHeader*> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<pair<double,FairRecoEventHeader*> > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<pair<double,FairRecoEventHeader*> > > : new vector<vector<pair<double,FairRecoEventHeader*> > >;
   }
   static void *newArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<pair<double,FairRecoEventHeader*> > >[nElements] : new vector<vector<pair<double,FairRecoEventHeader*> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p) {
      delete ((vector<vector<pair<double,FairRecoEventHeader*> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<pair<double,FairRecoEventHeader*> > >*)p);
   }
   static void destruct_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR(void *p) {
      typedef vector<vector<pair<double,FairRecoEventHeader*> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<pair<double,FairRecoEventHeader*> > >

/********************************************************
* /Users/yassidayyad/fair_install/ATTPCROOT_Mar_dev/build/base/G__BaseDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__BaseDict();

extern "C" void G__set_cpp_environmentG__BaseDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("steer/FairAnaSelector.h");
  G__add_compiledheader("steer/FairRadGridManager.h");
  G__add_compiledheader("steer/FairRadLenManager.h");
  G__add_compiledheader("steer/FairRadMapManager.h");
  G__add_compiledheader("steer/FairRingSorter.h");
  G__add_compiledheader("steer/FairRingSorterTask.h");
  G__add_compiledheader("steer/FairRootManager.h");
  G__add_compiledheader("steer/FairRun.h");
  G__add_compiledheader("steer/FairRunAna.h");
  G__add_compiledheader("steer/FairRunAnaProof.h");
  G__add_compiledheader("steer/FairRunSim.h");
  G__add_compiledheader("steer/FairTSBufferFunctional.h");
  G__add_compiledheader("steer/FairTask.h");
  G__add_compiledheader("steer/FairTrajFilter.h");
  G__add_compiledheader("steer/FairWriteoutBuffer.h");
  G__add_compiledheader("steer/FairRunOnline.h");
  G__add_compiledheader("steer/FairLinkManager.h");
  G__add_compiledheader("sim/FairBaseContFact.h");
  G__add_compiledheader("sim/FairBaseParSet.h");
  G__add_compiledheader("sim/FairGeoParSet.h");
  G__add_compiledheader("sim/FairDetector.h");
  G__add_compiledheader("sim/FairGeaneApplication.h");
  G__add_compiledheader("sim/FairGenerator.h");
  G__add_compiledheader("sim/FairGenericStack.h");
  G__add_compiledheader("sim/FairIon.h");
  G__add_compiledheader("sim/FairMCApplication.h");
  G__add_compiledheader("sim/FairModule.h");
  G__add_compiledheader("sim/FairParticle.h");
  G__add_compiledheader("sim/FairPrimaryGenerator.h");
  G__add_compiledheader("sim/FairRunIdGenerator.h");
  G__add_compiledheader("sim/FairVolume.h");
  G__add_compiledheader("sim/FairVolumeList.h");
  G__add_compiledheader("event/FairEventBuilder.h");
  G__add_compiledheader("event/FairEventBuilderManager.h");
  G__add_compiledheader("event/FairEventHeader.h");
  G__add_compiledheader("event/FairFileHeader.h");
  G__add_compiledheader("event/FairFileInfo.h");
  G__add_compiledheader("event/FairHit.h");
  G__add_compiledheader("event/FairLink.h");
  G__add_compiledheader("event/FairMCEventHeader.h");
  G__add_compiledheader("event/FairMCPoint.h");
  G__add_compiledheader("event/FairMesh.h");
  G__add_compiledheader("event/FairMultiLinkedData.h");
  G__add_compiledheader("event/FairMultiLinkedData_Interface.h");
  G__add_compiledheader("event/FairRadLenPoint.h");
  G__add_compiledheader("event/FairRadMapPoint.h");
  G__add_compiledheader("event/FairRecoEventHeader.h");
  G__add_compiledheader("event/FairRunInfo.h");
  G__add_compiledheader("event/FairTimeStamp.h");
  G__add_compiledheader("event/FairTrackParam.h");
  G__add_compiledheader("field/FairField.h");
  G__add_compiledheader("field/FairFieldFactory.h");
  G__add_compiledheader("field/FairRKPropagator.h");
  G__add_compiledheader("source/FairSource.h");
  G__add_compiledheader("source/FairLmdSource.h");
  G__add_compiledheader("source/FairRemoteSource.h");
  G__add_compiledheader("source/FairMbsSource.h");
  G__add_compiledheader("source/FairUnpack.h");
  G__add_compiledheader("source/MRevBuffer.h");
  G__cpp_reset_tagtableG__BaseDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__BaseDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FairRunAnaProof */
static int G__G__BaseDict_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunAnaProof::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunAnaProof* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunAnaProof((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairRunAnaProof((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRunAnaProof[n];
       } else {
         p = new((void*) gvp) FairRunAnaProof[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRunAnaProof;
       } else {
         p = new((void*) gvp) FairRunAnaProof;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->RunOneEvent((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->RunOnProof((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->SetInTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunAnaProof*) G__getstructoffset())->GetProof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRunAnaProof*) G__getstructoffset())->SetRunOnProofWorker((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRunAnaProof*) G__getstructoffset())->SetRunOnProofWorker();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->SetProofParName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->SetOutputDirectory(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->SetProofOutputStatus(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunAnaProof::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAnaProof::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRunAnaProof::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRunAnaProof::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAnaProof*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAnaProof::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunAnaProof::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAnaProof::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_507_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunAnaProof::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunAnaProof G__TFairRunAnaProof;
static int G__G__BaseDict_507_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunAnaProof*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunAnaProof*) (soff+(sizeof(FairRunAnaProof)*i)))->~G__TFairRunAnaProof();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunAnaProof*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunAnaProof*) (soff))->~G__TFairRunAnaProof();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairAnaSelector */
static int G__G__BaseDict_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairAnaSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairAnaSelector((TTree*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairAnaSelector((TTree*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairAnaSelector[n];
       } else {
         p = new((void*) gvp) FairAnaSelector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairAnaSelector;
       } else {
         p = new((void*) gvp) FairAnaSelector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairAnaSelector*) G__getstructoffset())->SetFairRunAnaProof((FairRunAnaProof*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairAnaSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairAnaSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairAnaSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairAnaSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairAnaSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairAnaSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairAnaSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairAnaSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_509_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairAnaSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairAnaSelector G__TFairAnaSelector;
static int G__G__BaseDict_509_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairAnaSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairAnaSelector*) (soff+(sizeof(FairAnaSelector)*i)))->~G__TFairAnaSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairAnaSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairAnaSelector*) (soff))->~G__TFairAnaSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMesh */
static int G__G__BaseDict_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMesh* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMesh[n];
     } else {
       p = new((void*) gvp) FairMesh[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMesh;
     } else {
       p = new((void*) gvp) FairMesh;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMesh* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairMesh((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairMesh((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetZmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMesh*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMesh*) G__getstructoffset())->GetMeshTid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMesh*) G__getstructoffset())->GetMeshFlu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMesh*) G__getstructoffset())->GetMeshSEU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairMesh*) G__getstructoffset())->GetDiag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairMesh*) G__getstructoffset())->GetBinVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->fillTID((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->fillFluence((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->fillSEU((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->Scale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->calculate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMesh::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMesh::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMesh::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMesh::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMesh*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMesh::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMesh::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMesh::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_552_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMesh::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMesh G__TFairMesh;
static int G__G__BaseDict_552_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMesh*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMesh*) (soff+(sizeof(FairMesh)*i)))->~G__TFairMesh();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMesh*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMesh*) (soff))->~G__TFairMesh();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRadGridManager */
static int G__G__BaseDict_553_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadGridManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadGridManager[n];
     } else {
       p = new((void*) gvp) FairRadGridManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadGridManager;
     } else {
       p = new((void*) gvp) FairRadGridManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadGridManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadGridManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRadGridManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRadGridManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairRadGridManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadGridManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadGridManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadGridManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadGridManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRadGridManager*) G__getstructoffset())->GetMeshList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->AddMeshList((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRadGridManager*) G__getstructoffset())->IsTrackInside(*(TLorentzVector*) libp->para[0].ref, (FairMesh*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRadGridManager*) G__getstructoffset())->IsTrackEntering(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->FillMeshList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadGridManager*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_553_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadGridManager::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRadGridManager G__TFairRadGridManager;
static int G__G__BaseDict_553_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRadGridManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRadGridManager*) (soff+(sizeof(FairRadGridManager)*i)))->~G__TFairRadGridManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRadGridManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRadGridManager*) (soff))->~G__TFairRadGridManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRadLenManager */
static int G__G__BaseDict_554_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadLenManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadLenManager[n];
     } else {
       p = new((void*) gvp) FairRadLenManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadLenManager;
     } else {
       p = new((void*) gvp) FairRadLenManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadLenManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRadLenManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRadLenManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairRadLenManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadLenManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadLenManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->AddPoint(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenManager*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_554_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadLenManager::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRadLenManager G__TFairRadLenManager;
static int G__G__BaseDict_554_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRadLenManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRadLenManager*) (soff+(sizeof(FairRadLenManager)*i)))->~G__TFairRadLenManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRadLenManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRadLenManager*) (soff))->~G__TFairRadLenManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRadMapManager */
static int G__G__BaseDict_556_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadMapManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadMapManager[n];
     } else {
       p = new((void*) gvp) FairRadMapManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadMapManager;
     } else {
       p = new((void*) gvp) FairRadMapManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadMapManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRadMapManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRadMapManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairRadMapManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadMapManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadMapManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->AddPoint(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapManager*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_556_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadMapManager::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRadMapManager G__TFairRadMapManager;
static int G__G__BaseDict_556_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRadMapManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRadMapManager*) (soff+(sizeof(FairRadMapManager)*i)))->~G__TFairRadMapManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRadMapManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRadMapManager*) (soff))->~G__TFairRadMapManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTimeStamp */
static int G__G__BaseDict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTimeStamp[n];
     } else {
       p = new((void*) gvp) FairTimeStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTimeStamp;
     } else {
       p = new((void*) gvp) FairTimeStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairTimeStamp((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) FairTimeStamp((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairTimeStamp((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) FairTimeStamp((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTimeStamp*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTimeStamp*) G__getstructoffset())->GetTimeStampError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairLink* pobj;
         const FairLink xobj = ((const FairTimeStamp*) G__getstructoffset())->GetEntryNr();
         pobj = new FairLink(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTimeStamp*) G__getstructoffset())->SetTimeStamp((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTimeStamp*) G__getstructoffset())->SetTimeStampError((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTimeStamp*) G__getstructoffset())->SetEntryNr(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairTimeStamp*) G__getstructoffset())->equal((FairTimeStamp*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairTimeStamp*) G__getstructoffset())->operator<((FairTimeStamp*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTimeStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTimeStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTimeStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTimeStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTimeStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTimeStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTimeStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTimeStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_557_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTimeStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_557_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairTimeStamp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairTimeStamp(*(FairTimeStamp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTimeStamp G__TFairTimeStamp;
static int G__G__BaseDict_557_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTimeStamp*) (soff+(sizeof(FairTimeStamp)*i)))->~G__TFairTimeStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTimeStamp*) (soff))->~G__TFairTimeStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_557_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTimeStamp* dest = (FairTimeStamp*) G__getstructoffset();
   *dest = *(FairTimeStamp*) libp->para[0].ref;
   const FairTimeStamp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRingSorter */
static int G__G__BaseDict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRingSorter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRingSorter((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) FairRingSorter((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRingSorter((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairRingSorter((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRingSorter[n];
       } else {
         p = new((void*) gvp) FairRingSorter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairRingSorter;
       } else {
         p = new((void*) gvp) FairRingSorter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRingSorter*) G__getstructoffset())->CreateElement((FairTimeStamp*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->AddElement((FairTimeStamp*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->WriteOutElements((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->WriteOutElement((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->WriteOutAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairRingSorter*) G__getstructoffset())->GetBufferSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<FairTimeStamp*>* pobj;
         vector<FairTimeStamp*> xobj = ((FairRingSorter*) G__getstructoffset())->GetOutputData();
         pobj = new vector<FairTimeStamp*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->DeleteOutputData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->SetLowerBound((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRingSorter*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((FairRingSorter*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRingSorter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRingSorter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRingSorter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRingSorter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_558_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRingSorter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_558_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairRingSorter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairRingSorter(*(FairRingSorter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRingSorter G__TFairRingSorter;
static int G__G__BaseDict_558_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRingSorter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRingSorter*) (soff+(sizeof(FairRingSorter)*i)))->~G__TFairRingSorter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRingSorter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRingSorter*) (soff))->~G__TFairRingSorter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairEventHeader */
static int G__G__BaseDict_658_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairEventHeader[n];
     } else {
       p = new((void*) gvp) FairEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairEventHeader;
     } else {
       p = new((void*) gvp) FairEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairEventHeader*) G__getstructoffset())->GetRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairEventHeader*) G__getstructoffset())->GetEventTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairEventHeader*) G__getstructoffset())->GetInputFileId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairEventHeader*) G__getstructoffset())->GetMCEntryNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->SetRunId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->SetEventTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->SetInputFileId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->SetMCEntryNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->Register();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_658_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_658_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairEventHeader(*(FairEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairEventHeader G__TFairEventHeader;
static int G__G__BaseDict_658_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairEventHeader*) (soff+(sizeof(FairEventHeader)*i)))->~G__TFairEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairEventHeader*) (soff))->~G__TFairEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_658_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairEventHeader* dest = (FairEventHeader*) G__getstructoffset();
   *dest = *(FairEventHeader*) libp->para[0].ref;
   const FairEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairFileHeader */
static int G__G__BaseDict_659_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairFileHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFileHeader[n];
     } else {
       p = new((void*) gvp) FairFileHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFileHeader;
     } else {
       p = new((void*) gvp) FairFileHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileHeader*) G__getstructoffset())->AddTaskClassName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileHeader*) G__getstructoffset())->SetRunId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairFileHeader*) G__getstructoffset())->GetRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairFileHeader*) G__getstructoffset())->GetListOfTasks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileHeader*) G__getstructoffset())->AddInputFile((TFile*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairFileHeader*) G__getstructoffset())->GetFileInfo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairFileHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairFileHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairFileHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFileHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_659_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFileHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairFileHeader G__TFairFileHeader;
static int G__G__BaseDict_659_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairFileHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairFileHeader*) (soff+(sizeof(FairFileHeader)*i)))->~G__TFairFileHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairFileHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairFileHeader*) (soff))->~G__TFairFileHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairLink */
static int G__G__BaseDict_661_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink[n];
     } else {
       p = new((void*) gvp) FairLink[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink;
     } else {
       p = new((void*) gvp) FairLink;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) FairLink(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairLink(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairLink(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((FairLink*) G__getstructoffset())->SetLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairLink*) G__getstructoffset())->SetLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FairLink*) G__getstructoffset())->SetLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairLink*) G__getstructoffset())->SetLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairLink*) G__getstructoffset())->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairLink*) G__getstructoffset())->GetEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairLink*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairLink*) G__getstructoffset())->GetIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FairLink*) G__getstructoffset())->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLink*) G__getstructoffset())->SetWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLink*) G__getstructoffset())->AddWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const FairLink*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((const FairLink*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairLink*) G__getstructoffset())->operator==(*(FairLink*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairLink*) G__getstructoffset())->operator<(*(FairLink*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLink::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLink::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairLink::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairLink::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLink*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLink::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLink::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLink::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_661_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLink::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_661_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairLink* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairLink(*(FairLink*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairLink G__TFairLink;
static int G__G__BaseDict_661_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairLink*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairLink*) (soff+(sizeof(FairLink)*i)))->~G__TFairLink();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairLink*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairLink*) (soff))->~G__TFairLink();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_661_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLink* dest = (FairLink*) G__getstructoffset();
   *dest = *(FairLink*) libp->para[0].ref;
   const FairLink& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMCEventHeader */
static int G__G__BaseDict_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCEventHeader[n];
     } else {
       p = new((void*) gvp) FairMCEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCEventHeader;
     } else {
       p = new((void*) gvp) FairMCEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairMCEventHeader(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) FairMCEventHeader(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairMCEventHeader((UInt_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairMCEventHeader((UInt_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairMCEventHeader*) G__getstructoffset())->GetRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairMCEventHeader*) G__getstructoffset())->GetEventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairMCEventHeader*) G__getstructoffset())->GetNPrim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairMCEventHeader*) G__getstructoffset())->IsSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetRotX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetRotY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCEventHeader*) G__getstructoffset())->GetRotZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->GetVertex(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetEventID((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetRunID((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetB((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetNPrim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->MarkSet((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetVertex((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetVertex(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetRotX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetRotY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->SetRotZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->Register();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMCEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMCEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMCEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_662_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_662_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairMCEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairMCEventHeader(*(FairMCEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMCEventHeader G__TFairMCEventHeader;
static int G__G__BaseDict_662_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMCEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMCEventHeader*) (soff+(sizeof(FairMCEventHeader)*i)))->~G__TFairMCEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMCEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMCEventHeader*) (soff))->~G__TFairMCEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_662_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCEventHeader* dest = (FairMCEventHeader*) G__getstructoffset();
   *dest = *(FairMCEventHeader*) libp->para[0].ref;
   const FairMCEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTSBufferFunctional */
static int G__G__BaseDict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTSBufferFunctional* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTSBufferFunctional(
*((TString*) G__int(libp->para[0])), (TTree*) G__int(libp->para[1])
, (BinaryFunctor*) G__int(libp->para[2]), (BinaryFunctor*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairTSBufferFunctional(
*((TString*) G__int(libp->para[0])), (TTree*) G__int(libp->para[1])
, (BinaryFunctor*) G__int(libp->para[2]), (BinaryFunctor*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTSBufferFunctional(
*((TString*) G__int(libp->para[0])), (TTree*) G__int(libp->para[1])
, (BinaryFunctor*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairTSBufferFunctional(
*((TString*) G__int(libp->para[0])), (TTree*) G__int(libp->para[1])
, (BinaryFunctor*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSBufferFunctional*) G__getstructoffset())->GetData((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTSBufferFunctional*) G__getstructoffset())->GetData((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairTSBufferFunctional*) G__getstructoffset())->GetBranchIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTSBufferFunctional*) G__getstructoffset())->SetStartFunction((BinaryFunctor*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTSBufferFunctional*) G__getstructoffset())->SetStopFunction((BinaryFunctor*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairTSBufferFunctional*) G__getstructoffset())->AllDataProcessed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairTSBufferFunctional*) G__getstructoffset())->TimeOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairTSBufferFunctional*) G__getstructoffset())->FindStartIndex((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTSBufferFunctional::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSBufferFunctional::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTSBufferFunctional::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTSBufferFunctional::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTSBufferFunctional*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSBufferFunctional::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTSBufferFunctional::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTSBufferFunctional::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_663_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTSBufferFunctional::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTSBufferFunctional G__TFairTSBufferFunctional;
static int G__G__BaseDict_663_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTSBufferFunctional*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTSBufferFunctional*) (soff+(sizeof(FairTSBufferFunctional)*i)))->~G__TFairTSBufferFunctional();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTSBufferFunctional*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTSBufferFunctional*) (soff))->~G__TFairTSBufferFunctional();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairWriteoutBuffer */
static int G__G__BaseDict_664_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairWriteoutBuffer*) G__getstructoffset())->SaveDataToTree((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairWriteoutBuffer*) G__getstructoffset())->SaveDataToTree();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairWriteoutBuffer*) G__getstructoffset())->ActivateBuffering((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairWriteoutBuffer*) G__getstructoffset())->ActivateBuffering();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->FillNewData((FairTimeStamp*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairWriteoutBuffer*) G__getstructoffset())->GetNData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<FairTimeStamp*>* pobj;
         vector<FairTimeStamp*> xobj = ((FairWriteoutBuffer*) G__getstructoffset())->GetRemoveOldData((double) G__double(libp->para[0]));
         pobj = new vector<FairTimeStamp*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<FairTimeStamp*>* pobj;
         vector<FairTimeStamp*> xobj = ((FairWriteoutBuffer*) G__getstructoffset())->GetAllData();
         pobj = new vector<FairTimeStamp*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->SetVerbose((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->DeleteOldData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->WriteOutData((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->WriteOutAllData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairWriteoutBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairWriteoutBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairWriteoutBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairWriteoutBuffer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairWriteoutBuffer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairWriteoutBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairWriteoutBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairWriteoutBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_664_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairWriteoutBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairWriteoutBuffer G__TFairWriteoutBuffer;
static int G__G__BaseDict_664_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairWriteoutBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairWriteoutBuffer*) (soff+(sizeof(FairWriteoutBuffer)*i)))->~G__TFairWriteoutBuffer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairWriteoutBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairWriteoutBuffer*) (soff))->~G__TFairWriteoutBuffer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRootManager */
static int G__G__BaseDict_667_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRootManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRootManager[n];
     } else {
       p = new((void*) gvp) FairRootManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRootManager;
     } else {
       p = new((void*) gvp) FairRootManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->AddSignalFile(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->AddBackgroundFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->AddFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->AddFriend(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->AddFriendsToChain();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->AllDataProcessed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairRootManager*) G__getstructoffset())->CheckBranch((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->CloseInFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->CloseOutFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->CreateGeometryFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->DataContainersEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->DataContainersFilled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->Fill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->ForceFill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->LastFill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->ForceGetDataContainer(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetEmptyTClonesArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetTClonesArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetDataContainer(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FairRootManager*) G__getstructoffset())->GetBranchName((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairRootManager*) G__getstructoffset())->GetBranchId(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetBranchNameList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetInTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetInChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetBGChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetSignalChainNo((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetOutTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetOutFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetGeoParameter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetObjectFromInTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairRootManager*) G__getstructoffset())->GetEventTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetCloneOfLinkData(*((const FairLink*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetCloneOfTClonesArray(*((const FairLink*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetData(*((TString*) G__int(libp->para[0])), (BinaryFunctor*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetData(*((TString*) G__int(libp->para[0])), (BinaryFunctor*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (BinaryFunctor*) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->RegisterTSBuffer(*((TString*) G__int(libp->para[0])), (FairTSBufferFunctional*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->GetTSBuffer(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRootManager::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->OpenInChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->OpenInTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->OpenBackgroundChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->OpenSignalChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->OpenOutFile((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->OpenOutFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->OpenOutFile((TFile*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->ReadBKEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->ReadEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->ReadBranchEvent((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->ReadNextEvent((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->Register((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TNamed*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->Register((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TCollection*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->Register(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRootManager*) G__getstructoffset())->RegisterWriteoutBuffer(*((TString*) G__int(libp->para[0])), (FairWriteoutBuffer*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->RunWithTimeStamps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetSignalFile(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetBackgroundFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetEvtHeaderNew((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRootManager*) G__getstructoffset())->IsEvtHeaderNew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetBranchNameList((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetCompressData((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetInputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetInTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetOutTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRootManager*) G__getstructoffset())->SetLastFill((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRootManager*) G__getstructoffset())->SetLastFill();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->TruncateBranchNames((TBranch*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->TruncateBranchNames((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->WriteGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->WriteFileHeader((FairFileHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->WriteFolder();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetEventTimeInterval((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetEventMeanTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetEventTime();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetFileHeader((FairFileHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->BGWindowWidthNo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->BGWindowWidthTime((Double_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((FairRootManager*) G__getstructoffset())->CheckMaxEventNo((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((FairRootManager*) G__getstructoffset())->CheckMaxEventNo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->StoreWriteoutBufferData((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->StoreAllWriteoutBufferData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->DeleteOldWriteoutBufferData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairRootManager*) G__getstructoffset())->GetEntryNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetEntryNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const FairRootManager*) G__getstructoffset())->GetFairLinksBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->SetUseFairLinks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRootManager*) G__getstructoffset())->GetUseFairLinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRootManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRootManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRootManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRootManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRootManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRootManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRootManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRootManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_667_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRootManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRootManager G__TFairRootManager;
static int G__G__BaseDict_667_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRootManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRootManager*) (soff+(sizeof(FairRootManager)*i)))->~G__TFairRootManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRootManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRootManager*) (soff))->~G__TFairRootManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTask */
static int G__G__BaseDict_779_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTask* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTask[n];
     } else {
       p = new((void*) gvp) FairTask[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTask;
     } else {
       p = new((void*) gvp) FairTask;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTask* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTask((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairTask((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTask((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairTask((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->InitTask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->ReInitTask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->SetParTask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->FinishTask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->FinishEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->SetVerbose((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->SetInputPersistance((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->CheckInputPersistance(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTask::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTask::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTask::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTask::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTask*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTask::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTask::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTask::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_779_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTask::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTask G__TFairTask;
static int G__G__BaseDict_779_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTask*) (soff+(sizeof(FairTask)*i)))->~G__TFairTask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTask*) (soff))->~G__TFairTask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRingSorterTask */
static int G__G__BaseDict_780_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRingSorterTask* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRingSorterTask[n];
     } else {
       p = new((void*) gvp) FairRingSorterTask[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRingSorterTask;
     } else {
       p = new((void*) gvp) FairRingSorterTask;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRingSorterTask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRingSorterTask((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairRingSorterTask((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRingSorterTask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRingSorterTask(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])));
   } else {
     p = new((void*) gvp) FairRingSorterTask(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRingSorterTask*) G__getstructoffset())->SetPersistance((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRingSorterTask*) G__getstructoffset())->SetPersistance();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRingSorterTask*) G__getstructoffset())->GetPersistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorterTask*) G__getstructoffset())->AddNewDataToTClonesArray((FairTimeStamp*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairRingSorterTask*) G__getstructoffset())->InitSorter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRingSorterTask::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorterTask::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRingSorterTask::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRingSorterTask::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRingSorterTask*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorterTask::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRingSorterTask::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRingSorterTask::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_780_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRingSorterTask::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRingSorterTask G__TFairRingSorterTask;
static int G__G__BaseDict_780_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRingSorterTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRingSorterTask*) (soff+(sizeof(FairRingSorterTask)*i)))->~G__TFairRingSorterTask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRingSorterTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRingSorterTask*) (soff))->~G__TFairRingSorterTask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairField */
static int G__G__BaseDict_782_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairField[n];
     } else {
       p = new((void*) gvp) FairField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairField;
     } else {
       p = new((void*) gvp) FairField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairField* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairField((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairField((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairField((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairField((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairField& obj = ((FairField*) G__getstructoffset())->operator=(*(FairField*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairField*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairField*) G__getstructoffset())->IsConst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairField*) G__getstructoffset())->IsMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairField*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairField*) G__getstructoffset())->GetBx((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairField*) G__getstructoffset())->GetBy((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairField*) G__getstructoffset())->GetBz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairField*) G__getstructoffset())->GetFieldValue((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairField*) G__getstructoffset())->GetBxyz((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairField*) G__getstructoffset())->FillParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_782_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairField G__TFairField;
static int G__G__BaseDict_782_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairField*) (soff+(sizeof(FairField)*i)))->~G__TFairField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairField*) (soff))->~G__TFairField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRun */
static int G__G__BaseDict_783_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRun::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->AddTask((FairTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetTask((FairTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairRun*) G__getstructoffset())->Run((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairRun*) G__getstructoffset())->Run((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRun*) G__getstructoffset())->Run();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetOutputFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetOutputFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetEventHeader((FairEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetRuntimeDb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetOutputFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairRun*) G__getstructoffset())->GetRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetRunId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetEventHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRun*) G__getstructoffset())->IsAna());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetTask((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRun*) G__getstructoffset())->GetMainTask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairRun*) G__getstructoffset())->GetNTasks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->CreateGeometryFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetWriteRunInfoFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetGenerateRunInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRun*) G__getstructoffset())->GetWriteRunInfoFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRun*) G__getstructoffset())->IsRunInfoGenerated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->SetUseFairLinks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_783_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRun G__TFairRun;
static int G__G__BaseDict_783_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRun*) (soff+(sizeof(FairRun)*i)))->~G__TFairRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRun*) (soff))->~G__TFairRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRunInfo */
static int G__G__BaseDict_826_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunInfo[n];
     } else {
       p = new((void*) gvp) FairRunInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunInfo;
     } else {
       p = new((void*) gvp) FairRunInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunInfo*) G__getstructoffset())->StoreInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunInfo*) G__getstructoffset())->WriteInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunInfo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRunInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRunInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_826_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunInfo G__TFairRunInfo;
static int G__G__BaseDict_826_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunInfo*) (soff+(sizeof(FairRunInfo)*i)))->~G__TFairRunInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunInfo*) (soff))->~G__TFairRunInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRunAna */
static int G__G__BaseDict_827_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunAna::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunAna* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunAna[n];
     } else {
       p = new((void*) gvp) FairRunAna[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunAna;
     } else {
       p = new((void*) gvp) FairRunAna;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->AddFriend(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->Run((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->Run((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->RunEventReco((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->RunMixed((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->RunTSBuffers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->DummyRun((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->RunMQ((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairRunAna*) G__getstructoffset())->RunOnLmdFiles((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairRunAna*) G__getstructoffset())->RunOnLmdFiles((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRunAna*) G__getstructoffset())->RunOnLmdFiles();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->TerminateRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetSignalFile(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetBackgroundFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->AddBackgroundFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->AddSignalFile(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetInputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->AddFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->Reinit((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairRunAna*) G__getstructoffset())->getRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetField((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetGeomFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunAna*) G__getstructoffset())->GetGeoFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->InitContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRunAna*) G__getstructoffset())->SetContainerStatic((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRunAna*) G__getstructoffset())->SetContainerStatic();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunAna*) G__getstructoffset())->GetContainerStatic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->RunWithTimeStamps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunAna*) G__getstructoffset())->IsTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->CompressData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetEventTimeInterval((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->SetEventMeanTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->BGWindowWidthNo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->BGWindowWidthTime((Double_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->StopProcessingLMD();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunAna*) G__getstructoffset())->GetLMDProcessingStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunAna::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAna::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRunAna::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRunAna::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunAna*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAna::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunAna::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunAna::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_827_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunAna::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunAna G__TFairRunAna;
static int G__G__BaseDict_827_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunAna*) (soff+(sizeof(FairRunAna)*i)))->~G__TFairRunAna();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunAna*) (soff))->~G__TFairRunAna();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairIon */
static int G__G__BaseDict_920_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairIon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairIon[n];
     } else {
       p = new((void*) gvp) FairIon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairIon;
     } else {
       p = new((void*) gvp) FairIon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairIon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairIon* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairIon(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairIon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((FairIon*) G__getstructoffset())->SetParams((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairIon*) G__getstructoffset())->SetParams((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairIon*) G__getstructoffset())->SetParams((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairIon*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairIon*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairIon*) G__getstructoffset())->GetQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairIon*) G__getstructoffset())->GetExcEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairIon*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairIon*) G__getstructoffset())->SetExcEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairIon*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairIon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairIon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairIon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairIon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairIon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairIon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairIon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairIon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_920_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairIon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairIon G__TFairIon;
static int G__G__BaseDict_920_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairIon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairIon*) (soff+(sizeof(FairIon)*i)))->~G__TFairIon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairIon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairIon*) (soff))->~G__TFairIon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairDetector */
static int G__G__BaseDict_922_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((FairDetector*) G__getstructoffset())->ProcessHits((FairVolume*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((FairDetector*) G__getstructoffset())->ProcessHits());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->EndOfEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->Register();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairDetector*) G__getstructoffset())->GetCollection((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->CopyClones((TClonesArray*) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->FinishPrimary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->FinishRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->BeginPrimary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->PostTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->PreTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->BeginEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->FinishEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->SetSpecialPhysicsCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->SaveGeoParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairDetector*) G__getstructoffset())->GetDetId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_922_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairDetector G__TFairDetector;
static int G__G__BaseDict_922_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairDetector*) (soff+(sizeof(FairDetector)*i)))->~G__TFairDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairDetector*) (soff))->~G__TFairDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGenericStack */
static int G__G__BaseDict_923_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGenericStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGenericStack[n];
     } else {
       p = new((void*) gvp) FairGenericStack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGenericStack;
     } else {
       p = new((void*) gvp) FairGenericStack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGenericStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGenericStack((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairGenericStack((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->PushTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (TMCProcess) G__int(libp->para[14]), *(Int_t*) G__Intref(&libp->para[15])
, (Double_t) G__double(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->AddParticle((TParticle*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->FillTrackArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairGenericStack*) G__getstructoffset())->UpdateTrackIndex((TRefArray*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairGenericStack*) G__getstructoffset())->UpdateTrackIndex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->SetDetArrayList((TRefArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->Register();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairGenericStack*) G__getstructoffset())->GetParticle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGenericStack*) G__getstructoffset())->GetListOfParticles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGenericStack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenericStack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGenericStack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGenericStack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenericStack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenericStack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGenericStack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenericStack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_923_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGenericStack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGenericStack G__TFairGenericStack;
static int G__G__BaseDict_923_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGenericStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGenericStack*) (soff+(sizeof(FairGenericStack)*i)))->~G__TFairGenericStack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGenericStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGenericStack*) (soff))->~G__TFairGenericStack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairPrimaryGenerator */
static int G__G__BaseDict_924_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairPrimaryGenerator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPrimaryGenerator[n];
     } else {
       p = new((void*) gvp) FairPrimaryGenerator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPrimaryGenerator;
     } else {
       p = new((void*) gvp) FairPrimaryGenerator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairPrimaryGenerator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPrimaryGenerator((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairPrimaryGenerator((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPrimaryGenerator((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairPrimaryGenerator((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairPrimaryGenerator*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->AddGenerator((FairGenerator*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairPrimaryGenerator*) G__getstructoffset())->GenerateEvent((FairGenericStack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((FairPrimaryGenerator*) G__getstructoffset())->AddTrack(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetBeam((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetBeamAngle((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetEventPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetTarget((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetMultTarget((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SmearVertexZ((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SmearGausVertexZ((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SmearVertexXY((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SmearGausVertexXY((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairPrimaryGenerator*) G__getstructoffset())->GetListOfGenerators());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->SetEvent((FairMCEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairPrimaryGenerator*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairPrimaryGenerator*) G__getstructoffset())->DoTracking((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairPrimaryGenerator*) G__getstructoffset())->DoTracking();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairPrimaryGenerator*) G__getstructoffset())->GetTotPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairPrimaryGenerator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPrimaryGenerator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairPrimaryGenerator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairPrimaryGenerator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPrimaryGenerator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPrimaryGenerator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPrimaryGenerator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPrimaryGenerator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_924_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPrimaryGenerator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairPrimaryGenerator G__TFairPrimaryGenerator;
static int G__G__BaseDict_924_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairPrimaryGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairPrimaryGenerator*) (soff+(sizeof(FairPrimaryGenerator)*i)))->~G__TFairPrimaryGenerator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairPrimaryGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairPrimaryGenerator*) (soff))->~G__TFairPrimaryGenerator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTrajFilter */
static int G__G__BaseDict_925_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTrajFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTrajFilter[n];
     } else {
       p = new((void*) gvp) FairTrajFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTrajFilter;
     } else {
       p = new((void*) gvp) FairTrajFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTrajFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrajFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTrajFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTrajFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairTrajFilter*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrajFilter*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrajFilter*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrajFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrajFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTrajFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrajFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTrajFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTrajFilter*) G__getstructoffset())->AddTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTrajFilter*) G__getstructoffset())->AddTrack((TParticle*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTrajFilter*) G__getstructoffset())->GetCurrentTrk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->Init(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->Init(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->Init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrajFilter*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTrajFilter::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairTrajFilter*) G__getstructoffset())->IsAccepted((TParticle*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetVertexCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutP();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetMomentumCutD();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((FairTrajFilter*) G__getstructoffset())->SetPtRapidityCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FairTrajFilter*) G__getstructoffset())->SetPtRapidityCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->SetPtRapidityCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetPtRapidityCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetPtRapidityCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairTrajFilter*) G__getstructoffset())->SetEnergyCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetEnergyCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetEnergyCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetStorePrimaries((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetStorePrimaries();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetStoreSecondaries((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetStoreSecondaries();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairTrajFilter*) G__getstructoffset())->SetStepSizeCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairTrajFilter*) G__getstructoffset())->SetStepSizeCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrajFilter*) G__getstructoffset())->GetVertexCut(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrajFilter*) G__getstructoffset())->GetMomentumCutP(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrajFilter*) G__getstructoffset())->GetMomentumCutD(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrajFilter*) G__getstructoffset())->GetPtRapidityCut(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrajFilter*) G__getstructoffset())->GetEnergyCut(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairTrajFilter*) G__getstructoffset())->IsPrimariesStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairTrajFilter*) G__getstructoffset())->IsSecondariesStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrajFilter*) G__getstructoffset())->GetStepSizeCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_925_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairTrajFilter*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTrajFilter G__TFairTrajFilter;
static int G__G__BaseDict_925_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTrajFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTrajFilter*) (soff+(sizeof(FairTrajFilter)*i)))->~G__TFairTrajFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTrajFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTrajFilter*) (soff))->~G__TFairTrajFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairVolume */
static int G__G__BaseDict_926_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume[n];
     } else {
       p = new((void*) gvp) FairVolume[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume;
     } else {
       p = new((void*) gvp) FairVolume;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (FairModule*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairVolume(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (FairModule*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairVolume(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairVolume(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolume(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) FairVolume(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setRealName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((FairVolume*) G__getstructoffset())->getRealName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getVolumeId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getModId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setModId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setCopyNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setVolumeId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setGeoNode((FairGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setMotherId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setMotherCopyNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairVolume*) G__getstructoffset())->GetModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->SetModule((FairModule*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getMCid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getCopyNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->setMCid((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairVolume*) G__getstructoffset())->getGeoNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getMotherId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolume*) G__getstructoffset())->getMotherCopyNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_926_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairVolume G__TFairVolume;
static int G__G__BaseDict_926_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairVolume*) (soff+(sizeof(FairVolume)*i)))->~G__TFairVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairVolume*) (soff))->~G__TFairVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMCApplication */
static int G__G__BaseDict_928_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCApplication* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairMCApplication(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) FairMCApplication(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCApplication* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCApplication[n];
     } else {
       p = new((void*) gvp) FairMCApplication[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCApplication;
     } else {
       p = new((void*) gvp) FairMCApplication;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMCApplication::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->AddDecayModes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->AddTask((TTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->FinishRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetDetector((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetGenerator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetListOfTasks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetStack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMCApplication*) G__getstructoffset())->GetChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->InitMC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->InitTasks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->RunMC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetField((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetGenerator((FairPrimaryGenerator*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetParTask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetPythiaDecayer((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetPythiaDecayerConfig(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetRadiationLengthReg((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetRadiationMapReg((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetTrackingDebugMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetUserDecay((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->SetUserDecayConfig(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->StopRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->AddMeshList((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMCApplication::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCApplication::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMCApplication::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMCApplication::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCApplication*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCApplication::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCApplication::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCApplication::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_928_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCApplication::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMCApplication G__TFairMCApplication;
static int G__G__BaseDict_928_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMCApplication*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMCApplication*) (soff+(sizeof(FairMCApplication)*i)))->~G__TFairMCApplication();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMCApplication*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMCApplication*) (soff))->~G__TFairMCApplication();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairParticle */
static int G__G__BaseDict_942_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairParticle((Int_t) G__int(libp->para[0]), (TParticle*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) FairParticle((Int_t) G__int(libp->para[0]), (TParticle*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairParticle(
(Int_t) G__int(libp->para[0]), (TParticle*) G__int(libp->para[1])
, (FairParticle*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), (TParticle*) G__int(libp->para[1])
, (FairParticle*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairParticle(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) FairParticle(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairParticle(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) FairParticle(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 17:
     //m: 17
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Bool_t) G__int(libp->para[16]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Bool_t) G__int(libp->para[16]));
     }
     break;
   case 16:
     //m: 16
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15]));
     }
     break;
   case 15:
     //m: 15
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]));
     }
     break;
   case 14:
     //m: 14
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13]));
     }
     break;
   case 13:
     //m: 13
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]));
     }
     break;
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((const TString*) G__int(libp->para[6])));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) FairParticle(
(Int_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (TMCParticleType) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle[n];
     } else {
       p = new((void*) gvp) FairParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairParticle;
     } else {
       p = new((void*) gvp) FairParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairParticle*) G__getstructoffset())->SetMother((FairParticle*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairParticle*) G__getstructoffset())->AddDaughter((FairParticle*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairParticle*) G__getstructoffset())->PrintDaughters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairParticle*) G__getstructoffset())->GetPDG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairParticle*) G__getstructoffset())->GetParticle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairParticle*) G__getstructoffset())->GetMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairParticle*) G__getstructoffset())->GetNofDaughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairParticle*) G__getstructoffset())->GetDaughter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetMCType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairParticle*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairParticle*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairParticle*) G__getstructoffset())->GetDecayTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((FairParticle*) G__getstructoffset())->GetPType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairParticle*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetSpin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetiParity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetConjugation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetIsospin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetIsospinZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetgParity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetLepton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairParticle*) G__getstructoffset())->GetBaryon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairParticle*) G__getstructoffset())->IsStable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_942_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairParticle G__TFairParticle;
static int G__G__BaseDict_942_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairParticle*) (soff+(sizeof(FairParticle)*i)))->~G__TFairParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairParticle*) (soff))->~G__TFairParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairModule */
static int G__G__BaseDict_943_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairModule[n];
     } else {
       p = new((void*) gvp) FairModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairModule;
     } else {
       p = new((void*) gvp) FairModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairModule(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairModule(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairModule((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairModule((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairModule*) G__getstructoffset())->SetGeometryFileName(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((FairModule*) G__getstructoffset())->SetGeometryFileName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FairModule*) G__getstructoffset())->GetGeometryFileName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FairModule*) G__getstructoffset())->GetGeometryFileVer();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ConstructGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ConstructOpGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ConstructRootGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ConstructASCIIGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ModifyGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ConstructGDMLGeometry((TGeoMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairModule*) G__getstructoffset())->CheckIfSensitive(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ExpandNode((TGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ExpandNodeForGDML((TGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairModule*) G__getstructoffset())->getVolId(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairModule*) G__getstructoffset())->GetModId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->SetVerboseLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairModule*) G__getstructoffset())->IsActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->SetModId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->SetMotherVolume(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->ProcessNodes((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->SetParContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->InitParContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairModule*) G__getstructoffset())->GetListOfGeoPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairModule*) G__getstructoffset())->getFairVolume((FairGeoNode*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->AddSensitiveVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_943_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairModule G__TFairModule;
static int G__G__BaseDict_943_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairModule*) (soff+(sizeof(FairModule)*i)))->~G__TFairModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairModule*) (soff))->~G__TFairModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRunSim */
static int G__G__BaseDict_944_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunSim[n];
     } else {
       p = new((void*) gvp) FairRunSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunSim;
     } else {
       p = new((void*) gvp) FairRunSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunSim::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->AddModule((FairModule*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->AddNewIon((FairIon*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->AddNewParticle((FairParticle*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetUserDefIons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetUserDefParticles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetField((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetGenerator((FairPrimaryGenerator*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetMCEventHeader((FairMCEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetMaterials((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRunSim*) G__getstructoffset())->SetStoreTraj((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRunSim*) G__getstructoffset())->SetStoreTraj();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetTrackingDebugMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetGeoModel((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetGeoModel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetMCEventHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetListOfModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairRunSim*) G__getstructoffset())->GetPrimaryGenerator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetPythiaDecayer((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetPythiaDecayer(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetUserDecay(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetUserDecay((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunSim*) G__getstructoffset())->IsExtDecayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunSim*) G__getstructoffset())->IsUserDecay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetRadLenRegister((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetRadMapRegister((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetRadGridRegister((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->AddMesh((FairMesh*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetUserConfig(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetUserCuts(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetBeamMom((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairRunSim*) G__getstructoffset())->GetBeamMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunSim*) G__getstructoffset())->UseBeamMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->SetFieldContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRunSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRunSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_944_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunSim G__TFairRunSim;
static int G__G__BaseDict_944_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunSim*) (soff+(sizeof(FairRunSim)*i)))->~G__TFairRunSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunSim*) (soff))->~G__TFairRunSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMultiLinkedData */
static int G__G__BaseDict_998_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData[n];
     } else {
       p = new((void*) gvp) FairMultiLinkedData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData;
     } else {
       p = new((void*) gvp) FairMultiLinkedData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(*((set<FairLink>*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(*((set<FairLink>*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(*((set<FairLink>*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(*((set<FairLink>*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData((Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) FairMultiLinkedData((Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<FairLink>* pobj;
         const set<FairLink> xobj = ((const FairMultiLinkedData*) G__getstructoffset())->GetLinks();
         pobj = new set<FairLink>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairMultiLinkedData*) G__getstructoffset())->GetNLinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairLink* pobj;
         const FairLink xobj = ((const FairMultiLinkedData*) G__getstructoffset())->GetLink((Int_t) G__int(libp->para[0]));
         pobj = new FairLink(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairMultiLinkedData* pobj;
         const FairMultiLinkedData xobj = ((const FairMultiLinkedData*) G__getstructoffset())->GetLinksWithType((Int_t) G__int(libp->para[0]));
         pobj = new FairMultiLinkedData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairMultiLinkedData*) G__getstructoffset())->GetData(*(FairLink*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairMultiLinkedData*) G__getstructoffset())->GetDefaultType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairMultiLinkedData*) G__getstructoffset())->GetPersistanceCheck());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairMultiLinkedData*) G__getstructoffset())->GetVerbose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->SetDefaultType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->SetPersistanceCheck((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->SetVerbose((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairMultiLinkedData*) G__getstructoffset())->SetLinks(*((FairMultiLinkedData*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairMultiLinkedData*) G__getstructoffset())->SetLinks(*((FairMultiLinkedData*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FairMultiLinkedData*) G__getstructoffset())->SetLink(*((FairLink*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairMultiLinkedData*) G__getstructoffset())->SetLink(*((FairLink*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairMultiLinkedData*) G__getstructoffset())->SetLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairMultiLinkedData*) G__getstructoffset())->AddLinks(*((FairMultiLinkedData*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairMultiLinkedData*) G__getstructoffset())->AddLinks(*((FairMultiLinkedData*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FairMultiLinkedData*) G__getstructoffset())->AddLink(*((FairLink*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FairMultiLinkedData*) G__getstructoffset())->AddLink(*((FairLink*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairMultiLinkedData*) G__getstructoffset())->AddLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->InsertLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->InsertHistory(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->AddAllWeights((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->SetAllWeights((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->MultiplyAllWeights((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairMultiLinkedData*) G__getstructoffset())->IsLinkInList(*((FairLink*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairMultiLinkedData*) G__getstructoffset())->IsLinkInList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairMultiLinkedData*) G__getstructoffset())->LinkPosInList(*((FairLink*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairMultiLinkedData*) G__getstructoffset())->LinkPosInList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->DeleteLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->DeleteLink((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->ResetLinks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const ostream& obj = ((const FairMultiLinkedData*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const ostream& obj = ((const FairMultiLinkedData*) G__getstructoffset())->Print();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMultiLinkedData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMultiLinkedData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMultiLinkedData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMultiLinkedData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_998_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMultiLinkedData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_998_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairMultiLinkedData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairMultiLinkedData(*(FairMultiLinkedData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMultiLinkedData G__TFairMultiLinkedData;
static int G__G__BaseDict_998_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMultiLinkedData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMultiLinkedData*) (soff+(sizeof(FairMultiLinkedData)*i)))->~G__TFairMultiLinkedData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMultiLinkedData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMultiLinkedData*) (soff))->~G__TFairMultiLinkedData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_998_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData* dest = (FairMultiLinkedData*) G__getstructoffset();
   *dest = *(FairMultiLinkedData*) libp->para[0].ref;
   const FairMultiLinkedData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMultiLinkedData_Interface */
static int G__G__BaseDict_1009_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData_Interface* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface[n];
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface;
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData_Interface* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(*(FairMultiLinkedData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(*(FairMultiLinkedData*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(*(FairMultiLinkedData*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(*(FairMultiLinkedData*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData_Interface* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(*((TString*) G__int(libp->para[0])), *((vector<Int_t>*) G__int(libp->para[1])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData_Interface* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface(
(Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMultiLinkedData_Interface((Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) FairMultiLinkedData_Interface((Int_t) G__int(libp->para[0]), *((vector<Int_t>*) G__int(libp->para[1])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<FairLink>* pobj;
         const set<FairLink> xobj = ((const FairMultiLinkedData_Interface*) G__getstructoffset())->GetLinks();
         pobj = new set<FairLink>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairMultiLinkedData_Interface*) G__getstructoffset())->GetNLinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairLink* pobj;
         const FairLink xobj = ((const FairMultiLinkedData_Interface*) G__getstructoffset())->GetLink((Int_t) G__int(libp->para[0]));
         pobj = new FairLink(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairMultiLinkedData* pobj;
         const FairMultiLinkedData xobj = ((const FairMultiLinkedData_Interface*) G__getstructoffset())->GetLinksWithType((Int_t) G__int(libp->para[0]));
         pobj = new FairMultiLinkedData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->SetLinks(*((FairMultiLinkedData*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->SetLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->AddLinks(*((FairMultiLinkedData*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->AddLinks(*((FairMultiLinkedData*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->AddLink(*((FairLink*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairMultiLinkedData_Interface*) G__getstructoffset())->GetPointerToData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->ResetLinks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const ostream& obj = ((const FairMultiLinkedData_Interface*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const ostream& obj = ((const FairMultiLinkedData_Interface*) G__getstructoffset())->Print();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMultiLinkedData_Interface::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData_Interface::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMultiLinkedData_Interface::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMultiLinkedData_Interface::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMultiLinkedData_Interface*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData_Interface::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMultiLinkedData_Interface::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMultiLinkedData_Interface::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1009_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMultiLinkedData_Interface::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1009_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairMultiLinkedData_Interface* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairMultiLinkedData_Interface(*(FairMultiLinkedData_Interface*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMultiLinkedData_Interface G__TFairMultiLinkedData_Interface;
static int G__G__BaseDict_1009_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMultiLinkedData_Interface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMultiLinkedData_Interface*) (soff+(sizeof(FairMultiLinkedData_Interface)*i)))->~G__TFairMultiLinkedData_Interface();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMultiLinkedData_Interface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMultiLinkedData_Interface*) (soff))->~G__TFairMultiLinkedData_Interface();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1009_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMultiLinkedData_Interface* dest = (FairMultiLinkedData_Interface*) G__getstructoffset();
   *dest = *(FairMultiLinkedData_Interface*) libp->para[0].ref;
   const FairMultiLinkedData_Interface& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairSource */
static int G__G__BaseDict_1036_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairSource*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairSource*) G__getstructoffset())->ReadEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairSource*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairSource*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1036_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairSource G__TFairSource;
static int G__G__BaseDict_1036_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairSource*) (soff+(sizeof(FairSource)*i)))->~G__TFairSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairSource*) (soff))->~G__TFairSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1036_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairSource* dest = (FairSource*) G__getstructoffset();
   *dest = *(FairSource*) libp->para[0].ref;
   const FairSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRunOnline */
static int G__G__BaseDict_1037_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunOnline::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunOnline* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunOnline[n];
     } else {
       p = new((void*) gvp) FairRunOnline[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunOnline;
     } else {
       p = new((void*) gvp) FairRunOnline;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunOnline* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRunOnline((FairSource*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairRunOnline((FairSource*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->Reinit((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairRunOnline*) G__getstructoffset())->getRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->SetField((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->SetAutoFinish((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->SetSource((FairSource*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->InitContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FairRunOnline*) G__getstructoffset())->SetContainerStatic((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FairRunOnline*) G__getstructoffset())->SetContainerStatic();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairRunOnline*) G__getstructoffset())->GetContainerStatic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->AddObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->SetGenerateHtml((Bool_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->Finish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRunOnline::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunOnline::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRunOnline::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRunOnline::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRunOnline*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunOnline::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunOnline::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRunOnline::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1037_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRunOnline::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunOnline G__TFairRunOnline;
static int G__G__BaseDict_1037_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunOnline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunOnline*) (soff+(sizeof(FairRunOnline)*i)))->~G__TFairRunOnline();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunOnline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunOnline*) (soff))->~G__TFairRunOnline();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairLinkManager */
static int G__G__BaseDict_1038_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLinkManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLinkManager[n];
     } else {
       p = new((void*) gvp) FairLinkManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLinkManager;
     } else {
       p = new((void*) gvp) FairLinkManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLinkManager::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLinkManager*) G__getstructoffset())->AddIgnoreType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairLinkManager*) G__getstructoffset())->IsIgnoreType((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLinkManager*) G__getstructoffset())->AddIncludeType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<Int_t>* pobj;
         const set<Int_t> xobj = ((const FairLinkManager*) G__getstructoffset())->GetIgnoreTypes();
         pobj = new set<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLinkManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLinkManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairLinkManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairLinkManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLinkManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLinkManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLinkManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLinkManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1038_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLinkManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairLinkManager G__TFairLinkManager;
static int G__G__BaseDict_1038_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairLinkManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairLinkManager*) (soff+(sizeof(FairLinkManager)*i)))->~G__TFairLinkManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairLinkManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairLinkManager*) (soff))->~G__TFairLinkManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairBaseContFact */
static int G__G__BaseDict_1043_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairBaseContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairBaseContFact[n];
     } else {
       p = new((void*) gvp) FairBaseContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairBaseContFact;
     } else {
       p = new((void*) gvp) FairBaseContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairBaseContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairBaseContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairBaseContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairBaseContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1043_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairBaseContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairBaseContFact G__TFairBaseContFact;
static int G__G__BaseDict_1043_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairBaseContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairBaseContFact*) (soff+(sizeof(FairBaseContFact)*i)))->~G__TFairBaseContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairBaseContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairBaseContFact*) (soff))->~G__TFairBaseContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairBaseParSet */
static int G__G__BaseDict_1155_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairBaseParSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairBaseParSet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairBaseParSet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairBaseParSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairBaseParSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairBaseParSet((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairBaseParSet((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairBaseParSet[n];
       } else {
         p = new((void*) gvp) FairBaseParSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairBaseParSet;
       } else {
         p = new((void*) gvp) FairBaseParSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseParSet*) G__getstructoffset())->SetDetList((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseParSet*) G__getstructoffset())->SetGen((FairPrimaryGenerator*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseParSet*) G__getstructoffset())->SetBeamMom((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseParSet*) G__getstructoffset())->SetContListStr((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairBaseParSet*) G__getstructoffset())->GetDetList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairBaseParSet*) G__getstructoffset())->GetPriGen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairBaseParSet*) G__getstructoffset())->GetBeamMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairBaseParSet*) G__getstructoffset())->GetContList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairBaseParSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseParSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairBaseParSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairBaseParSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairBaseParSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseParSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairBaseParSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairBaseParSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1155_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairBaseParSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairBaseParSet G__TFairBaseParSet;
static int G__G__BaseDict_1155_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairBaseParSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairBaseParSet*) (soff+(sizeof(FairBaseParSet)*i)))->~G__TFairBaseParSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairBaseParSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairBaseParSet*) (soff))->~G__TFairBaseParSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoParSet */
static int G__G__BaseDict_1156_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoParSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoParSet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairGeoParSet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoParSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairGeoParSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoParSet((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairGeoParSet((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoParSet[n];
       } else {
         p = new((void*) gvp) FairGeoParSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoParSet;
       } else {
         p = new((void*) gvp) FairGeoParSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoParSet*) G__getstructoffset())->SetGeoNodes((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoParSet*) G__getstructoffset())->SetGeometry((TGeoManager*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoParSet*) G__getstructoffset())->GetGeoNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoParSet*) G__getstructoffset())->GetGeometry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoParSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoParSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoParSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoParSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoParSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoParSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoParSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoParSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1156_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoParSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoParSet G__TFairGeoParSet;
static int G__G__BaseDict_1156_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoParSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoParSet*) (soff+(sizeof(FairGeoParSet)*i)))->~G__TFairGeoParSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoParSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoParSet*) (soff))->~G__TFairGeoParSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairVolumeList */
static int G__G__BaseDict_1175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairVolumeList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolumeList[n];
     } else {
       p = new((void*) gvp) FairVolumeList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairVolumeList;
     } else {
       p = new((void*) gvp) FairVolumeList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairVolumeList*) G__getstructoffset())->getVolume((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolumeList*) G__getstructoffset())->getVolumeId((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairVolumeList*) G__getstructoffset())->findObject(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolumeList*) G__getstructoffset())->addVolume((FairVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairVolumeList*) G__getstructoffset())->getEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairVolumeList*) G__getstructoffset())->At((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairVolumeList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolumeList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairVolumeList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairVolumeList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairVolumeList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolumeList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairVolumeList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairVolumeList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairVolumeList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairVolumeList G__TFairVolumeList;
static int G__G__BaseDict_1175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairVolumeList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairVolumeList*) (soff+(sizeof(FairVolumeList)*i)))->~G__TFairVolumeList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairVolumeList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairVolumeList*) (soff))->~G__TFairVolumeList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeaneApplication */
static int G__G__BaseDict_1176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeaneApplication* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeaneApplication[n];
     } else {
       p = new((void*) gvp) FairGeaneApplication[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeaneApplication;
     } else {
       p = new((void*) gvp) FairGeaneApplication;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeaneApplication* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairGeaneApplication((Bool_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairGeaneApplication((Bool_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeaneApplication*) G__getstructoffset())->GetField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeaneApplication*) G__getstructoffset())->InitMC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeaneApplication*) G__getstructoffset())->SetField((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeaneApplication::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeaneApplication*) G__getstructoffset())->StopRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeaneApplication::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeaneApplication::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeaneApplication::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeaneApplication::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeaneApplication*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeaneApplication::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeaneApplication::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeaneApplication::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1176_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeaneApplication::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeaneApplication G__TFairGeaneApplication;
static int G__G__BaseDict_1176_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeaneApplication*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeaneApplication*) (soff+(sizeof(FairGeaneApplication)*i)))->~G__TFairGeaneApplication();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeaneApplication*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeaneApplication*) (soff))->~G__TFairGeaneApplication();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGenerator */
static int G__G__BaseDict_1177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGenerator*) G__getstructoffset())->ReadEvent((FairPrimaryGenerator*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairGenerator*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGenerator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenerator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGenerator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGenerator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGenerator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenerator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGenerator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGenerator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGenerator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGenerator G__TFairGenerator;
static int G__G__BaseDict_1177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGenerator*) (soff+(sizeof(FairGenerator)*i)))->~G__TFairGenerator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGenerator*) (soff))->~G__TFairGenerator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRunIdGenerator */
static int G__G__BaseDict_1180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         timespec* pobj;
         timespec xobj = ((FairRunIdGenerator*) G__getstructoffset())->getTimeSpec();
         pobj = new timespec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         timespec* pobj;
         timespec xobj = ((FairRunIdGenerator*) G__getstructoffset())->getTimeSpecFromTID((unsigned int) G__int(libp->para[0]));
         pobj = new timespec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairRunIdGenerator*) G__getstructoffset())->getTID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunIdGenerator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunIdGenerator[n];
     } else {
       p = new((void*) gvp) FairRunIdGenerator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRunIdGenerator;
     } else {
       p = new((void*) gvp) FairRunIdGenerator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairRunIdGenerator*) G__getstructoffset())->generateId());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1180_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairRunIdGenerator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairRunIdGenerator(*(FairRunIdGenerator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRunIdGenerator G__TFairRunIdGenerator;
static int G__G__BaseDict_1180_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRunIdGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRunIdGenerator*) (soff+(sizeof(FairRunIdGenerator)*i)))->~G__TFairRunIdGenerator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRunIdGenerator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRunIdGenerator*) (soff))->~G__TFairRunIdGenerator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRunIdGenerator* dest = (FairRunIdGenerator*) G__getstructoffset();
   *dest = *(FairRunIdGenerator*) libp->para[0].ref;
   const FairRunIdGenerator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRecoEventHeader */
static int G__G__BaseDict_1182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRecoEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRecoEventHeader[n];
     } else {
       p = new((void*) gvp) FairRecoEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRecoEventHeader;
     } else {
       p = new((void*) gvp) FairRecoEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairRecoEventHeader*) G__getstructoffset())->GetRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRecoEventHeader*) G__getstructoffset())->GetEventTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRecoEventHeader*) G__getstructoffset())->GetEventTimeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairRecoEventHeader*) G__getstructoffset())->GetIdentifier());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRecoEventHeader*) G__getstructoffset())->SetRunId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRecoEventHeader*) G__getstructoffset())->SetEventTime((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRecoEventHeader*) G__getstructoffset())->SetIdentifier((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRecoEventHeader*) G__getstructoffset())->operator<(*(FairRecoEventHeader*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRecoEventHeader*) G__getstructoffset())->operator>(*(FairRecoEventHeader*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const FairRecoEventHeader*) G__getstructoffset())->operator==(*(FairRecoEventHeader*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRecoEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRecoEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRecoEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRecoEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRecoEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRecoEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRecoEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRecoEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1182_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRecoEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1182_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairRecoEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairRecoEventHeader(*(FairRecoEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRecoEventHeader G__TFairRecoEventHeader;
static int G__G__BaseDict_1182_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRecoEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRecoEventHeader*) (soff+(sizeof(FairRecoEventHeader)*i)))->~G__TFairRecoEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRecoEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRecoEventHeader*) (soff))->~G__TFairRecoEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1182_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRecoEventHeader* dest = (FairRecoEventHeader*) G__getstructoffset();
   *dest = *(FairRecoEventHeader*) libp->para[0].ref;
   const FairRecoEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairEventBuilder */
static int G__G__BaseDict_1184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->WriteOutAllDeadTimeData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::pair<double,FairRecoEventHeader*> >* pobj;
         vector<std::pair<double,FairRecoEventHeader*> > xobj = ((FairEventBuilder*) G__getstructoffset())->FindEvents();
         pobj = new vector<std::pair<double,FairRecoEventHeader*> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->StoreEventData((FairRecoEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->SetIdentifier((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FairEventBuilder*) G__getstructoffset())->GetIdentifier());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairEventBuilder*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->Finish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((FairEventBuilder*) G__getstructoffset())->AllowedTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->SetMaxAllowedTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->SetBuilderName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FairEventBuilder*) G__getstructoffset())->GetBuilderName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairEventBuilder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairEventBuilder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairEventBuilder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventBuilder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventBuilder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairEventBuilder G__TFairEventBuilder;
static int G__G__BaseDict_1184_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairEventBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairEventBuilder*) (soff+(sizeof(FairEventBuilder)*i)))->~G__TFairEventBuilder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairEventBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairEventBuilder*) (soff))->~G__TFairEventBuilder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairEventBuilderManager */
static int G__G__BaseDict_1190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilderManager*) G__getstructoffset())->AddEventBuilder((FairEventBuilder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairEventBuilderManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilderManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairEventBuilderManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairEventBuilderManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairEventBuilderManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilderManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventBuilderManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairEventBuilderManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairEventBuilderManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairEventBuilderManager G__TFairEventBuilderManager;
static int G__G__BaseDict_1190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairEventBuilderManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairEventBuilderManager*) (soff+(sizeof(FairEventBuilderManager)*i)))->~G__TFairEventBuilderManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairEventBuilderManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairEventBuilderManager*) (soff))->~G__TFairEventBuilderManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairFileInfo */
static int G__G__BaseDict_1199_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairFileInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFileInfo[n];
     } else {
       p = new((void*) gvp) FairFileInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFileInfo;
     } else {
       p = new((void*) gvp) FairFileInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairFileInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairFileInfo(
(TFile*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) FairFileInfo(
(TFile*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FairFileInfo*) G__getstructoffset())->GetPath();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairFileInfo*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairFileInfo*) G__getstructoffset())->GetIdentifier());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((FairFileInfo*) G__getstructoffset())->GetOrderInChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileInfo*) G__getstructoffset())->SetPath(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileInfo*) G__getstructoffset())->SetSize((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileInfo*) G__getstructoffset())->SetIdentifier((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileInfo*) G__getstructoffset())->SetOrderInChain((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairFileInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairFileInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairFileInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFileInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFileInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFileInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFileInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairFileInfo G__TFairFileInfo;
static int G__G__BaseDict_1199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairFileInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairFileInfo*) (soff+(sizeof(FairFileInfo)*i)))->~G__TFairFileInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairFileInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairFileInfo*) (soff))->~G__TFairFileInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairHit */
static int G__G__BaseDict_1200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairHit[n];
     } else {
       p = new((void*) gvp) FairHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairHit;
     } else {
       p = new((void*) gvp) FairHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairHit(
(Int_t) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) FairHit(
(Int_t) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairHit*) G__getstructoffset())->GetRefIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairHit*) G__getstructoffset())->PositionError(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairHit*) G__getstructoffset())->GetDetectorID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairHit*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairHit*) G__getstructoffset())->Position(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetDx((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetDy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetDz((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetDxyz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetPositionError(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetRefIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetDetectorID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->SetPosition(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1200_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1200_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairHit(*(FairHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairHit G__TFairHit;
static int G__G__BaseDict_1200_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairHit*) (soff+(sizeof(FairHit)*i)))->~G__TFairHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairHit*) (soff))->~G__TFairHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1200_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairHit* dest = (FairHit*) G__getstructoffset();
   *dest = *(FairHit*) libp->para[0].ref;
   const FairHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMCPoint */
static int G__G__BaseDict_1201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCPoint[n];
     } else {
       p = new((void*) gvp) FairMCPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCPoint;
     } else {
       p = new((void*) gvp) FairMCPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (UInt_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) FairMCPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (UInt_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMCPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) FairMCPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FairMCPoint*) G__getstructoffset())->GetEventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairMCPoint*) G__getstructoffset())->GetTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetEnergyLoss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->Momentum(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairMCPoint*) G__getstructoffset())->GetDetectorID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairMCPoint*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairMCPoint*) G__getstructoffset())->Position(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetEventID((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetTrackID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetEnergyLoss((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetMomentum(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetDetectorID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->SetPosition(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMCPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMCPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMCPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMCPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMCPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1201_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMCPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1201_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairMCPoint* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairMCPoint(*(FairMCPoint*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMCPoint G__TFairMCPoint;
static int G__G__BaseDict_1201_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMCPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMCPoint*) (soff+(sizeof(FairMCPoint)*i)))->~G__TFairMCPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMCPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMCPoint*) (soff))->~G__TFairMCPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1201_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMCPoint* dest = (FairMCPoint*) G__getstructoffset();
   *dest = *(FairMCPoint*) libp->para[0].ref;
   const FairMCPoint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRadLenPoint */
static int G__G__BaseDict_1225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadLenPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadLenPoint[n];
     } else {
       p = new((void*) gvp) FairRadLenPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadLenPoint;
     } else {
       p = new((void*) gvp) FairRadLenPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadLenPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 13
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRadLenPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), *((TVector3*) G__int(libp->para[7]))
, *((TVector3*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]));
   } else {
     p = new((void*) gvp) FairRadLenPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), *((TVector3*) G__int(libp->para[7]))
, *((TVector3*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadLenPoint*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadLenPoint*) G__getstructoffset())->GetZm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadLenPoint*) G__getstructoffset())->GetRadLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadLenPoint*) G__getstructoffset())->GetDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenPoint*) G__getstructoffset())->SetA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenPoint*) G__getstructoffset())->SetZm((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenPoint*) G__getstructoffset())->SetRadLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenPoint*) G__getstructoffset())->SetDensity((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetXOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetYOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetZOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetPxOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetPyOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadLenPoint*) G__getstructoffset())->GetPzOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const FairRadLenPoint*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const FairRadLenPoint*) G__getstructoffset())->GetPositionOut();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairRadLenPoint*) G__getstructoffset())->PositionOut(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairRadLenPoint*) G__getstructoffset())->MomentumOut(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadLenPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRadLenPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRadLenPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadLenPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadLenPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadLenPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1225_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadLenPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1225_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairRadLenPoint* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairRadLenPoint(*(FairRadLenPoint*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRadLenPoint G__TFairRadLenPoint;
static int G__G__BaseDict_1225_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRadLenPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRadLenPoint*) (soff+(sizeof(FairRadLenPoint)*i)))->~G__TFairRadLenPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRadLenPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRadLenPoint*) (soff))->~G__TFairRadLenPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1225_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadLenPoint* dest = (FairRadLenPoint*) G__getstructoffset();
   *dest = *(FairRadLenPoint*) libp->para[0].ref;
   const FairRadLenPoint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRadMapPoint */
static int G__G__BaseDict_1226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadMapPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadMapPoint[n];
     } else {
       p = new((void*) gvp) FairRadMapPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairRadMapPoint;
     } else {
       p = new((void*) gvp) FairRadMapPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadMapPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 17
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRadMapPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), *((TVector3*) G__int(libp->para[7]))
, *((TVector3*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Int_t) G__int(libp->para[16]));
   } else {
     p = new((void*) gvp) FairRadMapPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), *((TVector3*) G__int(libp->para[7]))
, *((TVector3*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Int_t) G__int(libp->para[16]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadMapPoint*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadMapPoint*) G__getstructoffset())->GetZm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadMapPoint*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((FairRadMapPoint*) G__getstructoffset())->GetDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapPoint*) G__getstructoffset())->SetA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapPoint*) G__getstructoffset())->SetZm((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapPoint*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapPoint*) G__getstructoffset())->SetDensity((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairRadMapPoint*) G__getstructoffset())->GetPdg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetXOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetYOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetZOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetPxOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetPyOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetPzOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetDose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairRadMapPoint*) G__getstructoffset())->GetDoseSL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const FairRadMapPoint*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const FairRadMapPoint*) G__getstructoffset())->GetPositionOut();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairRadMapPoint*) G__getstructoffset())->PositionOut(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairRadMapPoint*) G__getstructoffset())->MomentumOut(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRadMapPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRadMapPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRadMapPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRadMapPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadMapPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRadMapPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1226_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRadMapPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__BaseDict_1226_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FairRadMapPoint* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FairRadMapPoint(*(FairRadMapPoint*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRadMapPoint G__TFairRadMapPoint;
static int G__G__BaseDict_1226_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRadMapPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRadMapPoint*) (soff+(sizeof(FairRadMapPoint)*i)))->~G__TFairRadMapPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRadMapPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRadMapPoint*) (soff))->~G__TFairRadMapPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1226_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRadMapPoint* dest = (FairRadMapPoint*) G__getstructoffset();
   *dest = *(FairRadMapPoint*) libp->para[0].ref;
   const FairRadMapPoint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTrackParam */
static int G__G__BaseDict_1227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTrackParam[n];
     } else {
       p = new((void*) gvp) FairTrackParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTrackParam;
     } else {
       p = new((void*) gvp) FairTrackParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(TMatrixFSym*) libp->para[6].ref);
   } else {
     p = new((void*) gvp) FairTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(TMatrixFSym*) libp->para[6].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairTrackParam(*(FairTrackParam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairTrackParam(*(FairTrackParam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetTx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetTy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetQp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrackParam*) G__getstructoffset())->Position(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrackParam*) G__getstructoffset())->Momentum(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrackParam*) G__getstructoffset())->CovMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const FairTrackParam*) G__getstructoffset())->CovMatrix(*(TMatrixFSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const FairTrackParam*) G__getstructoffset())->GetCovariance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetTx((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetTy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetQp((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetPosition(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetCovMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetCovMatrix(*(TMatrixFSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->SetCovariance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const FairTrackParam& obj = ((FairTrackParam*) G__getstructoffset())->operator=(*(FairTrackParam*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTrackParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrackParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTrackParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTrackParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTrackParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrackParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTrackParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTrackParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1227_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTrackParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTrackParam G__TFairTrackParam;
static int G__G__BaseDict_1227_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTrackParam*) (soff+(sizeof(FairTrackParam)*i)))->~G__TFairTrackParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTrackParam*) (soff))->~G__TFairTrackParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairFieldFactory */
static int G__G__BaseDict_1230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairFieldFactory::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairFieldFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFieldFactory[n];
     } else {
       p = new((void*) gvp) FairFieldFactory[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairFieldFactory;
     } else {
       p = new((void*) gvp) FairFieldFactory;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairFieldFactory*) G__getstructoffset())->createFairField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFieldFactory*) G__getstructoffset())->SetParm();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairFieldFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFieldFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairFieldFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairFieldFactory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairFieldFactory*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFieldFactory*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFieldFactory*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairFieldFactory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFieldFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFieldFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairFieldFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairFieldFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairFieldFactory G__TFairFieldFactory;
static int G__G__BaseDict_1230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairFieldFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairFieldFactory*) (soff+(sizeof(FairFieldFactory)*i)))->~G__TFairFieldFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairFieldFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairFieldFactory*) (soff))->~G__TFairFieldFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRKPropagator */
static int G__G__BaseDict_1231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRKPropagator*) G__getstructoffset())->Step((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRKPropagator*) G__getstructoffset())->OneStepRungeKutta((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRKPropagator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRKPropagator((FairField*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairRKPropagator((FairField*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRKPropagator*) G__getstructoffset())->Propagat((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRKPropagator*) G__getstructoffset())->PropagatToPlane((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRKPropagator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRKPropagator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRKPropagator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRKPropagator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRKPropagator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRKPropagator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRKPropagator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRKPropagator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRKPropagator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRKPropagator G__TFairRKPropagator;
static int G__G__BaseDict_1231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRKPropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRKPropagator*) (soff+(sizeof(FairRKPropagator)*i)))->~G__TFairRKPropagator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRKPropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRKPropagator*) (soff))->~G__TFairRKPropagator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairUnpack */
static int G__G__BaseDict_1242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairUnpack*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FairUnpack*) G__getstructoffset())->DoUnpack((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairUnpack*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const FairUnpack*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const FairUnpack*) G__getstructoffset())->GetSubType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const FairUnpack*) G__getstructoffset())->GetProcId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const FairUnpack*) G__getstructoffset())->GetSubCrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const FairUnpack*) G__getstructoffset())->GetControl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairUnpack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairUnpack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairUnpack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairUnpack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairUnpack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairUnpack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairUnpack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairUnpack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1242_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairUnpack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairUnpack G__TFairUnpack;
static int G__G__BaseDict_1242_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairUnpack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairUnpack*) (soff+(sizeof(FairUnpack)*i)))->~G__TFairUnpack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairUnpack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairUnpack*) (soff))->~G__TFairUnpack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1242_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairUnpack* dest = (FairUnpack*) G__getstructoffset();
   *dest = *(FairUnpack*) libp->para[0].ref;
   const FairUnpack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMbsSource */
static int G__G__BaseDict_1243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMbsSource*) G__getstructoffset())->AddUnpacker((FairUnpack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairMbsSource*) G__getstructoffset())->GetUnpackers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMbsSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMbsSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMbsSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMbsSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMbsSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMbsSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMbsSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMbsSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMbsSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMbsSource G__TFairMbsSource;
static int G__G__BaseDict_1243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMbsSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMbsSource*) (soff+(sizeof(FairMbsSource)*i)))->~G__TFairMbsSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMbsSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMbsSource*) (soff))->~G__TFairMbsSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMbsSource* dest = (FairMbsSource*) G__getstructoffset();
   *dest = *(FairMbsSource*) libp->para[0].ref;
   const FairMbsSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairLmdSource */
static int G__G__BaseDict_1244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLmdSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLmdSource[n];
     } else {
       p = new((void*) gvp) FairLmdSource[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairLmdSource;
     } else {
       p = new((void*) gvp) FairLmdSource;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLmdSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairLmdSource(*(FairLmdSource*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairLmdSource(*(FairLmdSource*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLmdSource*) G__getstructoffset())->AddFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FairLmdSource*) G__getstructoffset())->GetCurrentFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FairLmdSource*) G__getstructoffset())->GetFileNames());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairLmdSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLmdSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairLmdSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairLmdSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairLmdSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLmdSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLmdSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairLmdSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1244_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairLmdSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairLmdSource G__TFairLmdSource;
static int G__G__BaseDict_1244_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairLmdSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairLmdSource*) (soff+(sizeof(FairLmdSource)*i)))->~G__TFairLmdSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairLmdSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairLmdSource*) (soff))->~G__TFairLmdSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1244_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairLmdSource* dest = (FairLmdSource*) G__getstructoffset();
   *dest = *(FairLmdSource*) libp->para[0].ref;
   const FairLmdSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRevBuffer */
static int G__G__BaseDict_1245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRevBuffer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MRevBuffer((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MRevBuffer((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MRevBuffer*) G__getstructoffset())->RevOpen((char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((MRevBuffer*) G__getstructoffset())->RevGetI((TSocket*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MRevBuffer*) G__getstructoffset())->RevGet((TSocket*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRevBuffer*) G__getstructoffset())->RevStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRevBuffer*) G__getstructoffset())->RevBufWait((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRevBuffer*) G__getstructoffset())->RevBufsize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRevBuffer*) G__getstructoffset())->RevClose((TSocket*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRevBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRevBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRevBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRevBuffer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRevBuffer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRevBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRevBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRevBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1245_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRevBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRevBuffer G__TMRevBuffer;
static int G__G__BaseDict_1245_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRevBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRevBuffer*) (soff+(sizeof(MRevBuffer)*i)))->~G__TMRevBuffer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRevBuffer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRevBuffer*) (soff))->~G__TMRevBuffer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* REvent */
static int G__G__BaseDict_1246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   REvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new REvent[n];
     } else {
       p = new((void*) gvp) REvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new REvent;
     } else {
       p = new((void*) gvp) REvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_REvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((REvent*) G__getstructoffset())->ReFillHead((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((REvent*) G__getstructoffset())->ReFillData((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((REvent*) G__getstructoffset())->ReGetNumb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((REvent*) G__getstructoffset())->ReGetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((REvent*) G__getstructoffset())->ReGetData((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((REvent*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) REvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) REvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) REvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      REvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((REvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) REvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) REvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) REvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1246_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) REvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef REvent G__TREvent;
static int G__G__BaseDict_1246_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (REvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((REvent*) (soff+(sizeof(REvent)*i)))->~G__TREvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (REvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((REvent*) (soff))->~G__TREvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairRemoteSource */
static int G__G__BaseDict_1247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRemoteSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRemoteSource((char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FairRemoteSource((char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRemoteSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FairRemoteSource(*(FairRemoteSource*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) FairRemoteSource(*(FairRemoteSource*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const FairRemoteSource*) G__getstructoffset())->GetNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairRemoteSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRemoteSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairRemoteSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairRemoteSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairRemoteSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRemoteSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRemoteSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairRemoteSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__BaseDict_1247_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairRemoteSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairRemoteSource G__TFairRemoteSource;
static int G__G__BaseDict_1247_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairRemoteSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairRemoteSource*) (soff+(sizeof(FairRemoteSource)*i)))->~G__TFairRemoteSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairRemoteSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairRemoteSource*) (soff))->~G__TFairRemoteSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__BaseDict_1247_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairRemoteSource* dest = (FairRemoteSource*) G__getstructoffset();
   *dest = *(FairRemoteSource*) libp->para[0].ref;
   const FairRemoteSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FairRunAnaProof */

/* FairAnaSelector */

/* FairMesh */

/* FairRadGridManager */

/* FairRadLenManager */

/* FairRadMapManager */

/* FairTimeStamp */

/* FairRingSorter */

/* FairEventHeader */

/* FairFileHeader */

/* FairLink */

/* FairMCEventHeader */

/* FairTSBufferFunctional */

/* FairWriteoutBuffer */

/* FairRootManager */

/* FairTask */

/* FairRingSorterTask */

/* FairField */

/* FairRun */

/* FairRunInfo */

/* FairRunAna */

/* FairIon */

/* FairDetector */

/* FairGenericStack */

/* FairPrimaryGenerator */

/* FairTrajFilter */

/* FairVolume */

/* FairMCApplication */

/* FairParticle */

/* FairModule */

/* FairRunSim */

/* FairMultiLinkedData */

/* FairMultiLinkedData_Interface */

/* FairSource */

/* FairRunOnline */

/* FairLinkManager */

/* FairBaseContFact */

/* FairBaseParSet */

/* FairGeoParSet */

/* FairVolumeList */

/* FairGeaneApplication */

/* FairGenerator */

/* FairRunIdGenerator */

/* FairRecoEventHeader */

/* FairEventBuilder */

/* FairEventBuilderManager */

/* FairFileInfo */

/* FairHit */

/* FairMCPoint */

/* FairRadLenPoint */

/* FairRadMapPoint */

/* FairTrackParam */

/* FairFieldFactory */

/* FairRKPropagator */

/* FairUnpack */

/* FairMbsSource */

/* FairLmdSource */

/* MRevBuffer */

/* REvent */

/* FairRemoteSource */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__BaseDict {
 public:
  G__Sizep2memfuncG__BaseDict(): p(&G__Sizep2memfuncG__BaseDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__BaseDict::*p)();
};

size_t G__get_sizep2memfuncG__BaseDict()
{
  G__Sizep2memfuncG__BaseDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__BaseDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof))) {
     FairRunAnaProof *G__Lderived;
     G__Lderived=(FairRunAnaProof*)0x1000;
     {
       FairRunAna *G__Lpbase=(FairRunAna*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairRun *G__Lpbase=(FairRun*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector))) {
     FairAnaSelector *G__Lderived;
     G__Lderived=(FairAnaSelector*)0x1000;
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector),G__get_linked_tagnum(&G__G__BaseDictLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh))) {
     FairMesh *G__Lderived;
     G__Lderived=(FairMesh*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp))) {
     FairTimeStamp *G__Lderived;
     G__Lderived=(FairTimeStamp*)0x1000;
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp),G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter))) {
     FairRingSorter *G__Lderived;
     G__Lderived=(FairRingSorter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader))) {
     FairEventHeader *G__Lderived;
     G__Lderived=(FairEventHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader))) {
     FairFileHeader *G__Lderived;
     G__Lderived=(FairFileHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairLink))) {
     FairLink *G__Lderived;
     G__Lderived=(FairLink*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLink),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader))) {
     FairMCEventHeader *G__Lderived;
     G__Lderived=(FairMCEventHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional))) {
     FairTSBufferFunctional *G__Lderived;
     G__Lderived=(FairTSBufferFunctional*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer))) {
     FairWriteoutBuffer *G__Lderived;
     G__Lderived=(FairWriteoutBuffer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager))) {
     FairRootManager *G__Lderived;
     G__Lderived=(FairRootManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask))) {
     FairTask *G__Lderived;
     G__Lderived=(FairTask*)0x1000;
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),G__get_linked_tagnum(&G__G__BaseDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask))) {
     FairRingSorterTask *G__Lderived;
     G__Lderived=(FairRingSorterTask*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask),G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask),G__get_linked_tagnum(&G__G__BaseDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairField))) {
     FairField *G__Lderived;
     G__Lderived=(FairField*)0x1000;
     {
       TVirtualMagField *G__Lpbase=(TVirtualMagField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairField),G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMagField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairField),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairField),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRun))) {
     FairRun *G__Lderived;
     G__Lderived=(FairRun*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo))) {
     FairRunInfo *G__Lderived;
     G__Lderived=(FairRunInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna))) {
     FairRunAna *G__Lderived;
     G__Lderived=(FairRunAna*)0x1000;
     {
       FairRun *G__Lpbase=(FairRun*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna),G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairIon))) {
     FairIon *G__Lderived;
     G__Lderived=(FairIon*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairIon),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairIon),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector))) {
     FairDetector *G__Lderived;
     G__Lderived=(FairDetector*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector),G__get_linked_tagnum(&G__G__BaseDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack))) {
     FairGenericStack *G__Lderived;
     G__Lderived=(FairGenericStack*)0x1000;
     {
       TVirtualMCStack *G__Lpbase=(TVirtualMCStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack),G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMCStack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator))) {
     FairPrimaryGenerator *G__Lderived;
     G__Lderived=(FairPrimaryGenerator*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume))) {
     FairVolume *G__Lderived;
     G__Lderived=(FairVolume*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication))) {
     FairMCApplication *G__Lderived;
     G__Lderived=(FairMCApplication*)0x1000;
     {
       TVirtualMCApplication *G__Lpbase=(TVirtualMCApplication*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMCApplication),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle))) {
     FairParticle *G__Lderived;
     G__Lderived=(FairParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairModule))) {
     FairModule *G__Lderived;
     G__Lderived=(FairModule*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairModule),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairModule),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim))) {
     FairRunSim *G__Lderived;
     G__Lderived=(FairRunSim*)0x1000;
     {
       FairRun *G__Lpbase=(FairRun*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim),G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData))) {
     FairMultiLinkedData *G__Lderived;
     G__Lderived=(FairMultiLinkedData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface))) {
     FairMultiLinkedData_Interface *G__Lderived;
     G__Lderived=(FairMultiLinkedData_Interface*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairSource))) {
     FairSource *G__Lderived;
     G__Lderived=(FairSource*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairSource),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline))) {
     FairRunOnline *G__Lderived;
     G__Lderived=(FairRunOnline*)0x1000;
     {
       FairRun *G__Lpbase=(FairRun*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline),G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager))) {
     FairLinkManager *G__Lderived;
     G__Lderived=(FairLinkManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact))) {
     FairBaseContFact *G__Lderived;
     G__Lderived=(FairBaseContFact*)0x1000;
     {
       FairContFact *G__Lpbase=(FairContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact),G__get_linked_tagnum(&G__G__BaseDictLN_FairContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet))) {
     FairBaseParSet *G__Lderived;
     G__Lderived=(FairBaseParSet*)0x1000;
     {
       FairParGenericSet *G__Lpbase=(FairParGenericSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairParGenericSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairParSet *G__Lpbase=(FairParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet))) {
     FairGeoParSet *G__Lderived;
     G__Lderived=(FairGeoParSet*)0x1000;
     {
       FairParGenericSet *G__Lpbase=(FairParGenericSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairParGenericSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairParSet *G__Lpbase=(FairParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet),G__get_linked_tagnum(&G__G__BaseDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList))) {
     FairVolumeList *G__Lderived;
     G__Lderived=(FairVolumeList*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication))) {
     FairGeaneApplication *G__Lderived;
     G__Lderived=(FairGeaneApplication*)0x1000;
     {
       TVirtualMCApplication *G__Lpbase=(TVirtualMCApplication*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMCApplication),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator))) {
     FairGenerator *G__Lderived;
     G__Lderived=(FairGenerator*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMCStack))) {
     TVirtualMCStack *G__Lderived;
     G__Lderived=(TVirtualMCStack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMCStack),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader))) {
     FairRecoEventHeader *G__Lderived;
     G__Lderived=(FairRecoEventHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilder))) {
     FairEventBuilder *G__Lderived;
     G__Lderived=(FairEventBuilder*)0x1000;
     {
       FairWriteoutBuffer *G__Lpbase=(FairWriteoutBuffer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilder),G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilder),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager))) {
     FairEventBuilderManager *G__Lderived;
     G__Lderived=(FairEventBuilderManager*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager),G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager),G__get_linked_tagnum(&G__G__BaseDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo))) {
     FairFileInfo *G__Lderived;
     G__Lderived=(FairFileInfo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit))) {
     FairHit *G__Lderived;
     G__Lderived=(FairHit*)0x1000;
     {
       FairTimeStamp *G__Lpbase=(FairTimeStamp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit),G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit),G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint))) {
     FairMCPoint *G__Lderived;
     G__Lderived=(FairMCPoint*)0x1000;
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint),G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint))) {
     FairRadLenPoint *G__Lderived;
     G__Lderived=(FairRadLenPoint*)0x1000;
     {
       FairMCPoint *G__Lpbase=(FairMCPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint),G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint),G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint))) {
     FairRadMapPoint *G__Lderived;
     G__Lderived=(FairRadMapPoint*)0x1000;
     {
       FairMCPoint *G__Lpbase=(FairMCPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint),G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint),G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam))) {
     FairTrackParam *G__Lderived;
     G__Lderived=(FairTrackParam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMagField))) {
     TVirtualMagField *G__Lderived;
     G__Lderived=(TVirtualMagField*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMagField),G__get_linked_tagnum(&G__G__BaseDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_TVirtualMagField),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator))) {
     FairRKPropagator *G__Lderived;
     G__Lderived=(FairRKPropagator*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairUnpack))) {
     FairUnpack *G__Lderived;
     G__Lderived=(FairUnpack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairUnpack),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource))) {
     FairMbsSource *G__Lderived;
     G__Lderived=(FairMbsSource*)0x1000;
     {
       FairSource *G__Lpbase=(FairSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource),G__get_linked_tagnum(&G__G__BaseDictLN_FairSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource))) {
     FairLmdSource *G__Lderived;
     G__Lderived=(FairLmdSource*)0x1000;
     {
       FairMbsSource *G__Lpbase=(FairMbsSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource),G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairSource *G__Lpbase=(FairSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource),G__get_linked_tagnum(&G__G__BaseDictLN_FairSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer))) {
     MRevBuffer *G__Lderived;
     G__Lderived=(MRevBuffer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_REvent))) {
     REvent *G__Lderived;
     G__Lderived=(REvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_REvent),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource))) {
     FairRemoteSource *G__Lderived;
     G__Lderived=(FairRemoteSource*)0x1000;
     {
       FairMbsSource *G__Lpbase=(FairMbsSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource),G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairSource *G__Lpbase=(FairSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource),G__get_linked_tagnum(&G__G__BaseDictLN_FairSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource),G__get_linked_tagnum(&G__G__BaseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__BaseDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairTimeStamp*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,FairTimeStamp*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,FairTimeStamp*,less<double> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::multimap<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<multimap<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<TClonesArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<TClonesArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::queue<TClonesArray*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TBranch*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*,less<int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::list<TString>*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI>",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::multimap<TString,TArrayI> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,TChain*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,TChain*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,TChain*,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,Double_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,UInt_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Long_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,MD5Mod_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TProof::MD5Mod_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TProof::MD5Mod_t,less<TString> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<Int_t,FairVolume*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<int,FairVolume*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<int,FairVolume*,less<int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink>",117,G__get_linked_tagnum(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink,less<FairLink> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,std::pair<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,pair<double,FairTimeStamp*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,pair<double,FairTimeStamp*>,less<double> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<Int_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ThreadData_t*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGeoVolumeAssembly::ThreadData_t*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*,less<long> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,Int_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,FairRecoEventHeader*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,FairRecoEventHeader*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,FairRecoEventHeader*> >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FairEventBuilder*>",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::pair<double,FairRecoEventHeader*> > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<pair<double,FairRecoEventHeader*> > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__BaseDictLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > > >",117,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Float_t>",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSymlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixFSym",117,G__get_linked_tagnum(&G__G__BaseDictLN_TMatrixTSymlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FairRunAnaProof */
static void G__setup_memvarFairRunAnaProof(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof));
   { FairRunAnaProof *p; p=(FairRunAnaProof*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),-1,-2,2,"fRAPInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TProof),-1,-1,2,"fProof=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRunOnProofWorker=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fProofServerName=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fProofParName=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fOutputDirectory=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fProofOutputStatus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairAnaSelector */
static void G__setup_memvarFairAnaSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector));
   { FairAnaSelector *p; p=(FairAnaSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fProofFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TProofOutputFile),-1,-1,1,"fProofFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,1,"fFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fChain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TTree),-1,-1,1,"fChain=",0,"!pointer to the analyzed TTree or TChain");
   G__memvar_setup((void*)((long)(&p->fRunAna)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof),-1,-1,1,"fRunAna=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMesh */
static void G__setup_memvarFairMesh(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh));
   { FairMesh *p; p=(FairMesh*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NXbin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NYbin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NZbin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBinVolume=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDiag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TH2D),-1,-1,2,"fMeshTid=",0,"!mesh");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TH2D),-1,-1,2,"fMeshFlu=",0,"!mesh");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TH2D),-1,-1,2,"fMeshSEU=",0,"!mesh");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fhname=",0,"!mesh");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRadGridManager */
static void G__setup_memvarFairRadGridManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager));
   { FairRadGridManager *p; p=(FairRadGridManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fPointCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackID=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeID=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosOut=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomOut=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLength=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fELoss=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZmat=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDensity=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRadl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEstimator=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,4,"fMeshList=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fLtmp=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRadLenManager */
static void G__setup_memvarFairRadLenManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager));
   { FairRadLenManager *p; p=(FairRadLenManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fPointCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackID=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeID=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosOut=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomOut=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLength=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fELoss=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZmat=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDensity=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRadl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsl=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRadMapManager */
static void G__setup_memvarFairRadMapManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager));
   { FairRadMapManager *p; p=(FairRadMapManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fPointCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackID=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeID=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPdg=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fPosOut=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomIn=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fMomOut=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLength=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fELoss=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDose=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDoseSL=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZmat=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRadl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDensity=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fActVol=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fActMass=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TMap),-1,-1,4,"fMassMap=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTimeStamp */
static void G__setup_memvarFairTimeStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   { FairTimeStamp *p; p=(FairTimeStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTimeStamp=",0,"* Time of digit or Hit  [ns] */");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTimeStampError=",0,"* Error on time stamp */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLink),-1,-1,2,"fEntryNr=",0,"!  indicates where the data is stored in the branch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRingSorter */
static void G__setup_memvarFairRingSorter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter));
   { FairRingSorter *p; p=(FairRingSorter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::multimap<double,FairTimeStamp*> >"),-1,4,"fRingBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR),G__defined_typename("vector<FairTimeStamp*>"),-1,4,"fOutputData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_pairlEintcOdoublegR),-1,-1,4,"fLowerBoundPointer=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fCellWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairEventHeader */
static void G__setup_memvarFairEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader));
   { FairEventHeader *p; p=(FairEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRunId=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fInputFileId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMCEntryNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairFileHeader */
static void G__setup_memvarFairFileHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader));
   { FairFileHeader *p; p=(FairFileHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRunId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TList),-1,-1,2,"fTaskList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TList),-1,-1,2,"fFileList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairLink */
static void G__setup_memvarFairLink(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   { FairLink *p; p=(FairLink*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWeight=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMCEventHeader */
static void G__setup_memvarFairMCEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   { FairMCEventHeader *p; p=(FairMCEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRunId=",0,"/  Run identifier");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fEventId=",0,"/  Event identifier");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fX=",0,"/  Primary vertex x [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fY=",0,"/  Primary vertex y [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"/  Primary vertex z [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT=",0,"/  Event time [s]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fB=",0,"/  Impact parameter [fm] (if relevant)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPrim=",0,"/  Number of input tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsSet=",0,"/  Flag whether variables are filled");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRotX=",0,"/  Rotation around x-axis (beam tilt) [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRotY=",0,"/  Rotation around y-axis (beam tilt) [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRotZ=",0,"/  Rotation around z-axis (event plane) [rad]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTSBufferFunctional */
static void G__setup_memvarFairTSBufferFunctional(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional));
   { FairTSBufferFunctional *p; p=(FairTSBufferFunctional*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fOutputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fBufferArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fInputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_BinaryFunctor),-1,-1,4,"fStartFunction=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_BinaryFunctor),-1,-1,4,"fStopFunction=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TBranch),-1,-1,4,"fBranch=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBranchIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStartIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairWriteoutBuffer */
static void G__setup_memvarFairWriteoutBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer));
   { FairWriteoutBuffer *p; p=(FairWriteoutBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR),G__defined_typename("multimap<double,std::pair<double,FairTimeStamp*> >"),-1,2,"fStartTime_map=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR),G__defined_typename("multimap<double,FairTimeStamp*>"),-1,2,"fDeadTime_map=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fBranchName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fClassName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTreeSave=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fActivateBuffering=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"! /// FairLogger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRootManager */
static void G__setup_memvarFairRootManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager));
   { FairRootManager *p; p=(FairRootManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOldEntryNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFolder),-1,-1,4,"fCbmout=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFolder),-1,-1,4,"fCbmroot=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrentTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,4,"fInFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TChain),-1,-1,4,"fInChain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TTree),-1,-1,4,"fInTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,4,"fOutFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TTree),-1,-1,4,"fOutTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,4,"fListFolder=",0,"!");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObject),-1,-1,4,"fObj2=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNObj=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),G__defined_typename("map<TString,TObject*>"),-1,4,"fMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TTree),-1,-1,4,"fPtrTree=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentEntries=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBranchSeqId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TList),-1,-1,4,"fBranchNameList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("map<TString,std::queue<TClonesArray*> >"),-1,4,"fDataContainer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),G__defined_typename("map<TString,TClonesArray*>"),-1,4,"fActiveContainer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),G__defined_typename("map<TString,FairTSBufferFunctional*>"),-1,4,"fTSBufferMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),G__defined_typename("map<TString,FairWriteoutBuffer*>"),-1,4,"fWriteoutBufferMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),G__defined_typename("map<Int_t,TBranch*>"),-1,4,"fInputBranchMap=",0,"!    //Map of input branch ID with TBranch pointer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCompressData=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTimeStamps=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBranchPerMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),G__defined_typename("map<TString,Int_t>"),-1,4,"fBrPerMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgRcLcLiterator),-1,-1,4,"fBrPerMapIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR),G__defined_typename("list<TString>"),-1,4,"fFriendFileList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fInputFileName=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR),G__defined_typename("list<TString>"),-1,4,"fInputChainList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),G__defined_typename("map<TString,TChain*>"),-1,4,"fFriendTypeList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),G__defined_typename("map<TString,std::list<TString>*>"),-1,4,"fCheckInputBranches=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR),G__defined_typename("list<TString>"),-1,4,"fInputLevel=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("map<TString,std::multimap<TString,TArrayI> >"),-1,4,"fRunIdInfoAll=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,4,"fLogger=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMixedInput=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fActualSignalIdentifier=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNoOfSignals=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR),G__defined_typename("list<TString>"),-1,4,"fSignalChainList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TChain),-1,-1,4,"fBackgroundChain=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,4,"fBackgroundFile=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR),G__defined_typename("map<UInt_t,TChain*>"),-1,4,"fSignalTypeList=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventTimeMin=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventTimeMax=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventMeanTime=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TF1),-1,-1,4,"fTimeProb=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),-1,-1,4,"fMCHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),-1,-1,4,"fEvtHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader),-1,-1,4,"fFileHeader=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),G__defined_typename("map<UInt_t,Double_t>"),-1,4,"fSignalBGN=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEventTimeInMCHeader=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSBRatiobyN=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSBRatiobyT=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCurrentEntryNo=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeforEntryNo=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNoOfBGEntries=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<UInt_t,UInt_t>"),-1,4,"fCurrentEntry=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEvtHeaderIsNew=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFillLastData=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEntryNr=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseFairLinks=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInitFairLinksOnce=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fFairLinksBranchName=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTask */
static void G__setup_memvarFairTask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask));
   { FairTask *p; p=(FairTask*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerbose=",0,"Verbosity level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fInputPersistance=",0,"/< Indicates if input branch is persistant");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRingSorterTask */
static void G__setup_memvarFairRingSorterTask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask));
   { FairRingSorterTask *p; p=(FairRingSorterTask*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter),-1,-1,2,"fSorter=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPersistance=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDigiPixelMCInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumberOfCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWidthOfCells=",0,"in ns");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fInputBranch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,2,"fInputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fOutputBranch=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fFolder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,2,"fOutputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEntryNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairField */
static void G__setup_memvarFairField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairField));
   { FairField *p; p=(FairField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRun */
static void G__setup_memvarFairRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRun));
   { FairRun *p; p=(FairRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTasks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRun),-1,-2,2,"fRunInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRuntimeDb),-1,-1,2,"fRtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),-1,-1,2,"fTask=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"fOutname=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager),-1,-1,2,"fRootManager=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,2,"fOutFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRunId=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAna=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),-1,-1,2,"fEvHead=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader),-1,-1,2,"fFileHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fGenerateRunInfo=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRunInfo */
static void G__setup_memvarFairRunInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo));
   { FairRunInfo *p; p=(FairRunInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TTimeStamp),-1,-1,4,"fTimeStamp=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_CpuInfo_t),-1,-1,4,"fCpuInfo=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_MemInfo_t),-1,-1,4,"fMemInfo=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_ProcInfo_t),-1,-1,4,"fProcInfo=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTimeDiff=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<Long_t>"),-1,4,"fResidentMemory=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<Long_t>"),-1,4,"fVirtualMemory=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,4,"fLogger=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRunAna */
static void G__setup_memvarFairRunAna(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna));
   { FairRunAna *p; p=(FairRunAna*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo),-1,-1,4,"fRunInfo=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsInitialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFile),-1,-1,2,"fInputGeoFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna),-1,-2,2,"fgRinstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fLoadGeo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),-1,-1,2,"fEvtHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),-1,-1,2,"fMCHeader=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStatic=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,2,"fField=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTimeStamps=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fInFileIsOpen=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fMixedInput=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTimeMin=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTimeMax=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventMeanTime=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TF1),-1,-1,2,"fTimeProb=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFinishProcessingLMDFile=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairIon */
static void G__setup_memvarFairIon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairIon));
   { FairIon *p; p=(FairIon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgNIon=",0,"! /// Number of ions instantiated. One per generator.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fZ=",0,"/ Atomic number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fA=",0,"/ Atomic mass");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQ=",0,"/ Electric charge");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fExcEnergy=",0,"/ Excitation energy [GeV]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMass=",0,"/ Mass [GeV]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,4,"fLogger=",0,"! /// FairLogger");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"amu=",0,"/  .931494028 Gev/c**2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairDetector */
static void G__setup_memvarFairDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector));
   { FairDetector *p; p=(FairDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDetId=",0,"Detector Id has to be set from ctr.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"! /// FairLogger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGenericStack */
static void G__setup_memvarFairGenericStack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack));
   { FairGenericStack *p; p=(FairGenericStack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,2,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,2,"fDetList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TIterator),-1,-1,2,"fDetIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairPrimaryGenerator */
static void G__setup_memvarFairPrimaryGenerator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator));
   { FairPrimaryGenerator *p; p=(FairPrimaryGenerator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamX0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamY0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamSigmaX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamSigmaY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleX0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleY0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleSigmaX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamAngleSigmaY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TVector3),-1,-1,2,"fBeamDirection=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetZ=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNrTargets=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetDz=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TVector3),-1,-1,2,"fVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSmearVertexZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSmearGausVertexZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSmearVertexXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSmearGausVertexXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBeamAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fEventPlane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack),-1,-1,2,"fStack=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fGenList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TIterator),-1,-1,2,"fListIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),-1,-1,2,"fEvent=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fdoTracking=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMCIndexOffset=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fTotPrim=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTrajFilter */
static void G__setup_memvarFairTrajFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter));
   { FairTrajFilter *p; p=(FairTrajFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVxMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVxMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVyMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVzMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVzMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fThetaMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fThetaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPhiMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPhiMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPxMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPxMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPyMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPzMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPzMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPtMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRapidityMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRapidityMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fKinCutType=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEtotMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEtotMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStorePrim=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fStepSizeMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray),-1,-1,4,"fTrackCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TGeoTrack),-1,-1,4,"fCurrentTrk=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairVolume */
static void G__setup_memvarFairVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume));
   { FairVolume *p; p=(FairVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fRealName=",0,"*Volume Name in ASCII file*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeId=",0,"*Volume Id in GeoManager*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fModId=",0,"*Module Id in which this volume exist*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMCid=",0,"*Volume Id in MC*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCopyNo=",0,"*Volume Copy No*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMotherId=",0,"*Mother Volume Id*/");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMotherCopyNo=",0,"*Mother Volume Copy No*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairModule),-1,-1,4,"fModule=",0,"*The Module (detector) which will proccess the hits for this volume*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoNode),-1,-1,4,"fNode=",0,"*Node corresponding to this volume*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMCApplication */
static void G__setup_memvarFairMCApplication(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication));
   { FairMCApplication *p; p=(FairMCApplication*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TIterator),-1,-1,4,"fActDetIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,4,"fActiveDetectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairTask),-1,-1,4,"fFairTaskList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TIterator),-1,-1,4,"fDetIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,4,"fDetectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,4,"fDetMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,4,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TIterator),-1,-1,4,"fModIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,4,"fModules=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNoSenVolumes=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPythiaDecayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fPythiaDecayerConfig=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack),-1,-1,4,"fStack=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager),-1,-1,4,"fRootManager=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,4,"fSenVolumes=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,4,"fxField=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator),-1,-1,4,"fEvGen=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMcVersion=",0,"mc Version");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter),-1,-1,4,"fTrajFilter=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTrajAccepted=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUserDecay=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fUserDecayConfig=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDebug=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume),-1,-1,4,"fDisVol=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector),-1,-1,4,"fDisDet=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR),G__defined_typename("multimap<Int_t,FairVolume*>"),-1,4,"fVolMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgRcLcLiterator),-1,-1,4,"fVolIter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,4,"fModVolMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator),-1,-1,4,"fModVolIter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fTrkPos=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRadLength=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager),-1,-1,4,"fRadLenMan=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRadMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager),-1,-1,4,"fRadMapMan=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager),-1,-1,4,"fRadGridMan=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),-1,-1,4,"fEventHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),-1,-1,4,"fMCEventHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo),-1,-1,4,"fRunInfo=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGeometryIsInitialized=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairParticle */
static void G__setup_memvarFairParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   { FairParticle *p; p=(FairParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpdg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TParticle),-1,-1,4,"fParticle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRef),-1,-1,4,"fMother=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-1,4,"fDaughters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TMCParticleType),-1,-1,4,"fmcType=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fmass=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fcharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDecayTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fpType=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fwidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fiSpin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fiParity=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fiConjugation=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fiIsospin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fiIsospinZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fgParity=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"flepton=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fbaryon=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fstable=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairModule */
static void G__setup_memvarFairModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairModule));
   { FairModule *p; p=(FairModule*)0x1000; if (p) { }
   G__memvar_setup((void*)(&FairModule::vList),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList),-1,-2,1,"vList=",0,"!");
   G__memvar_setup((void*)(&FairModule::fNbOfVolumes),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"fNbOfVolumes=",0,"!");
   G__memvar_setup((void*)(&FairModule::svList),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRefArray),-1,-2,1,"svList=",0,"!");
   G__memvar_setup((void*)(&FairModule::volNumber),85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TArrayI),-1,-2,1,"volNumber=",0,"!");
   G__memvar_setup((void*)((long)(&p->fMotherVolumeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,1,"fMotherVolumeName=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fgeoVer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fgeoName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fModId=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNbOfSensitiveVol=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerboseLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TList),-1,-1,2,"flGeoPar=",0,"!  list of Detector Geometry parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kGeoSaved=",0,"! flag for initialisation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRunSim */
static void G__setup_memvarFairRunSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim));
   { FairRunSim *p; p=(FairRunSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"count=",0,"!                               /** Internal counter*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication),-1,-1,2,"fApp=",0,"!                              /** Main VMC application */");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamMom=",0,"!                           /** Beam Energy in GeV/c  */");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseBeamMom=",0,"!                        /** flag for use Beam Energy  */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator),-1,-1,2,"fGen=",0,"!                               /** Primary Event Generator */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader),-1,-1,2,"fMCEvHead=",0,"!                          /** MC Event Header */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim),-1,-2,2,"fginstance=",0,"!                          /** Singelton Instance */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,2,"fField=",0,"* Magnetic Field */");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"fMapName=",0,"!                           /** Input file name map*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fIons=",0,"!                              /** Array of user defined ions */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fParticles=",0,"!                         /** Array of user defined particles*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"ListOfModules=",0,"!                       /** Array of used modules */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"MatFname=",0,"!                           /** Material file name */");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStoreTraj=",0,"!                       /** Trajectory store flags */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fLoaderName=",0,"!                       /** Geometry Model (TGeo or G3)*/");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPythiaDecayer=",0,"!                    /** flag for using Pythia decayer*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fPythiaDecayerConfig=",0,"!               /** Macro for Pythia decay configuration*/");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUserDecay=",0,"* flag for setting user decay */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fUserDecayConfig=",0,"!                   /** Macro for decay configuration*/");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRadLength=",0,"!                       /** flag for registring radiation length*/");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRadMap=",0,"!                            /** flag for RadiationMapManager");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRadGrid=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fMeshList=",0,"!                          /** radiation grid scoring");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fUserConfig=",0,"!                        /** Macro for geant configuration*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fUserCuts=",0,"!                          /** Macro for geant cuts*/");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMultiLinkedData */
static void G__setup_memvarFairMultiLinkedData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   { FairMultiLinkedData *p; p=(FairMultiLinkedData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),G__defined_typename("set<FairLink>"),-1,2,"fLinks=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPersistanceCheck=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDefaultType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMultiLinkedData_Interface */
static void G__setup_memvarFairMultiLinkedData_Interface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   { FairMultiLinkedData_Interface *p; p=(FairMultiLinkedData_Interface*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVerbose=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TRef),-1,-1,2,"fRefToLinks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fLinkBranchName=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairSource */
static void G__setup_memvarFairSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairSource));
   { FairSource *p; p=(FairSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRunOnline */
static void G__setup_memvarFairRunOnline(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline));
   { FairRunOnline *p; p=(FairRunOnline*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAutomaticFinish=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsInitialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline),-1,-2,2,"fgRinstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader),-1,-1,2,"fEvtHeader=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStatic=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,2,"fField=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairSource),-1,-1,2,"fSource=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TFolder),-1,-1,2,"fFolder=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fGenerateHtml=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fHistFileName=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRefreshRate=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNevents=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairLinkManager */
static void G__setup_memvarFairLinkManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager));
   { FairLinkManager *p; p=(FairLinkManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),G__defined_typename("set<Int_t>"),-1,4,"fIgnoreTypes=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIgnoreSetting=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager),-1,-2,4,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairLogger),-1,-1,4,"fLogger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairBaseContFact */
static void G__setup_memvarFairBaseContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact));
   { FairBaseContFact *p; p=(FairBaseContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairBaseParSet */
static void G__setup_memvarFairBaseParSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet));
   { FairBaseParSet *p; p=(FairBaseParSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fDetList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator),-1,-1,2,"fPriGen=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamMom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fContNameList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoParSet */
static void G__setup_memvarFairGeoParSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet));
   { FairGeoParSet *p; p=(FairGeoParSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,2,"fGeoNodes=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TGeoManager),-1,-1,2,"fGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairVolumeList */
static void G__setup_memvarFairVolumeList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList));
   { FairVolumeList *p; p=(FairVolumeList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeaneApplication */
static void G__setup_memvarFairGeaneApplication(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication));
   { FairGeaneApplication *p; p=(FairGeaneApplication*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,4,"fxField=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMcVersion=",0,"mc Version");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDebug=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TLorentzVector),-1,-1,4,"fTrkPos=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGenerator */
static void G__setup_memvarFairGenerator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator));
   { FairGenerator *p; p=(FairGenerator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRunIdGenerator */
static void G__setup_memvarFairRunIdGenerator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator));
   { FairRunIdGenerator *p; p=(FairRunIdGenerator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_timespec),-1,-1,4,"fTimeSpec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRecoEventHeader */
static void G__setup_memvarFairRecoEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader));
   { FairRecoEventHeader *p; p=(FairRecoEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRunId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIdentifier=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEventTimeError=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairEventBuilder */
static void G__setup_memvarFairEventBuilder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilder));
   { FairEventBuilder *p; p=(FairEventBuilder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,4,"fBuilderName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TStopwatch),-1,-1,4,"fTimer=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fExecTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdentifier=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxAllowedEventCreationTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairEventBuilderManager */
static void G__setup_memvarFairEventBuilderManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager));
   { FairEventBuilderManager *p; p=(FairEventBuilderManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR),G__defined_typename("vector<FairEventBuilder*>"),-1,2,"fEventBuilders=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::pair<double,FairRecoEventHeader*> > >"),-1,2,"fPossibleEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairFileInfo */
static void G__setup_memvarFairFileInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo));
   { FairFileInfo *p; p=(FairFileInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TString),-1,-1,2,"fPath=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fIdentifier=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fInChainId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairHit */
static void G__setup_memvarFairHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit));
   { FairHit *p; p=(FairHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDz=",0,"/< Errors of position [cm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRefIndex=",0,"/< Index of FairMCPoint for this hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDetectorID=",0,"/< Detector unique identifier");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"/< Position of hit [cm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMCPoint */
static void G__setup_memvarFairMCPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint));
   { FairMCPoint *p; p=(FairMCPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackID=",0,"/< Track index");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fEventId=",0,"/< MC Event id");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPz=",0,"/< Momentum components [GeV]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTime=",0,"/< Time since event start [ns]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fLength=",0,"/< Track length since creation [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fELoss=",0,"/< Energy loss at this point [GeV]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDetectorID=",0,"/< Detector unique identifier");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"/< Position of hit [cm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRadLenPoint */
static void G__setup_memvarFairRadLenPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint));
   { FairRadLenPoint *p; p=(FairRadLenPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"A of material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZmat=",0,"Z of material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDensity=",0,"density of material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRadLen=",0,"radiation length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPxOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPyOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPzOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRadMapPoint */
static void G__setup_memvarFairRadMapPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint));
   { FairRadMapPoint *p; p=(FairRadMapPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPdg=",0,"track PID");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"A of material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZmat=",0,"Z of material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDensity=",0,"density of material");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVolMass=",0,"radiation length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDose=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDoseSL=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPxOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPyOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPzOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTrackParam */
static void G__setup_memvarFairTrackParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam));
   { FairTrackParam *p; p=(FairTrackParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fQp=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fCovMatrix[15]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairFieldFactory */
static void G__setup_memvarFairFieldFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory));
   { FairFieldFactory *p; p=(FairFieldFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory),-1,-1,2,"fCreator=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory),-1,-2,2,"fgRinstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRKPropagator */
static void G__setup_memvarFairRKPropagator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator));
   { FairRKPropagator *p; p=(FairRKPropagator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_FairField),-1,-1,4,"fMagField=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairUnpack */
static void G__setup_memvarFairUnpack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairUnpack));
   { FairUnpack *p; p=(FairUnpack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fSubType=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fProcId=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fSubCrate=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fControl=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMbsSource */
static void G__setup_memvarFairMbsSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource));
   { FairMbsSource *p; p=(FairMbsSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray),-1,-1,4,"fUnpackers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairLmdSource */
static void G__setup_memvarFairLmdSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource));
   { FairLmdSource *p; p=(FairLmdSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TList),-1,-1,2,"fFileNames=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_s_evt_channel),G__defined_typename("s_evt_channel"),-1,2,"fxInputChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_s_ve10_1),G__defined_typename("s_ve10_1"),-1,2,"fxEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_s_bufhe),G__defined_typename("s_bufhe"),-1,2,"fxBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fxEventData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_s_ves10_1),G__defined_typename("s_ves10_1"),-1,2,"fxSubEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_s_filhe),G__defined_typename("s_filhe"),-1,2,"fxInfoHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRevBuffer */
static void G__setup_memvarMRevBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer));
   { MRevBuffer *p; p=(MRevBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TSocket),-1,-1,4,"pTSocket=",0,"ptr socket of channel to event server");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSocket=",0,"socket id of channel to event server");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo1=",0,"first buffer no. received (test)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo2=",0,"last buffer no. received (test)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iDebug=",0,"verbosity level (test)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSwap=",0,"> 0: swap event data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iStatus=",0,"current status of server");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufSizeAlloc=",0,"allocated buffer size");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufSize=",0,"size current buffer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo=",0,"current buffer no.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragBegin=",0,"> 0: last buffer ended with fragment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragConc=",0,"no. of concatenated fragments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragBeginIgn=",0,"no. of ignored fragment begins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragEndIgn=",0,"no. of ignored fragment ends");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iHeadPar=",0,"no. of (4 byte) parms buffer header");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtMax=",0,"no. of events requested");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtNo=",0,"last event no. handled");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtRel=",0,"rel. event no. in buffer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtBuf=",0,"no. of events in current buffer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtPar=",0,"no. of parameters in event (incl. len)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piBuf=",0,"ptr event buffer");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piNextEvt=",0,"ptr first element next event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_REvent),-1,-1,4,"pEvt=",0,"ptr event class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* REvent */
static void G__setup_memvarREvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_REvent));
   { REvent *p; p=(REvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSize=",0,"event size (byte)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iNumb=",0,"event number");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piData=",0,"event parameter");
   G__memvar_setup((void*)((long)(&p->nSubEvt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nSubEvt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"subEvtSize[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtType)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"subEvtType[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtSubType)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"subEvtSubType[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtProcId)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"subEvtProcId[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtSubCrate)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"subEvtSubCrate[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subEvtControl)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"subEvtControl[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pSubEvt)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"pSubEvt[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairRemoteSource */
static void G__setup_memvarFairRemoteSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource));
   { FairRemoteSource *p; p=(FairRemoteSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"fNode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TSocket),-1,-1,4,"fSocket=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer),-1,-1,4,"fBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_REvent),-1,-1,4,"fREvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__BaseDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__BaseDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFairRunAnaProof(void) {
   /* FairRunAnaProof */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof));
   G__memfunc_setup("Instance",821,G__G__BaseDict_507_0_1, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRunAnaProof* (*)())(&FairRunAnaProof::Instance) ), 0);
   G__memfunc_setup("FairRunAnaProof",1485,G__G__BaseDict_507_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAnaProof), -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' proofName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RunOneEvent",1113,G__G__BaseDict_507_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnProof",1016,G__G__BaseDict_507_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInTree",883,G__G__BaseDict_507_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tempTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProof",806,G__G__BaseDict_507_0_8, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TProof), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunOnProofWorker",1950,G__G__BaseDict_507_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' tb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProofParName",1494,G__G__BaseDict_507_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - parName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputDirectory",1906,G__G__BaseDict_507_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - dirName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProofOutputStatus",2119,G__G__BaseDict_507_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outStat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_507_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRunAnaProof::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_507_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAnaProof::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_507_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRunAnaProof::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_507_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRunAnaProof::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_507_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_507_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAnaProof::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_507_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunAnaProof::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_507_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAnaProof::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_507_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunAnaProof::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRunAnaProof", 1611, G__G__BaseDict_507_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairAnaSelector(void) {
   /* FairAnaSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector));
   G__memfunc_setup("FairAnaSelector",1491,G__G__BaseDict_509_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector), -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Version",742,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"n - 'Long64_t' 0 - entry i - 'Int_t' 0 '0' getall", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOption",933,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetObject",899,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputList",1240,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - input", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputList",1357,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFairRunAnaProof",1785,G__G__BaseDict_509_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairRunAnaProof' - 0 - runAna", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairAnaSelector",1491,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector), -1, 0, 1, 1, 4, 0, "u 'FairAnaSelector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairAnaSelector), -1, 0, 1, 1, 4, 0, "u 'FairAnaSelector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_509_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairAnaSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_509_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairAnaSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_509_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairAnaSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_509_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairAnaSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_509_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_509_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairAnaSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_509_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairAnaSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_509_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairAnaSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_509_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairAnaSelector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairAnaSelector", 1617, G__G__BaseDict_509_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMesh(void) {
   /* FairMesh */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh));
   G__memfunc_setup("FairMesh",783,G__G__BaseDict_552_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMesh",783,G__G__BaseDict_552_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh), -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__G__BaseDict_552_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__G__BaseDict_552_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmin",702,G__G__BaseDict_552_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__G__BaseDict_552_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__G__BaseDict_552_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmax",704,G__G__BaseDict_552_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__G__BaseDict_552_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"i - 'Int_t' 0 - nbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__G__BaseDict_552_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - ymin d - 'Double_t' 0 - ymax "
"i - 'Int_t' 0 - nbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__BaseDict_552_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - zmin d - 'Double_t' 0 - zmax "
"i - 'Int_t' 0 - nbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeshTid",974,G__G__BaseDict_552_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeshFlu",980,G__G__BaseDict_552_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeshSEU",922,G__G__BaseDict_552_0_14, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiag",661,G__G__BaseDict_552_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinVolume",1201,G__G__BaseDict_552_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTID",648,G__G__BaseDict_552_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - we", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillFluence",1129,G__G__BaseDict_552_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - we", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSEU",660,G__G__BaseDict_552_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - we", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__G__BaseDict_552_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - fac", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculate",942,G__G__BaseDict_552_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__G__BaseDict_552_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMesh",783,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh), -1, 0, 1, 1, 4, 0, "u 'FairMesh' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairMesh), -1, 1, 1, 1, 4, 0, "u 'FairMesh' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_552_0_25, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMesh::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_552_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMesh::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_552_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMesh::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_552_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMesh::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_552_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_552_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMesh::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_552_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMesh::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_552_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMesh::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_552_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMesh::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairMesh", 909, G__G__BaseDict_552_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRadGridManager(void) {
   /* FairRadGridManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager));
   G__memfunc_setup("FairRadGridManager",1754,G__G__BaseDict_553_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_553_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRadGridManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_553_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadGridManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_553_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRadGridManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_553_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRadGridManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__BaseDict_553_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__BaseDict_553_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__BaseDict_553_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_553_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_553_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadGridManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_553_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadGridManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_553_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadGridManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_553_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadGridManager::DeclFileLine) ), 0);
   G__memfunc_setup("FairRadGridManager",1754,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager), -1, 0, 1, 1, 4, 0, "u 'FairRadGridManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager), -1, 1, 1, 1, 4, 0, "u 'FairRadGridManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeshList",1097,G__G__BaseDict_553_0_16, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMeshList",1074,G__G__BaseDict_553_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTrackInside",1293,G__G__BaseDict_553_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TLorentzVector' - 1 - vec U 'FairMesh' - 0 - aMesh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTrackEntering",1517,G__G__BaseDict_553_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TLorentzVector' - 1 - vec1 u 'TLorentzVector' - 1 - vec2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillMeshList",1200,G__G__BaseDict_553_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_553_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_553_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_553_0_23, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadGridManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRadGridManager* (*)())(&FairRadGridManager::Instance) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRadGridManager", 1880, G__G__BaseDict_553_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRadLenManager(void) {
   /* FairRadLenManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager));
   G__memfunc_setup("FairRadLenManager",1651,G__G__BaseDict_554_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_554_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRadLenManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_554_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_554_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRadLenManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_554_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRadLenManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__BaseDict_554_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__BaseDict_554_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__BaseDict_554_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_554_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_554_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_554_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadLenManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_554_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_554_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadLenManager::DeclFileLine) ), 0);
   G__memfunc_setup("FairRadLenManager",1651,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager), -1, 0, 1, 1, 4, 0, "u 'FairRadLenManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager), -1, 1, 1, 1, 4, 0, "u 'FairRadLenManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__BaseDict_554_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - ModuleId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_554_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_554_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_554_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRadLenManager* (*)())(&FairRadLenManager::Instance) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRadLenManager", 1777, G__G__BaseDict_554_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRadMapManager(void) {
   /* FairRadMapManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager));
   G__memfunc_setup("FairRadMapManager",1650,G__G__BaseDict_556_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_556_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRadMapManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_556_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_556_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRadMapManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_556_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRadMapManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__BaseDict_556_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__BaseDict_556_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__BaseDict_556_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_556_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_556_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_556_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadMapManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_556_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_556_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadMapManager::DeclFileLine) ), 0);
   G__memfunc_setup("FairRadMapManager",1650,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager), -1, 0, 1, 1, 4, 0, "u 'FairRadMapManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager), -1, 1, 1, 1, 4, 0, "u 'FairRadMapManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__BaseDict_556_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - ModuleId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_556_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_556_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_556_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRadMapManager* (*)())(&FairRadMapManager::Instance) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRadMapManager", 1776, G__G__BaseDict_556_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTimeStamp(void) {
   /* FairTimeStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp));
   G__memfunc_setup("FairTimeStamp",1302,G__G__BaseDict_557_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTimeStamp",1302,G__G__BaseDict_557_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTimeStamp",1302,G__G__BaseDict_557_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - time d - 'Double_t' 0 - timeerror", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__BaseDict_557_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStampError",1726,G__G__BaseDict_557_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntryNr",1010,G__G__BaseDict_557_0_6, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeStamp",1216,G__G__BaseDict_557_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeStampError",1738,G__G__BaseDict_557_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEntryNr",1022,G__G__BaseDict_557_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("equal",536,G__G__BaseDict_557_0_13, 103, -1, -1, 0, 1, 1, 1, 0, "U 'FairTimeStamp' - 0 - data", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<",936,G__G__BaseDict_557_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "U 'FairTimeStamp' - 10 - rValue", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_557_0_15, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTimeStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_557_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTimeStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_557_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTimeStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_557_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTimeStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_557_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_557_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTimeStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_557_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTimeStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_557_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTimeStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_557_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTimeStamp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairTimeStamp", 1302, G__G__BaseDict_557_0_27, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 0, 1, 1, 1, 0, "u 'FairTimeStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairTimeStamp", 1428, G__G__BaseDict_557_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_557_0_29, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 1, 1, 1, 1, 0, "u 'FairTimeStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRingSorter(void) {
   /* FairRingSorter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter));
   G__memfunc_setup("FairRingSorter",1425,G__G__BaseDict_558_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter), -1, 0, 2, 1, 1, 0, 
"i - - 0 '100' size d - - 0 '10' width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateElement",1310,G__G__BaseDict_558_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairTimeStamp), -1, 0, 1, 1, 1, 0, "U 'FairTimeStamp' - 0 - data", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddElement",979,G__G__BaseDict_558_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'FairTimeStamp' - 0 - digi d - - 0 - timestamp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteOutElements",1664,G__G__BaseDict_558_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", "/< writes out the entries from LowerBoundPointer up to index", (void*) NULL, 1);
   G__memfunc_setup("WriteOutElement",1549,G__G__BaseDict_558_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", "/< writes out the entry at the index and clears it", (void*) NULL, 1);
   G__memfunc_setup("WriteOutAll",1116,G__G__BaseDict_558_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBufferSize",1301,G__G__BaseDict_558_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputData",1323,G__G__BaseDict_558_0_8, 117, G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR), G__defined_typename("vector<FairTimeStamp*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteOutputData",1630,G__G__BaseDict_558_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLowerBound",1325,G__G__BaseDict_558_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - timestampOfHitToWrite", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__G__BaseDict_558_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcIndex",875,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_558_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRingSorter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_558_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_558_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRingSorter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_558_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRingSorter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_558_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_558_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_558_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRingSorter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_558_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_558_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRingSorter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairRingSorter", 1425, G__G__BaseDict_558_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter), -1, 0, 1, 1, 1, 0, "u 'FairRingSorter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairRingSorter", 1551, G__G__BaseDict_558_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairEventHeader(void) {
   /* FairEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader));
   G__memfunc_setup("FairEventHeader",1485,G__G__BaseDict_658_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunId",770,G__G__BaseDict_658_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTime",1201,G__G__BaseDict_658_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInputFileId",1373,G__G__BaseDict_658_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCEntryNumber",1579,G__G__BaseDict_658_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__BaseDict_658_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTime",1213,G__G__BaseDict_658_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputFileId",1385,G__G__BaseDict_658_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCEntryNumber",1591,G__G__BaseDict_658_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,G__G__BaseDict_658_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_658_0_11, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_658_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_658_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_658_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_658_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_658_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_658_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_658_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_658_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairEventHeader", 1485, G__G__BaseDict_658_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader), -1, 0, 1, 1, 1, 0, "u 'FairEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairEventHeader", 1611, G__G__BaseDict_658_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_658_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader), -1, 1, 1, 1, 1, 0, "u 'FairEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairFileHeader(void) {
   /* FairFileHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader));
   G__memfunc_setup("FairFileHeader",1355,G__G__BaseDict_659_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTaskClassName",1555,G__G__BaseDict_659_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - taskname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__BaseDict_659_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunId",770,G__G__BaseDict_659_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfTasks",1399,G__G__BaseDict_659_0_5, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInputFile",1177,G__G__BaseDict_659_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TFile' - 0 - f h - 'UInt_t' 0 - id "
"h - 'UInt_t' 0 - ChId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileInfo",1068,G__G__BaseDict_659_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - id h - 'UInt_t' 0 - ChId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairFileHeader",1355,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader), -1, 0, 1, 1, 4, 0, "u 'FairFileHeader' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileHeader), -1, 1, 1, 1, 4, 0, "u 'FairFileHeader' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_659_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairFileHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_659_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_659_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairFileHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_659_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairFileHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_659_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_659_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_659_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFileHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_659_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_659_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFileHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairFileHeader", 1481, G__G__BaseDict_659_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairLink(void) {
   /* FairLink */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLink));
   G__memfunc_setup("FairLink",784,G__G__BaseDict_661_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLink",784,G__G__BaseDict_661_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLink",784,G__G__BaseDict_661_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - branchName i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLink",784,G__G__BaseDict_661_0_4, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - file i - 'Int_t' 0 - entry "
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLink",784,G__G__BaseDict_661_0_5, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - file i - 'Int_t' 0 - entry "
"u 'TString' - 0 - branchName i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLink",698,G__G__BaseDict_661_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - file i - 'Int_t' 0 - entry "
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLink",698,G__G__BaseDict_661_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index "
"f - 'Float_t' 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFile",672,G__G__BaseDict_661_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__G__BaseDict_661_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__BaseDict_661_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__BaseDict_661_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__G__BaseDict_661_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__G__BaseDict_661_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddWeight",881,G__G__BaseDict_661_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__BaseDict_661_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator==",998,G__G__BaseDict_661_0_16, 103, -1, -1, 0, 1, 1, 1, 8, "u 'FairLink' - 11 - link", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<",936,G__G__BaseDict_661_0_17, 103, -1, -1, 0, 1, 1, 1, 8, "u 'FairLink' - 11 - link", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_661_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairLink::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_661_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLink::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_661_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairLink::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_661_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairLink::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_661_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_661_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLink::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_661_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLink::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_661_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLink::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_661_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLink::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairLink", 784, G__G__BaseDict_661_0_30, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 1, 1, 1, 0, "u 'FairLink' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairLink", 910, G__G__BaseDict_661_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_661_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 1, 1, 1, 1, 0, "u 'FairLink' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMCEventHeader(void) {
   /* FairMCEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader));
   G__memfunc_setup("FairMCEventHeader",1629,G__G__BaseDict_662_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMCEventHeader",1629,G__G__BaseDict_662_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - iEvent d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - nPrim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMCEventHeader",1629,G__G__BaseDict_662_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunID",738,G__G__BaseDict_662_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "/ run identifier", (void*) NULL, 0);
   G__memfunc_setup("GetEventID",943,G__G__BaseDict_662_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "/ event identifier", (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__BaseDict_662_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ vertex x [cm]", (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__BaseDict_662_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ vertex y [cm]", (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__BaseDict_662_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ vertex z [cm]", (void*) NULL, 0);
   G__memfunc_setup("GetT",372,G__G__BaseDict_662_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ event time [ns]", (void*) NULL, 0);
   G__memfunc_setup("GetB",354,G__G__BaseDict_662_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ impact parameter [fm]", (void*) NULL, 0);
   G__memfunc_setup("GetNPrim",774,G__G__BaseDict_662_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "/ number of input tracks", (void*) NULL, 0);
   G__memfunc_setup("IsSet",488,G__G__BaseDict_662_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "/ Flag", (void*) NULL, 0);
   G__memfunc_setup("GetRotX",685,G__G__BaseDict_662_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ rot. around x-axis [rad]", (void*) NULL, 0);
   G__memfunc_setup("GetRotY",686,G__G__BaseDict_662_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ rot. around y-axis [rad]", (void*) NULL, 0);
   G__memfunc_setup("GetRotZ",687,G__G__BaseDict_662_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "/ rot. around z-axis [rad]", (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__G__BaseDict_662_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventID",955,G__G__BaseDict_662_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunID",750,G__G__BaseDict_662_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__BaseDict_662_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetB",366,G__G__BaseDict_662_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPrim",786,G__G__BaseDict_662_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nPrim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MarkSet",695,G__G__BaseDict_662_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__G__BaseDict_662_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__G__BaseDict_662_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRotX",697,G__G__BaseDict_662_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - rotx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRotY",698,G__G__BaseDict_662_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - roty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRotZ",699,G__G__BaseDict_662_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - rotz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_662_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,G__G__BaseDict_662_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_662_0_30, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMCEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_662_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_662_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMCEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_662_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMCEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_662_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_662_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_662_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_662_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_662_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairMCEventHeader", 1629, G__G__BaseDict_662_0_42, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 1, 1, 1, 0, "u 'FairMCEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairMCEventHeader", 1755, G__G__BaseDict_662_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_662_0_44, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 1, 1, 1, 1, 0, "u 'FairMCEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTSBufferFunctional(void) {
   /* FairTSBufferFunctional */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional));
   G__memfunc_setup("FairTSBufferFunctional",2198,G__G__BaseDict_663_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - branchName U 'TTree' - 0 - sourceTree "
"U 'BinaryFunctor' - 0 - stopFunction U 'BinaryFunctor' - 0 '0' startFunction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__BaseDict_663_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - stopParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__BaseDict_663_0_3, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - startParameter d - 'Double_t' 0 - stopParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchIndex",1382,G__G__BaseDict_663_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStartFunction",1664,G__G__BaseDict_663_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'BinaryFunctor' - 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopFunction",1560,G__G__BaseDict_663_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'BinaryFunctor' - 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllDataProcessed",1595,G__G__BaseDict_663_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeOut",711,G__G__BaseDict_663_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindStartIndex",1415,G__G__BaseDict_663_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - startParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadInNextFilledEntry",2100,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadInPreviousFilledEntry",2546,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - startEntry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadInNextEntry",1508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "** used only if no function is given and input data is directly passed through to the OutputArray", (void*) NULL, 0);
   G__memfunc_setup("ReadInEntry",1093,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbsorbDataBufferArray",2092,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "< Absorbs the complete data from fInputArray to fBufferArray", (void*) NULL, 0);
   G__memfunc_setup("FairTSBufferFunctional",2198,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional), -1, 0, 1, 1, 4, 0, "u 'FairTSBufferFunctional' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional), -1, 1, 1, 1, 4, 0, "u 'FairTSBufferFunctional' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_663_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTSBufferFunctional::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_663_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSBufferFunctional::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_663_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTSBufferFunctional::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_663_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTSBufferFunctional::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_663_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_663_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSBufferFunctional::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_663_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTSBufferFunctional::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_663_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTSBufferFunctional::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_663_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTSBufferFunctional::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairTSBufferFunctional", 2324, G__G__BaseDict_663_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairWriteoutBuffer(void) {
   /* FairWriteoutBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer));
   G__memfunc_setup("SaveDataToTree",1372,G__G__BaseDict_664_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ActivateBuffering",1737,G__G__BaseDict_664_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillNewData",1067,G__G__BaseDict_664_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'FairTimeStamp' - 0 - data d - - 0 - startTime "
"d - - 0 - activeTime", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNData",744,G__G__BaseDict_664_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRemoveOldData",1575,G__G__BaseDict_664_0_7, 117, G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR), G__defined_typename("vector<FairTimeStamp*>"), 0, 1, 1, 1, 0, "d - - 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllData",947,G__G__BaseDict_664_0_8, 117, G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR), G__defined_typename("vector<FairTimeStamp*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVerbose",1026,G__G__BaseDict_664_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeleteOldData",1260,G__G__BaseDict_664_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteOutData",1213,G__G__BaseDict_664_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteOutAllData",1494,G__G__BaseDict_664_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddNewDataToTClonesArray",2343,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'FairTimeStamp' - 0 - data", "/< store the data from the FairTimeStamp pointer in a TClonesArray (you have to cast it to your type of data)", (void*) NULL, 3);
   G__memfunc_setup("FindTimeForData",1457,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 2, 0, "U 'FairTimeStamp' - 0 - data", "/< if the same data object (like a pad or a pixel) is already present in the buffer, the time of this object has to be returned otherwise -1", (void*) NULL, 3);
   G__memfunc_setup("FillDataMap",1055,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'FairTimeStamp' - 0 - data d - - 0 - activeTime", "/< add a new element in the search buffer", (void*) NULL, 3);
   G__memfunc_setup("EraseDataFromDataMap",1942,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'FairTimeStamp' - 0 - data", "/< delete the element from the search buffer (see PndSdsDigiPixelWriteoutBuffer)", (void*) NULL, 3);
   G__memfunc_setup("Modify",616,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR), G__defined_typename("vector<std::pair<double,FairTimeStamp*> >"), 0, 2, 1, 2, 0, 
"u 'pair<double,FairTimeStamp*>' - 0 - oldData u 'pair<double,FairTimeStamp*>' - 0 - newData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteOutDataDeadTimeMap",2264,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - - 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveDataFromStartTimeMapToDeadTimeMap",3646,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - - 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillDataToDeadTimeMap",2015,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'FairTimeStamp' - 0 - data d - - 0 - activeTime", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintData",903,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'FairTimeStamp' - 0 - data", "/< Method should be overwritten in derived classes to print the data of an object stored in the buffer", (void*) NULL, 1);
   G__memfunc_setup("PrintDeadTimeMap",1576,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStartTimeMap",1736,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer), -1, 1, 1, 1, 4, 0, "u 'FairWriteoutBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_664_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairWriteoutBuffer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_664_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairWriteoutBuffer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_664_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairWriteoutBuffer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_664_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairWriteoutBuffer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_664_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_664_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairWriteoutBuffer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_664_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairWriteoutBuffer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_664_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairWriteoutBuffer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_664_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairWriteoutBuffer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairWriteoutBuffer", 1981, G__G__BaseDict_664_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRootManager(void) {
   /* FairRootManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager));
   G__memfunc_setup("FairRootManager",1505,G__G__BaseDict_667_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSignalFile",1255,G__G__BaseDict_667_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name h - 'UInt_t' 0 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBackgroundFile",1673,G__G__BaseDict_667_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,G__G__BaseDict_667_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFriend",865,G__G__BaseDict_667_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFriendsToChain",1658,G__G__BaseDict_667_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllDataProcessed",1595,G__G__BaseDict_667_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBranch",1068,G__G__BaseDict_667_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseInFile",1069,G__G__BaseDict_667_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseOutFile",1198,G__G__BaseDict_667_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGeometryFile",1824,G__G__BaseDict_667_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - geofile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataContainersEmpty",1951,G__G__BaseDict_667_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataContainersFilled",2016,G__G__BaseDict_667_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__BaseDict_667_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceFill",886,G__G__BaseDict_667_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LastFill",795,G__G__BaseDict_667_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceGetDataContainer",2092,G__G__BaseDict_667_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEmptyTClonesArray",2022,G__G__BaseDict_667_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTClonesArray",1495,G__G__BaseDict_667_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataContainer",1597,G__G__BaseDict_667_0_20, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchName",1263,G__G__BaseDict_667_0_21, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchId",1051,G__G__BaseDict_667_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchNameList",1675,G__G__BaseDict_667_0_23, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInTree",871,G__G__BaseDict_667_0_24, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInChain",954,G__G__BaseDict_667_0_25, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBGChain",908,G__G__BaseDict_667_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalChainNo",1566,G__G__BaseDict_667_0_27, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TChain), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutTree",1000,G__G__BaseDict_667_0_28, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInFile",855,G__G__BaseDict_667_0_29, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutFile",984,G__G__BaseDict_667_0_30, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoParameter",1500,G__G__BaseDict_667_0_31, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoNode), -1, 0, 2, 1, 1, 0, 
"C - - 10 - detname C - - 10 - gname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObject",887,G__G__BaseDict_667_0_32, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 1, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectFromInTree",1874,G__G__BaseDict_667_0_33, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 1, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTime",1201,G__G__BaseDict_667_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCloneOfLinkData",1742,G__G__BaseDict_667_0_35, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'FairLink' - 10 - link", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCloneOfTClonesArray",2173,G__G__BaseDict_667_0_36, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'FairLink' - 10 - link", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__BaseDict_667_0_37, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - branchName U 'BinaryFunctor' - 0 - function "
"d - 'Double_t' 0 - parameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__BaseDict_667_0_38, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - branchName U 'BinaryFunctor' - 0 - startFunction "
"d - 'Double_t' 0 - startParameter U 'BinaryFunctor' - 0 - stopFunction "
"d - 'Double_t' 0 - stopParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterTSBuffer",1606,G__G__BaseDict_667_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - branchName U 'FairTSBufferFunctional' - 0 - functionalBuffer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTSBuffer",1057,G__G__BaseDict_667_0_40, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairTSBufferFunctional), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_667_0_41, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRootManager* (*)())(&FairRootManager::Instance) ), 0);
   G__memfunc_setup("OpenInChain",1068,G__G__BaseDict_667_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenInTree",985,G__G__BaseDict_667_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenBackgroundChain",1909,G__G__BaseDict_667_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenSignalChain",1491,G__G__BaseDict_667_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenOutFile",1098,G__G__BaseDict_667_0_46, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 1, 1, 1, 0, "C - - 10 '\"cbmsim.root\"' fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenOutFile",1098,G__G__BaseDict_667_0_47, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadBKEvent",1035,G__G__BaseDict_667_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEvent",894,G__G__BaseDict_667_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadBranchEvent",1484,G__G__BaseDict_667_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadNextEvent",1309,G__G__BaseDict_667_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,G__G__BaseDict_667_0_52, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - Foldername "
"U 'TNamed' - 0 - obj g - 'Bool_t' 0 - toFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,G__G__BaseDict_667_0_53, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - Foldername "
"U 'TCollection' - 0 - obj g - 'Bool_t' 0 - toFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,G__G__BaseDict_667_0_54, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - branchName u 'TString' - 0 - className "
"u 'TString' - 0 - folderName g - 'Bool_t' 0 - toFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterWriteoutBuffer",2306,G__G__BaseDict_667_0_55, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - branchName U 'FairWriteoutBuffer' - 0 - buffer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunWithTimeStamps",1752,G__G__BaseDict_667_0_56, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalFile",1290,G__G__BaseDict_667_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name h - 'UInt_t' 0 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundFile",1708,G__G__BaseDict_667_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtHeaderNew",1486,G__G__BaseDict_667_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - Status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEvtHeaderNew",1374,G__G__BaseDict_667_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBranchNameList",1687,G__G__BaseDict_667_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCompressData",1522,G__G__BaseDict_667_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputFile",1212,G__G__BaseDict_667_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInTree",883,G__G__BaseDict_667_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tempTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutTree",1012,G__G__BaseDict_667_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - fTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLastFill",1095,G__G__BaseDict_667_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TruncateBranchNames",1928,G__G__BaseDict_667_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TBranch' - 0 - b u 'TString' - 0 - ffn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TruncateBranchNames",1928,G__G__BaseDict_667_0_68, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - fTree C - - 10 - folderName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteGeometry",1367,G__G__BaseDict_667_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFileHeader",1492,G__G__BaseDict_667_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairFileHeader' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFolder",1127,G__G__BaseDict_667_0_72, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTimeInterval",2050,G__G__BaseDict_667_0_73, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventMeanTime",1598,G__G__BaseDict_667_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTime",1213,G__G__BaseDict_667_0_75, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileHeader",1269,G__G__BaseDict_667_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairFileHeader' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BGWindowWidthNo",1470,G__G__BaseDict_667_0_77, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - background h - 'UInt_t' 0 - Signalid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BGWindowWidthTime",1680,G__G__BaseDict_667_0_78, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - background h - 'UInt_t' 0 - Signalid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMaxEventNo",1475,G__G__BaseDict_667_0_79, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' EvtEnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreWriteoutBufferData",2372,G__G__BaseDict_667_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - eventTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreAllWriteoutBufferData",2653,G__G__BaseDict_667_0_81, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteOldWriteoutBufferData",2729,G__G__BaseDict_667_0_82, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryNr",1010,G__G__BaseDict_667_0_83, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntryNr",1022,G__G__BaseDict_667_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFairLinksBranchName",2162,G__G__BaseDict_667_0_85, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseFairLinks",1500,G__G__BaseDict_667_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseFairLinks",1488,G__G__BaseDict_667_0_87, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRootManager",1505,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager), -1, 0, 1, 1, 4, 0, "u 'FairRootManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRootManager), -1, 1, 1, 1, 4, 0, "u 'FairRootManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ActivateBranch",1407,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 4, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ActivateBranchInInTree",2173,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 4, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFriends",980,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMemoryBranch",1488,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - - U 'TObject' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignTClonesArrays",1935,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignTClonesArray",1820,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBranchSt",1267,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "C - - 10 - BrName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFriendChains",1676,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompareBranchList",1713,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'TFile' - 0 - fileHandle u 'TString' - 0 - inputLevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNewFriendChain",1977,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - inputFile u 'TString' - 0 - inputLevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreatePerMap",1177,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMemoryBranch",1511,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 4, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunIdInfo",1166,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - fileName u 'TString' - 0 - inputLevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintFriendList",1537,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAllContainers",1726,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadMixedEvent",1397,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWriteoutBuffer",1757,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairWriteoutBuffer), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_667_0_107, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRootManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_667_0_108, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRootManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_667_0_109, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRootManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_667_0_110, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRootManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_667_0_114, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_667_0_115, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRootManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_667_0_116, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRootManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_667_0_117, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRootManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_667_0_118, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRootManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRootManager", 1631, G__G__BaseDict_667_0_119, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTask(void) {
   /* FairTask */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTask));
   G__memfunc_setup("FairTask",789,G__G__BaseDict_779_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTask",789,G__G__BaseDict_779_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 '1' iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTask",807,G__G__BaseDict_779_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInitTask",990,G__G__BaseDict_779_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParTask",994,G__G__BaseDict_779_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishTask",1012,G__G__BaseDict_779_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,G__G__BaseDict_779_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVerbose",1026,G__G__BaseDict_779_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputPersistance",1981,G__G__BaseDict_779_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckInputPersistance",2159,G__G__BaseDict_779_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParContainers",1637,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTasks",922,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInitTasks",1105,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParTasks",1109,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishTasks",1127,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishEvents",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTask",789,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 0, 1, 1, 4, 0, "u 'FairTask' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 1, 1, 1, 4, 0, "u 'FairTask' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_779_0_22, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTask::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_779_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTask::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_779_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTask::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_779_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTask::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_779_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_779_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTask::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_779_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTask::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_779_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTask::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_779_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTask::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairTask", 915, G__G__BaseDict_779_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRingSorterTask(void) {
   /* FairRingSorterTask */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask));
   G__memfunc_setup("FairRingSorterTask",1828,G__G__BaseDict_780_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRingSorterTask",1828,G__G__BaseDict_780_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRingSorterTask",1828,G__G__BaseDict_780_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - numberOfCells d - 'Double_t' 0 - widthOfCells "
"u 'TString' - 0 - inputBranch u 'TString' - 0 - outputBranch "
"u 'TString' - 0 - folderName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishTask",1012,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParContainers",1637,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPersistance",1453,G__G__BaseDict_780_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPersistance",1441,G__G__BaseDict_780_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewDataToTClonesArray",2343,G__G__BaseDict_780_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairTimeStamp' - 0 - data", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSorter",1043,G__G__BaseDict_780_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorter), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - numberOfCells d - 'Double_t' 0 - widthOfCells", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairRingSorterTask",1828,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask), -1, 0, 1, 1, 2, 0, "u 'FairRingSorterTask' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRingSorterTask), -1, 1, 1, 1, 2, 0, "u 'FairRingSorterTask' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_780_0_16, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRingSorterTask::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_780_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorterTask::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_780_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRingSorterTask::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_780_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRingSorterTask::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_780_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_780_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorterTask::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_780_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRingSorterTask::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_780_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRingSorterTask::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_780_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRingSorterTask::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRingSorterTask", 1954, G__G__BaseDict_780_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairField(void) {
   /* FairField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairField));
   G__memfunc_setup("FairField",870,G__G__BaseDict_782_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairField",870,G__G__BaseDict_782_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"FAIR Magnetic Field\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__BaseDict_782_0_3, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 1, 1, 1, 1, 0, "u 'FairField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_782_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsConst",707,G__G__BaseDict_782_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMap",474,G__G__BaseDict_782_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__BaseDict_782_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,G__G__BaseDict_782_0_8, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBy",475,G__G__BaseDict_782_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBz",476,G__G__BaseDict_782_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFieldValue",1281,G__G__BaseDict_782_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - point D - 'Double_t' 0 - bField", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Field",484,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - point D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBxyz",717,G__G__BaseDict_782_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - point D - 'Double_t' 0 - bField", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillParContainer",1613,G__G__BaseDict_782_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairField",870,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 1, 1, 4, 0, "u 'FairField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_782_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_782_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_782_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_782_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_782_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_782_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_782_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_782_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_782_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairField", 996, G__G__BaseDict_782_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRun(void) {
   /* FairRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRun));
   G__memfunc_setup("Instance",821,G__G__BaseDict_783_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRun), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRun* (*)())(&FairRun::Instance) ), 0);
   G__memfunc_setup("AddTask",668,G__G__BaseDict_783_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairTask' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTask",703,G__G__BaseDict_783_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairTask' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,G__G__BaseDict_783_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetField",772,G__G__BaseDict_783_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Run",309,G__G__BaseDict_783_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' NStart i - 'Int_t' 0 '0' NStop", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetOutputFile",1341,G__G__BaseDict_783_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputFile",1341,G__G__BaseDict_783_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventHeader",1399,G__G__BaseDict_783_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairEventHeader' - 0 - EvHeader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRuntimeDb",1194,G__G__BaseDict_783_0_11, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRuntimeDb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputFile",1329,G__G__BaseDict_783_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunId",770,G__G__BaseDict_783_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__BaseDict_783_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventHeader",1387,G__G__BaseDict_783_0_15, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAna",460,G__G__BaseDict_783_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTask",691,G__G__BaseDict_783_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 0, 1, 1, 1, 0, "C - - 10 - taskName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMainTask",1080,G__G__BaseDict_783_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairTask), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTasks",884,G__G__BaseDict_783_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGeometryFile",1824,G__G__BaseDict_783_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - geofile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWriteRunInfoFile",1912,G__G__BaseDict_783_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - write", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGenerateRunInfo",1816,G__G__BaseDict_783_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - write", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWriteRunInfoFile",1900,G__G__BaseDict_783_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsRunInfoGenerated",1804,G__G__BaseDict_783_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseFairLinks",1500,G__G__BaseDict_783_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRun), -1, 1, 1, 1, 4, 0, "u 'FairRun' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_783_0_28, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_783_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_783_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_783_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_783_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_783_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_783_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_783_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_783_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRun::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRun", 821, G__G__BaseDict_783_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRunInfo(void) {
   /* FairRunInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo));
   G__memfunc_setup("FairRunInfo",1091,G__G__BaseDict_826_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreInfo",921,G__G__BaseDict_826_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteInfo",919,G__G__BaseDict_826_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_826_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTimeDifference",2312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintInfo",921,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInfo",684,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAndFillHistograms",2319,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TList' - 0 - histoList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteHistosToFile",1736,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TList' - 0 - histoList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunInfo",1091,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo), -1, 0, 1, 1, 4, 0, "u 'FairRunInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunInfo), -1, 1, 1, 1, 4, 0, "u 'FairRunInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_826_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRunInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_826_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_826_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRunInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_826_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRunInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_826_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_826_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_826_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_826_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_826_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRunInfo", 1217, G__G__BaseDict_826_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRunAna(void) {
   /* FairRunAna */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna));
   G__memfunc_setup("Instance",821,G__G__BaseDict_827_0_1, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRunAna* (*)())(&FairRunAna::Instance) ), 0);
   G__memfunc_setup("FairRunAna",967,G__G__BaseDict_827_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFriend",865,G__G__BaseDict_827_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,G__G__BaseDict_827_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - delta_t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,G__G__BaseDict_827_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunEventReco",1216,G__G__BaseDict_827_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunMixed",812,G__G__BaseDict_827_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunTSBuffers",1193,G__G__BaseDict_827_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DummyRun",833,G__G__BaseDict_827_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - NStart i - 'Int_t' 0 - NStop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunMQ",467,G__G__BaseDict_827_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnLmdFiles",1282,G__G__BaseDict_827_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 '0' NStart h - 'UInt_t' 0 '0' NStop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TerminateRun",1246,G__G__BaseDict_827_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalFile",1290,G__G__BaseDict_827_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name h - 'UInt_t' 0 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundFile",1708,G__G__BaseDict_827_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBackgroundFile",1673,G__G__BaseDict_827_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSignalFile",1255,G__G__BaseDict_827_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name h - 'UInt_t' 0 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputFile",1212,G__G__BaseDict_827_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,G__G__BaseDict_827_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reinit",619,G__G__BaseDict_827_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunId",802,G__G__BaseDict_827_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetField",784,G__G__BaseDict_827_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - ffield", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeomFile",1076,G__G__BaseDict_827_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - GeoFileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoFile",955,G__G__BaseDict_827_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitContainers",1450,G__G__BaseDict_827_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContainerStatic",1847,G__G__BaseDict_827_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' tempBool", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerStatic",1835,G__G__BaseDict_827_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunWithTimeStamps",1752,G__G__BaseDict_827_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTimeStamp",1104,G__G__BaseDict_827_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompressData",1222,G__G__BaseDict_827_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTimeInterval",2050,G__G__BaseDict_827_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventMeanTime",1598,G__G__BaseDict_827_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BGWindowWidthNo",1470,G__G__BaseDict_827_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - background h - 'UInt_t' 0 - Signalid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BGWindowWidthTime",1680,G__G__BaseDict_827_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - background h - 'UInt_t' 0 - Signalid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopProcessingLMD",1696,G__G__BaseDict_827_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLMDProcessingStatus",2206,G__G__BaseDict_827_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunAna",967,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna), -1, 0, 1, 1, 4, 0, "u 'FairRunAna' - 11 - M", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunAna), -1, 1, 1, 1, 4, 0, "u 'FairRunAna' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_827_0_41, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRunAna::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_827_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAna::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_827_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRunAna::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_827_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRunAna::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_827_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_827_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAna::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_827_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunAna::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_827_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunAna::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_827_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunAna::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRunAna", 1093, G__G__BaseDict_827_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairIon(void) {
   /* FairIon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairIon));
   G__memfunc_setup("FairIon",680,G__G__BaseDict_920_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairIon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairIon",680,G__G__BaseDict_920_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairIon), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - z "
"i - 'Int_t' 0 - a i - 'Int_t' 0 - q "
"d - 'Double_t' 0 '0.' e d - 'Double_t' 0 '0.' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParams",912,G__G__BaseDict_920_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - z "
"i - 'Int_t' 0 - a i - 'Int_t' 0 - q "
"d - 'Double_t' 0 '0.' e d - 'Double_t' 0 '0.' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__BaseDict_920_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__BaseDict_920_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ",369,G__G__BaseDict_920_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExcEnergy",1194,G__G__BaseDict_920_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__BaseDict_920_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExcEnergy",1206,G__G__BaseDict_920_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - eExc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__G__BaseDict_920_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairIon",680,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairIon), -1, 0, 1, 1, 4, 0, "u 'FairIon' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairIon), -1, 1, 1, 1, 4, 0, "u 'FairIon' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_920_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairIon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_920_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairIon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_920_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairIon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_920_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairIon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_920_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_920_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairIon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_920_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairIon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_920_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairIon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_920_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairIon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairIon", 806, G__G__BaseDict_920_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairDetector(void) {
   /* FairDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector));
   G__memfunc_setup("Initialize",1042,G__G__BaseDict_922_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessHits",1143,G__G__BaseDict_922_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairVolume' - 0 '0' v", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EndOfEvent",974,G__G__BaseDict_922_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Register",837,G__G__BaseDict_922_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCollection",1324,G__G__BaseDict_922_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iColl", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__BaseDict_922_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CopyClones",1023,G__G__BaseDict_922_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TClonesArray' - 0 - cl1 U 'TClonesArray' - 0 - cl2 "
"i - 'Int_t' 0 - offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishPrimary",1349,G__G__BaseDict_922_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishRun",918,G__G__BaseDict_922_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginPrimary",1225,G__G__BaseDict_922_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostTrack",923,G__G__BaseDict_922_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreTrack",796,G__G__BaseDict_922_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,G__G__BaseDict_922_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,G__G__BaseDict_922_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSpecialPhysicsCuts",2159,G__G__BaseDict_922_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveGeoParams",1294,G__G__BaseDict_922_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetId",746,G__G__BaseDict_922_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector), -1, 1, 1, 1, 4, 0, "u 'FairDetector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_922_0_22, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_922_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_922_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_922_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_922_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_922_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_922_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_922_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_922_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairDetector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairDetector", 1338, G__G__BaseDict_922_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGenericStack(void) {
   /* FairGenericStack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack));
   G__memfunc_setup("FairGenericStack",1589,G__G__BaseDict_923_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGenericStack",1589,G__G__BaseDict_923_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PushTrack",917,(G__InterfaceMethod) NULL,121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - toBeDone i - 'Int_t' 0 - parentID "
"i - 'Int_t' 0 - pdgCode d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - polx "
"d - 'Double_t' 0 - poly d - 'Double_t' 0 - polz "
"i 'TMCProcess' - 0 - proc i - 'Int_t' 1 - ntr "
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PushTrack",917,G__G__BaseDict_923_0_4, 121, -1, -1, 0, 19, 1, 1, 0, 
"i - 'Int_t' 0 - toBeDone i - 'Int_t' 0 - parentID "
"i - 'Int_t' 0 - pdgCode d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - polx "
"d - 'Double_t' 0 - poly d - 'Double_t' 0 - polz "
"i 'TMCProcess' - 0 - proc i - 'Int_t' 1 - ntr "
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - is "
"i - 'Int_t' 0 - secondparentID", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopNextTrack",1219,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - iTrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopPrimaryForTracking",2157,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iPrim", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddParticle",1085,G__G__BaseDict_923_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TParticle' - 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTrackArray",1403,G__G__BaseDict_923_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTrackIndex",1616,G__G__BaseDict_923_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRefArray' - 0 '0' detArray", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetArrayList",1508,G__G__BaseDict_923_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRefArray' - 0 - detArray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_923_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Register",837,G__G__BaseDict_923_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCurrentTrack",1540,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iTrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNtrack",899,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Total number of tracks", (void*) NULL, 1);
   G__memfunc_setup("GetNprimary",1138,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of primaries", (void*) NULL, 1);
   G__memfunc_setup("GetCurrentTrack",1528,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentTrackNumber",2145,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentParentTrackNumber",2763,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParticle",1108,G__G__BaseDict_923_0_20, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - trackID", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetListOfParticles",1816,G__G__BaseDict_923_0_21, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FairGenericStack",1589,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack), -1, 0, 1, 1, 4, 0, "u 'FairGenericStack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack), -1, 1, 1, 1, 4, 0, "u 'FairGenericStack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_923_0_24, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGenericStack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_923_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenericStack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_923_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGenericStack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_923_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGenericStack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_923_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_923_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenericStack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_923_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGenericStack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_923_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenericStack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_923_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGenericStack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGenericStack", 1715, G__G__BaseDict_923_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairPrimaryGenerator(void) {
   /* FairPrimaryGenerator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator));
   G__memfunc_setup("FairPrimaryGenerator",2061,G__G__BaseDict_924_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairPrimaryGenerator",2061,G__G__BaseDict_924_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"FAIR Generator\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_924_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddGenerator",1200,G__G__BaseDict_924_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGenerator' - 0 - generator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvent",1325,G__G__BaseDict_924_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGenericStack' - 0 - pStack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTrack",766,G__G__BaseDict_924_0_6, 121, -1, -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - pdgid d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - vx d - 'Double_t' 0 - vy "
"d - 'Double_t' 0 - vz i - 'Int_t' 0 '-1' parent "
"g - 'Bool_t' 0 'true' wanttracking d - 'Double_t' 0 '-9e9' e "
"d - 'Double_t' 0 '0.' tof d - 'Double_t' 0 '0.' weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBeam",673,G__G__BaseDict_924_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - beamX0 d - 'Double_t' 0 - beamY0 "
"d - 'Double_t' 0 - beamSigmaX d - 'Double_t' 0 - beamSigmaY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamAngle",1160,G__G__BaseDict_924_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - beamAngleX0 d - 'Double_t' 0 - beamAngleY0 "
"d - 'Double_t' 0 - beamAngleSigmaX d - 'Double_t' 0 - beamAngleSigmaY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventPlane",1310,G__G__BaseDict_924_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - phiMin d - 'Double_t' 0 - phiMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTarget",915,G__G__BaseDict_924_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - targetZ d - 'Double_t' 0 - targetDz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultTarget",1333,G__G__BaseDict_924_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nroftargets D - 'Double_t' 0 - targetZ "
"d - 'Double_t' 0 - targetDz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearVertexZ",1232,G__G__BaseDict_924_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearGausVertexZ",1632,G__G__BaseDict_924_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearVertexXY",1319,G__G__BaseDict_924_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearGausVertexXY",1719,G__G__BaseDict_924_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfGenerators",1931,G__G__BaseDict_924_0_16, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvent",814,G__G__BaseDict_924_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairMCEventHeader' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,G__G__BaseDict_924_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTracking",998,G__G__BaseDict_924_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doTracking", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotPrimary",1339,G__G__BaseDict_924_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeVertex",1020,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeBeamAngle",1242,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeEventPlane",1392,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairPrimaryGenerator",2061,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 1, 1, 4, 0, "u 'FairPrimaryGenerator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 1, 1, 1, 4, 0, "u 'FairPrimaryGenerator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_924_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairPrimaryGenerator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_924_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPrimaryGenerator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_924_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairPrimaryGenerator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_924_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairPrimaryGenerator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_924_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_924_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPrimaryGenerator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_924_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPrimaryGenerator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_924_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPrimaryGenerator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_924_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPrimaryGenerator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairPrimaryGenerator", 2187, G__G__BaseDict_924_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTrajFilter(void) {
   /* FairTrajFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter));
   G__memfunc_setup("FairTrajFilter",1401,G__G__BaseDict_925_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_925_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTrajFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_925_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrajFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_925_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTrajFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_925_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTrajFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__BaseDict_925_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__BaseDict_925_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__BaseDict_925_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_925_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_925_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrajFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_925_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTrajFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_925_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrajFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_925_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTrajFilter::DeclFileLine) ), 0);
   G__memfunc_setup("FairTrajFilter",1401,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter), -1, 0, 1, 1, 4, 0, "u 'FairTrajFilter' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter), -1, 1, 1, 1, 4, 0, "u 'FairTrajFilter' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__G__BaseDict_925_0_16, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TGeoTrack), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - trackId i - 'Int_t' 0 - pdgCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__G__BaseDict_925_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TGeoTrack), -1, 0, 1, 1, 1, 0, "U 'TParticle' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentTrk",1332,G__G__BaseDict_925_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TGeoTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_925_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"GeoTracks\"' brName u 'TString' - 0 '\"MCGeoTrack\"' folderName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__BaseDict_925_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_925_0_21, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrajFilter), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairTrajFilter* (*)())(&FairTrajFilter::Instance) ), 0);
   G__memfunc_setup("IsAccepted",981,G__G__BaseDict_925_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TParticle' - 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexCut",1238,G__G__BaseDict_925_0_23, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 '-2000.' vxMin d - 'Double_t' 0 '-2000.' vyMin "
"d - 'Double_t' 0 '-2000.' vzMin d - 'Double_t' 0 '2000.' vxMax "
"d - 'Double_t' 0 '2000.' vyMax d - 'Double_t' 0 '2000.' vzMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentumCutP",1530,G__G__BaseDict_925_0_24, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 '0.' pMin d - 'Double_t' 0 '0.' thetaMin "
"d - 'Double_t' 0 '0.' phiMin d - 'Double_t' 0 '1e10' pMax "
"d - 'Double_t' 0 'TMath::Pi()' thetaMax d - 'Double_t' 0 'TMath::TwoPi()' phiMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentumCutD",1518,G__G__BaseDict_925_0_25, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 '-1e10' pxMin d - 'Double_t' 0 '-1e10' pyMin "
"d - 'Double_t' 0 '-1e10' pzMin d - 'Double_t' 0 '1e10' pxMax "
"d - 'Double_t' 0 '1e10' pyMax d - 'Double_t' 0 '1e10' pzMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPtRapidityCut",1634,G__G__BaseDict_925_0_26, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0.' ptMin d - 'Double_t' 0 '1e10' ptMax "
"d - 'Double_t' 0 '-1e10' rapidityMin d - 'Double_t' 0 '1e10' rapidityMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergyCut",1218,G__G__BaseDict_925_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '0.' etotMin d - 'Double_t' 0 '1e10' etotMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStorePrimaries",1765,G__G__BaseDict_925_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' storePrim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStoreSecondaries",1961,G__G__BaseDict_925_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' storeSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStepSizeCut",1423,G__G__BaseDict_925_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.' stepSizeMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexCut",1226,G__G__BaseDict_925_0_31, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 1 - vxMin d - 'Double_t' 1 - vyMin "
"d - 'Double_t' 1 - vzMin d - 'Double_t' 1 - vxMax "
"d - 'Double_t' 1 - vyMax d - 'Double_t' 1 - vzMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentumCutP",1518,G__G__BaseDict_925_0_32, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 1 - pMin d - 'Double_t' 1 - thetaMin "
"d - 'Double_t' 1 - phiMin d - 'Double_t' 1 - pMax "
"d - 'Double_t' 1 - thetaMax d - 'Double_t' 1 - phiMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentumCutD",1506,G__G__BaseDict_925_0_33, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 1 - pxMin d - 'Double_t' 1 - pyMin "
"d - 'Double_t' 1 - pzMin d - 'Double_t' 1 - pxMax "
"d - 'Double_t' 1 - pyMax d - 'Double_t' 1 - pzMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPtRapidityCut",1622,G__G__BaseDict_925_0_34, 121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - ptMin d - 'Double_t' 1 - ptMax "
"d - 'Double_t' 1 - rapidityMin d - 'Double_t' 1 - rapidityMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyCut",1206,G__G__BaseDict_925_0_35, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - etotMin d - 'Double_t' 1 - etotMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPrimariesStored",1753,G__G__BaseDict_925_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSecondariesStored",1949,G__G__BaseDict_925_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepSizeCut",1411,G__G__BaseDict_925_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__G__BaseDict_925_0_39, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TGeoTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairTrajFilter", 1527, G__G__BaseDict_925_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairVolume(void) {
   /* FairVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume));
   G__memfunc_setup("FairVolume",1018,G__G__BaseDict_926_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairVolume",1018,G__G__BaseDict_926_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' id "
"i - 'Int_t' 0 '0' detid U 'FairModule' - 0 '0' fMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRealName",1105,G__G__BaseDict_926_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRealName",1093,G__G__BaseDict_926_0_4, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolumeId",1125,G__G__BaseDict_926_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModId",781,G__G__BaseDict_926_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModId",793,G__G__BaseDict_926_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyNo",932,G__G__BaseDict_926_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumeId",1137,G__G__BaseDict_926_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeoNode",1005,G__G__BaseDict_926_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairGeoNode' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMotherId",1128,G__G__BaseDict_926_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMotherCopyNo",1555,G__G__BaseDict_926_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - CopyNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModule",902,G__G__BaseDict_926_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetModule",914,G__G__BaseDict_926_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairModule' - 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCid",669,G__G__BaseDict_926_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNo",920,G__G__BaseDict_926_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMCid",681,G__G__BaseDict_926_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeoNode",993,G__G__BaseDict_926_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherId",1116,G__G__BaseDict_926_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherCopyNo",1543,G__G__BaseDict_926_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairVolume",1018,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 1, 1, 4, 0, "u 'FairVolume' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 1, 1, 1, 4, 0, "u 'FairVolume' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_926_0_23, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_926_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_926_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_926_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_926_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_926_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_926_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_926_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_926_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairVolume::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairVolume", 1144, G__G__BaseDict_926_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMCApplication(void) {
   /* FairMCApplication */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication));
   G__memfunc_setup("FairMCApplication",1670,G__G__BaseDict_928_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"U 'TObjArray' - 0 - ModList C - - 10 - MatName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMCApplication",1670,G__G__BaseDict_928_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_928_0_3, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairMCApplication* (*)())(&FairMCApplication::Instance) ), 0);
   G__memfunc_setup("AddDecayModes",1255,G__G__BaseDict_928_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddParticles",1200,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("AddIons",674,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("AddTask",668,G__G__BaseDict_928_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTask' - 0 - fTask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("BeginPrimary",1225,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("ConstructOpGeometry",2000,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("FinishPrimary",1349,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("FinishRun",918,G__G__BaseDict_928_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePrimaries",1751,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("GetDetector",1114,G__G__BaseDict_928_0_16, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairDetector), -1, 0, 1, 1, 1, 0, "C - - 10 - DetName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__G__BaseDict_928_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGenerator",1223,G__G__BaseDict_928_0_18, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfTasks",1399,G__G__BaseDict_928_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TTask), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStack",790,G__G__BaseDict_928_0_20, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenericStack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChain",771,G__G__BaseDict_928_0_21, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGeometry",1248,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("InitMC",548,G__G__BaseDict_928_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - setup C - - 10 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTasks",922,G__G__BaseDict_928_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PostTrack",923,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("PreTrack",796,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("RunMC",453,G__G__BaseDict_928_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nofEvents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetField",784,G__G__BaseDict_928_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGenerator",1235,G__G__BaseDict_928_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairPrimaryGenerator' - 0 - fxGenerator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParTask",994,G__G__BaseDict_928_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPythiaDecayer",1624,G__G__BaseDict_928_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - decayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPythiaDecayerConfig",2222,G__G__BaseDict_928_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - decayerConf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadiationLengthReg",2119,G__G__BaseDict_928_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - RadLen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadiationMapReg",1795,G__G__BaseDict_928_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - RadMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackingDebugMode",1995,G__G__BaseDict_928_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserDecay",1201,G__G__BaseDict_928_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - decay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserDecayConfig",1799,G__G__BaseDict_928_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - decayerConf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stepping",842,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("StopRun",731,G__G__BaseDict_928_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrackingRmax",1227,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("TrackingZmax",1235,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("AddMeshList",1074,G__G__BaseDict_928_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - meshList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterStack",1339,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIonPdg",865,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - z i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_928_0_45, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMCApplication::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_928_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCApplication::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_928_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMCApplication::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_928_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMCApplication::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_928_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_928_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCApplication::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_928_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCApplication::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_928_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCApplication::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_928_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCApplication::DeclFileLine) ), 0);
   G__memfunc_setup("FairMCApplication",1670,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication), -1, 0, 1, 1, 4, 0, "u 'FairMCApplication' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCApplication), -1, 1, 1, 1, 4, 0, "u 'FairMCApplication' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairMCApplication", 1796, G__G__BaseDict_928_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairParticle(void) {
   /* FairParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle));
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - id U 'TParticle' - 0 - particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - id U 'TParticle' - 0 - particle "
"U 'FairParticle' - 0 - mother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - z "
"i - 'Int_t' 0 - a i - 'Int_t' 0 - s "
"d - 'Double_t' 0 - mass i - 'Int_t' 0 - q "
"g - 'Bool_t' 0 - stable d - 'Double_t' 0 - decaytime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_4, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - z "
"i - 'Int_t' 0 - a d - 'Double_t' 0 - mass "
"i - 'Int_t' 0 - q g - 'Bool_t' 0 - stable "
"d - 'Double_t' 0 - decaytime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_5, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 17, 1, 1, 0, 
"i - 'Int_t' 0 - pdg u 'TString' - 10 - name "
"i 'TMCParticleType' - 0 - mcType d - 'Double_t' 0 - mass "
"d - 'Double_t' 0 - charge d - 'Double_t' 0 - lifetime "
"u 'TString' - 10 '\"Ion\"' pType d - 'Double_t' 0 '0' width "
"i - 'Int_t' 0 '0' iSpin i - 'Int_t' 0 '0' iParity "
"i - 'Int_t' 0 '0' iConjugation i - 'Int_t' 0 '0' iIsospin "
"i - 'Int_t' 0 '0' iIsospinZ i - 'Int_t' 0 '0' gParity "
"i - 'Int_t' 0 '0' lepton i - 'Int_t' 0 '0' baryon "
"g - 'Bool_t' 0 'kFALSE' stable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,G__G__BaseDict_942_0_6, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMother",923,G__G__BaseDict_942_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParticle' - 0 - particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughter",1085,G__G__BaseDict_942_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParticle' - 0 - particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDaughters",1460,G__G__BaseDict_942_0_10, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDG",507,G__G__BaseDict_942_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticle",1108,G__G__BaseDict_942_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMother",911,G__G__BaseDict_942_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNofDaughters",1514,G__G__BaseDict_942_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDaughter",1108,G__G__BaseDict_942_0_15, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMCType",850,G__G__BaseDict_942_0_17, 105, G__get_linked_tagnum(&G__G__BaseDictLN_TMCParticleType), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__BaseDict_942_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__BaseDict_942_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDecayTime",1173,G__G__BaseDict_942_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPType",786,G__G__BaseDict_942_0_21, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__G__BaseDict_942_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpin",698,G__G__BaseDict_942_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetiParity",1026,G__G__BaseDict_942_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConjugation",1441,G__G__BaseDict_942_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsospin",1029,G__G__BaseDict_942_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsospinZ",1119,G__G__BaseDict_942_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetgParity",1024,G__G__BaseDict_942_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLepton",914,G__G__BaseDict_942_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBaryon",907,G__G__BaseDict_942_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsStable",791,G__G__BaseDict_942_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairParticle",1206,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 0, 1, 1, 4, 0, "u 'FairParticle' - 11 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairParticle), -1, 1, 1, 1, 4, 0, "u 'FairParticle' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_942_0_34, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_942_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_942_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_942_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_942_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_942_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_942_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_942_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_942_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairParticle", 1332, G__G__BaseDict_942_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairModule(void) {
   /* FairModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairModule));
   G__memfunc_setup("FairModule",1000,G__G__BaseDict_943_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairModule",1000,G__G__BaseDict_943_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairModule), -1, 0, 3, 1, 1, 0, 
"C - - 10 - Name C - - 10 - title "
"g - 'Bool_t' 0 'kFALSE' Active", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGeometryFileName",1913,G__G__BaseDict_943_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fname u 'TString' - 0 '\"0\"' geoVer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeometryFileName",1901,G__G__BaseDict_943_0_5, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeometryFileVer",1817,G__G__BaseDict_943_0_6, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructGeometry",1809,G__G__BaseDict_943_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructOpGeometry",2000,G__G__BaseDict_943_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructRootGeometry",2229,G__G__BaseDict_943_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructASCIIGeometry",2170,G__G__BaseDict_943_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ModifyGeometry",1460,G__G__BaseDict_943_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructGDMLGeometry",2101,G__G__BaseDict_943_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoMatrix' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckIfSensitive",1607,G__G__BaseDict_943_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExpandNode",998,G__G__BaseDict_943_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoNode' - 0 - Node", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExpandNodeForGDML",1585,G__G__BaseDict_943_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getVolId",798,G__G__BaseDict_943_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'TString' - 11 - vname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetModId",749,G__G__BaseDict_943_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerboseLevel",1530,G__G__BaseDict_943_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__G__BaseDict_943_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetModId",761,G__G__BaseDict_943_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMotherVolume",1555,G__G__BaseDict_943_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - volName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessNodes",1240,G__G__BaseDict_943_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - aList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParContainers",1637,G__G__BaseDict_943_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitParContainers",1741,G__G__BaseDict_943_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetListOfGeoPar",1455,G__G__BaseDict_943_0_25, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFairVolume",1338,G__G__BaseDict_943_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 1, 1, 1, 0, "U 'FairGeoNode' - 0 - fNode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSensitiveVolume",1851,G__G__BaseDict_943_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairModule",1000,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairModule), -1, 0, 1, 1, 4, 0, "u 'FairModule' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairModule), -1, 1, 1, 1, 4, 0, "u 'FairModule' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultMatrixName",2023,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TGeoMatrix' - 0 - matrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignMediumAtImport",2038,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TGeoVolume' - 0 - v", "O.Merle, 29.02.2012 - see impl.", (void*) NULL, 0);
   G__memfunc_setup("ReAssignMediaId",1449,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_943_0_33, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_943_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_943_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_943_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_943_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_943_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_943_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_943_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_943_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairModule::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairModule", 1126, G__G__BaseDict_943_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRunSim(void) {
   /* FairRunSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim));
   G__memfunc_setup("FairRunSim",992,G__G__BaseDict_944_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_944_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRunSim* (*)())(&FairRunSim::Instance) ), 0);
   G__memfunc_setup("AddModule",879,G__G__BaseDict_944_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairModule' - 0 - Mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewIon",857,G__G__BaseDict_944_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairIon' - 0 - ion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewParticle",1383,G__G__BaseDict_944_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParticle' - 0 - Particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUserDefIons",1383,G__G__BaseDict_944_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUserDefParticles",1909,G__G__BaseDict_944_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' NEvents i - 'Int_t' 0 '0' NotUsed", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetField",784,G__G__BaseDict_944_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGenerator",1235,G__G__BaseDict_944_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairPrimaryGenerator' - 0 - Gen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCEventHeader",1543,G__G__BaseDict_944_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairMCEventHeader' - 0 - McHeader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaterials",1230,G__G__BaseDict_944_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - MatFileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStoreTraj",1226,G__G__BaseDict_944_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' storeTraj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackingDebugMode",1995,G__G__BaseDict_944_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeoModel",1080,G__G__BaseDict_944_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoModel",1068,G__G__BaseDict_944_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMCEventHeader",1531,G__G__BaseDict_944_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfModules",1610,G__G__BaseDict_944_0_20, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryGenerator",1963,G__G__BaseDict_944_0_21, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPythiaDecayer",1624,G__G__BaseDict_944_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - decayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPythiaDecayer",1624,G__G__BaseDict_944_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - Config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserDecay",1201,G__G__BaseDict_944_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - Config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserDecay",1201,G__G__BaseDict_944_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - decay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExtDecayer",1194,G__G__BaseDict_944_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUserDecay",1089,G__G__BaseDict_944_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadLenRegister",1703,G__G__BaseDict_944_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadMapRegister",1702,G__G__BaseDict_944_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadGridRegister",1806,G__G__BaseDict_944_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMesh",662,G__G__BaseDict_944_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairMesh' - 0 - Mesh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserConfig",1313,G__G__BaseDict_944_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - Config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserCuts",1130,G__G__BaseDict_944_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - Cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamMom",970,G__G__BaseDict_944_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - BeamMom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamMom",958,G__G__BaseDict_944_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseBeamMom",971,G__G__BaseDict_944_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFieldContainer",1715,G__G__BaseDict_944_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunSim",992,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim), -1, 0, 1, 1, 4, 0, "u 'FairRunSim' - 11 - M", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunSim), -1, 1, 1, 1, 4, 0, "u 'FairRunSim' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCConfig",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFlukaExec",1366,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_944_0_42, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRunSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_944_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_944_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRunSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_944_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRunSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_944_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_944_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_944_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_944_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_944_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRunSim", 1118, G__G__BaseDict_944_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMultiLinkedData(void) {
   /* FairMultiLinkedData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData));
   G__memfunc_setup("FairMultiLinkedData",1886,G__G__BaseDict_998_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 0, 1, 1, 0, "", "/< Default constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData",1886,G__G__BaseDict_998_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 2, 1, 1, 0, 
"u 'set<FairLink,less<FairLink>,allocator<FairLink> >' 'set<FairLink>' 0 - links g - 'Bool_t' 0 'kTRUE' persistanceCheck", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData",1886,G__G__BaseDict_998_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 7, 1, 1, 0, 
"u 'TString' - 0 - dataType u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - links "
"i - 'Int_t' 0 '-1' fileId i - 'Int_t' 0 '-1' evtId "
"g - 'Bool_t' 0 'kTRUE' persistanceCheck g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData",1886,G__G__BaseDict_998_0_4, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - dataType u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - links "
"i - 'Int_t' 0 '-1' fileId i - 'Int_t' 0 '-1' evtId "
"g - 'Bool_t' 0 'kTRUE' persistanceCheck g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("GetLinks",801,G__G__BaseDict_998_0_5, 117, G__get_linked_tagnum(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR), G__defined_typename("set<FairLink>"), 0, 0, 1, 1, 8, "", "/< returns stored links as FairLinks", (void*) NULL, 1);
   G__memfunc_setup("GetNLinks",879,G__G__BaseDict_998_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "/< returns the number of stored links", (void*) NULL, 1);
   G__memfunc_setup("GetLink",686,G__G__BaseDict_998_0_7, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pos", "/< returns the FairLink at the given position", (void*) NULL, 1);
   G__memfunc_setup("GetLinksWithType",1631,G__G__BaseDict_998_0_8, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - type", "/< Gives you a list of links which contain the given type", (void*) NULL, 1);
   G__memfunc_setup("GetData",666,G__G__BaseDict_998_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'FairLink' - 1 - myLink", "/< Get the TObject the Link is pointing to", (void*) NULL, 0);
   G__memfunc_setup("GetDefaultType",1415,G__G__BaseDict_998_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPersistanceCheck",1919,G__G__BaseDict_998_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "/< Returns the value of PersistanceCheck", (void*) NULL, 0);
   G__memfunc_setup("GetVerbose",1014,G__G__BaseDict_998_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "/< Returns the verbosity level", (void*) NULL, 0);
   G__memfunc_setup("SetDefaultType",1427,G__G__BaseDict_998_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPersistanceCheck",1931,G__G__BaseDict_998_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - check", "/< Controls if a persistance check of a link is done or not", (void*) NULL, 1);
   G__memfunc_setup("SetVerbose",1026,G__G__BaseDict_998_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", "/< Sets the verbosity level", (void*) NULL, 1);
   G__memfunc_setup("SetLinks",813,G__G__BaseDict_998_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairMultiLinkedData' - 0 - links f - 'Float_t' 0 '1.0' mult", "/< Sets the links as vector of FairLink", (void*) NULL, 1);
   G__memfunc_setup("SetLink",698,G__G__BaseDict_998_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'FairLink' - 0 - link g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Sets the Links with a single FairLink", (void*) NULL, 1);
   G__memfunc_setup("AddLinks",778,G__G__BaseDict_998_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairMultiLinkedData' - 0 - links f - 'Float_t' 0 '1.0' mult", "/< Adds a List of FairLinks (FairMultiLinkedData) to fLinks", (void*) NULL, 1);
   G__memfunc_setup("AddLink",663,G__G__BaseDict_998_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'FairLink' - 0 - link g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Adds a FairLink link at the end of fLinks. If multi is kTRUE a link is allowed more than once otherwise it is stored only once", (void*) NULL, 1);
   G__memfunc_setup("InsertLink",1027,G__G__BaseDict_998_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Inserts a link into the list of links without persistance checking", (void*) NULL, 1);
   G__memfunc_setup("InsertHistory",1383,G__G__BaseDict_998_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Adds the FairLinks of the inserted link to the set of links of this object", (void*) NULL, 1);
   G__memfunc_setup("AddAllWeights",1277,G__G__BaseDict_998_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - weight", "/< Adds weight to all Links", (void*) NULL, 1);
   G__memfunc_setup("SetAllWeights",1312,G__G__BaseDict_998_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - weight", "/< Sets a common weight for Links", (void*) NULL, 1);
   G__memfunc_setup("MultiplyAllWeights",1876,G__G__BaseDict_998_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - weight", "/<Multiplies all Links with weight", (void*) NULL, 1);
   G__memfunc_setup("IsLinkInList",1181,G__G__BaseDict_998_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Test if a given link is in fLinks", (void*) NULL, 1);
   G__memfunc_setup("IsLinkInList",1181,G__G__BaseDict_998_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index", "/< Same as IsLinkInList(FairLink) just with type and index given separately", (void*) NULL, 1);
   G__memfunc_setup("LinkPosInList",1299,G__G__BaseDict_998_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< returns position of link in fLinks. If it is not in the list -1 is returned", (void*) NULL, 1);
   G__memfunc_setup("LinkPosInList",1299,G__G__BaseDict_998_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index", "/< Same as LinkPosInList(FairLink)", (void*) NULL, 1);
   G__memfunc_setup("DeleteLink",993,G__G__BaseDict_998_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Deletes a link ouf of fLinks", (void*) NULL, 1);
   G__memfunc_setup("DeleteLink",993,G__G__BaseDict_998_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - index", "/< Deletes a link ouf of fLinks", (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__BaseDict_998_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetLinks",1028,G__G__BaseDict_998_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< Clears fLinks", (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__BaseDict_998_0_33, 117, G__get_linked_tagnum(&G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", "/< Output", (void*) NULL, 0);
   G__memfunc_setup("SimpleAddLinks",1396,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - fileId i - 'Int_t' 0 - evtId "
"i - 'Int_t' 0 - dataType u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - links "
"g - 'Bool_t' 0 - bypass f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_998_0_35, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMultiLinkedData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_998_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_998_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMultiLinkedData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_998_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMultiLinkedData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_998_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_998_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_998_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMultiLinkedData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_998_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_998_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMultiLinkedData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairMultiLinkedData", 1886, G__G__BaseDict_998_0_47, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 1, 1, 1, 0, "u 'FairMultiLinkedData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairMultiLinkedData", 2012, G__G__BaseDict_998_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_998_0_49, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 1, 1, 1, 1, 0, "u 'FairMultiLinkedData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMultiLinkedData_Interface(void) {
   /* FairMultiLinkedData_Interface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface));
   G__memfunc_setup("FairMultiLinkedData_Interface",2894,G__G__BaseDict_1009_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 0, 0, 1, 1, 0, "", "/< Default constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData_Interface",2894,G__G__BaseDict_1009_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 0, 2, 1, 1, 0, 
"u 'FairMultiLinkedData' - 1 - links g - 'Bool_t' 0 'kTRUE' persistanceCheck", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData_Interface",2894,G__G__BaseDict_1009_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 0, 7, 1, 1, 0, 
"u 'TString' - 0 - dataType u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - links "
"i - 'Int_t' 0 '-1' fileId i - 'Int_t' 0 '-1' evtId "
"g - 'Bool_t' 0 'kTRUE' persistanceCheck g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("FairMultiLinkedData_Interface",2894,G__G__BaseDict_1009_0_4, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - dataType u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - links "
"i - 'Int_t' 0 '-1' fileId i - 'Int_t' 0 '-1' evtId "
"g - 'Bool_t' 0 'kTRUE' persistanceCheck g - 'Bool_t' 0 'kFALSE' bypass "
"f - 'Float_t' 0 '1.0' mult", "/< Constructor", (void*) NULL, 0);
   G__memfunc_setup("GetLinks",801,G__G__BaseDict_1009_0_5, 117, G__get_linked_tagnum(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR), G__defined_typename("set<FairLink>"), 0, 0, 1, 1, 8, "", "/< returns stored links as FairLinks", (void*) NULL, 1);
   G__memfunc_setup("GetNLinks",879,G__G__BaseDict_1009_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "/< returns the number of stored links", (void*) NULL, 1);
   G__memfunc_setup("GetLink",686,G__G__BaseDict_1009_0_7, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairLink), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pos", "/< returns the FairLink at the given position", (void*) NULL, 1);
   G__memfunc_setup("GetLinksWithType",1631,G__G__BaseDict_1009_0_8, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - type", "/< returns all FairLinks with the corresponding type", (void*) NULL, 1);
   G__memfunc_setup("SetLinks",813,G__G__BaseDict_1009_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairMultiLinkedData' - 0 - links", "/< Sets the links as vector of FairLink", (void*) NULL, 1);
   G__memfunc_setup("SetLink",698,G__G__BaseDict_1009_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Sets the Links with a single FairLink", (void*) NULL, 1);
   G__memfunc_setup("AddLinks",778,G__G__BaseDict_1009_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'FairMultiLinkedData' - 0 - links f - 'Float_t' 0 '1.0' mult", "/< Adds a List of FairLinks (FairMultiLinkedData_Interface) to fLinks", (void*) NULL, 1);
   G__memfunc_setup("AddLink",663,G__G__BaseDict_1009_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'FairLink' - 0 - link", "/< Adds a FairLink link at the end of fLinks. If multi is kTRUE a link is allowed more than once otherwise", (void*) NULL, 1);
   G__memfunc_setup("GetPointerToData",1598,G__G__BaseDict_1009_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetLinks",1028,G__G__BaseDict_1009_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__BaseDict_1009_0_15, 117, G__get_linked_tagnum(&G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", "/< Output", (void*) NULL, 0);
   G__memfunc_setup("CreateFairMultiLinkedData",2482,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1009_0_17, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMultiLinkedData_Interface::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1009_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData_Interface::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1009_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMultiLinkedData_Interface::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1009_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMultiLinkedData_Interface::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1009_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1009_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData_Interface::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1009_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMultiLinkedData_Interface::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1009_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMultiLinkedData_Interface::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1009_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMultiLinkedData_Interface::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairMultiLinkedData_Interface", 2894, G__G__BaseDict_1009_0_29, (int) ('i'), 
G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 0, 1, 1, 1, 0, "u 'FairMultiLinkedData_Interface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairMultiLinkedData_Interface", 3020, G__G__BaseDict_1009_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1009_0_31, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMultiLinkedData_Interface), -1, 1, 1, 1, 1, 0, "u 'FairMultiLinkedData_Interface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairSource(void) {
   /* FairSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairSource));
   G__memfunc_setup("Init",404,G__G__BaseDict_1036_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ReadEvent",894,G__G__BaseDict_1036_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Close",502,G__G__BaseDict_1036_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__BaseDict_1036_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__BaseDict_1036_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1036_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1036_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1036_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1036_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1036_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1036_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1036_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1036_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairSource", 1137, G__G__BaseDict_1036_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1036_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairSource), -1, 1, 1, 1, 1, 0, "u 'FairSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRunOnline(void) {
   /* FairRunOnline */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline));
   G__memfunc_setup("Instance",821,G__G__BaseDict_1037_0_1, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairRunOnline* (*)())(&FairRunOnline::Instance) ), 0);
   G__memfunc_setup("FairRunOnline",1308,G__G__BaseDict_1037_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunOnline",1308,G__G__BaseDict_1037_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline), -1, 0, 1, 1, 1, 0, "U 'FairSource' - 0 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nev i - 'Int_t' 0 - dummy", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reinit",619,G__G__BaseDict_1037_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunId",802,G__G__BaseDict_1037_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetField",784,G__G__BaseDict_1037_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - ffield", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoFinish",1318,G__G__BaseDict_1037_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSource",925,G__G__BaseDict_1037_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairSource' - 0 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitContainers",1450,G__G__BaseDict_1037_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContainerStatic",1847,G__G__BaseDict_1037_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' tempBool", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerStatic",1835,G__G__BaseDict_1037_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObject",864,G__G__BaseDict_1037_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGenerateHtml",1516,G__G__BaseDict_1037_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"g - 'Bool_t' 0 - flag C - - 10 - histFileName "
"i - 'Int_t' 0 - refreshRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,G__G__BaseDict_1037_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunOnline",1308,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline), -1, 0, 1, 1, 4, 0, "u 'FairRunOnline' - 11 - M", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunOnline), -1, 1, 1, 1, 4, 0, "u 'FairRunOnline' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventLoop",924,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteObjects",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateHtml",1216,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1037_0_23, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRunOnline::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1037_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunOnline::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1037_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRunOnline::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1037_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRunOnline::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1037_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1037_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunOnline::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1037_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunOnline::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1037_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRunOnline::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1037_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRunOnline::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRunOnline", 1434, G__G__BaseDict_1037_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairLinkManager(void) {
   /* FairLinkManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager));
   G__memfunc_setup("FairLinkManager",1483,G__G__BaseDict_1038_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__BaseDict_1038_0_2, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairLinkManager* (*)())(&FairLinkManager::Instance) ), 0);
   G__memfunc_setup("AddIgnoreType",1295,G__G__BaseDict_1038_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", "/< Adds a BranchId (Type) to which links are not included in the link list. Either ignore types or include types can be given.", (void*) NULL, 1);
   G__memfunc_setup("IsIgnoreType",1218,G__G__BaseDict_1038_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddIncludeType",1391,G__G__BaseDict_1038_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", "/< Adds a BranchId (Type) to which links are included in the link list. Either ignore types or include types can be given (XOR).", (void*) NULL, 1);
   G__memfunc_setup("GetIgnoreTypes",1433,G__G__BaseDict_1038_0_6, 117, G__get_linked_tagnum(&G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR), G__defined_typename("set<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLinkManager",1483,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager), -1, 0, 1, 1, 4, 0, "u 'FairLinkManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairLinkManager), -1, 1, 1, 1, 4, 0, "u 'FairLinkManager' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1038_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairLinkManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1038_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLinkManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1038_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairLinkManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1038_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairLinkManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1038_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1038_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLinkManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1038_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLinkManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1038_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLinkManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1038_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLinkManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairLinkManager", 1609, G__G__BaseDict_1038_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairBaseContFact(void) {
   /* FairBaseContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairBaseContFact",1551,G__G__BaseDict_1043_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_FairParSet), -1, 0, 1, 1, 1, 0, "U 'FairContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1043_0_4, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairBaseContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1043_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1043_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairBaseContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1043_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairBaseContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1043_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1043_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1043_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairBaseContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1043_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1043_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairBaseContFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairBaseContFact", 1677, G__G__BaseDict_1043_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairBaseParSet(void) {
   /* FairBaseParSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet));
   G__memfunc_setup("FairBaseParSet",1356,G__G__BaseDict_1155_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"FairBaseParSet\"' name C - - 10 '\"Class for base parameter io\"' title "
"C - - 10 '\"BaseDefaultContext\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetList",997,G__G__BaseDict_1155_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGen",582,G__G__BaseDict_1155_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairPrimaryGenerator' - 0 - gen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamMom",970,G__G__BaseDict_1155_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - BMom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContListStr",1429,G__G__BaseDict_1155_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetList",985,G__G__BaseDict_1155_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPriGen",869,G__G__BaseDict_1155_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairPrimaryGenerator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamMom",958,G__G__BaseDict_1155_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContList",1104,G__G__BaseDict_1155_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1155_0_13, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairBaseParSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1155_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseParSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1155_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairBaseParSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1155_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairBaseParSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1155_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1155_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseParSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1155_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairBaseParSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1155_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairBaseParSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1155_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairBaseParSet::DeclFileLine) ), 0);
   G__memfunc_setup("FairBaseParSet",1356,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet), -1, 0, 1, 1, 4, 0, "u 'FairBaseParSet' - 11 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairBaseParSet), -1, 1, 1, 1, 4, 0, "u 'FairBaseParSet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairBaseParSet", 1482, G__G__BaseDict_1155_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoParSet(void) {
   /* FairGeoParSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet));
   G__memfunc_setup("FairGeoParSet",1260,G__G__BaseDict_1156_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"FairGeoParSet\"' name C - - 10 '\"Class for base parameter io\"' title "
"C - - 10 '\"BaseDefaultContext\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGeoNodes",1088,G__G__BaseDict_1156_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeometry",1144,G__G__BaseDict_1156_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - Geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoNodes",1076,G__G__BaseDict_1156_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeometry",1132,G__G__BaseDict_1156_0_8, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TGeoManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1156_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoParSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1156_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoParSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1156_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoParSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1156_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoParSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1156_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1156_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoParSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1156_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoParSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1156_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoParSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1156_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoParSet::DeclFileLine) ), 0);
   G__memfunc_setup("FairGeoParSet",1260,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet), -1, 0, 1, 1, 4, 0, "u 'FairGeoParSet' - 11 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeoParSet), -1, 1, 1, 1, 4, 0, "u 'FairGeoParSet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoParSet", 1386, G__G__BaseDict_1156_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairVolumeList(void) {
   /* FairVolumeList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList));
   G__memfunc_setup("FairVolumeList",1430,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList), -1, 0, 1, 1, 4, 0, "u 'FairVolumeList' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList), -1, 1, 1, 1, 4, 0, "u 'FairVolumeList' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairVolumeList",1430,G__G__BaseDict_1175_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolumeList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolume",952,G__G__BaseDict_1175_0_4, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolumeId",1125,G__G__BaseDict_1175_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findObject",1016,G__G__BaseDict_1175_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addVolume",929,G__G__BaseDict_1175_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairVolume' - 0 - elem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEntries",1050,G__G__BaseDict_1175_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__G__BaseDict_1175_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1175_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairVolumeList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1175_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolumeList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1175_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairVolumeList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1175_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairVolumeList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1175_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1175_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolumeList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1175_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairVolumeList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1175_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairVolumeList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1175_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairVolumeList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairVolumeList", 1556, G__G__BaseDict_1175_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeaneApplication(void) {
   /* FairGeaneApplication */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication));
   G__memfunc_setup("FairGeaneApplication",2006,G__G__BaseDict_1176_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeaneApplication",2006,G__G__BaseDict_1176_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - Debug", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__G__BaseDict_1176_0_3, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMC",548,G__G__BaseDict_1176_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - setup C - - 10 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetField",784,G__G__BaseDict_1176_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeaneStepping",1322,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "MC Application", (void*) NULL, 1);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Instance",821,G__G__BaseDict_1176_0_8, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairGeaneApplication* (*)())(&FairGeaneApplication::Instance) ), 0);
   G__memfunc_setup("InitGeometry",1248,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GeneratePrimaries",1751,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginPrimary",1225,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreTrack",796,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostTrack",923,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishPrimary",1349,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stepping",842,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StopRun",731,G__G__BaseDict_1176_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1176_0_19, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeaneApplication::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1176_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeaneApplication::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1176_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeaneApplication::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1176_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeaneApplication::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1176_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1176_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeaneApplication::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1176_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeaneApplication::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1176_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeaneApplication::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1176_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeaneApplication::DeclFileLine) ), 0);
   G__memfunc_setup("FairGeaneApplication",2006,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication), -1, 0, 1, 1, 4, 0, "u 'FairGeaneApplication' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairGeaneApplication), -1, 1, 1, 1, 4, 0, "u 'FairGeaneApplication' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGeaneApplication", 2132, G__G__BaseDict_1176_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGenerator(void) {
   /* FairGenerator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator));
   G__memfunc_setup("ReadEvent",894,G__G__BaseDict_1177_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairPrimaryGenerator' - 0 - primGen", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Init",404,G__G__BaseDict_1177_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1177_0_5, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGenerator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1177_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenerator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1177_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGenerator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1177_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGenerator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1177_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1177_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenerator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1177_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGenerator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1177_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGenerator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1177_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGenerator::DeclFileLine) ), 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairGenerator), -1, 1, 1, 1, 4, 0, "u 'FairGenerator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairGenerator", 1447, G__G__BaseDict_1177_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRunIdGenerator(void) {
   /* FairRunIdGenerator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator));
   G__memfunc_setup("get_random_fd",1353,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_random_bytes",1702,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"Y - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_node_id",1137,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "B - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_clock",939,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 3, 1, 4, 0, 
"H - 'uint32_t' 0 - - H - 'uint32_t' 0 - - "
"R - 'uint16_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uuid_generate_time",1903,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "B - 'uuid_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uuid_generate_random",2113,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "B - 'uuid_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uuid_generate",1377,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "B - 'uuid_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uuid_pack",949,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'FairRunIdGenerator::uuid' - 10 - - B - 'uuid_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uuid_unpack",1176,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"B - 'uuid_t' 10 - - U 'FairRunIdGenerator::uuid' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeSpec",1114,G__G__BaseDict_1180_0_10, 117, G__get_linked_tagnum(&G__G__BaseDictLN_timespec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeSpecFromTID",1743,G__G__BaseDict_1180_0_11, 117, G__get_linked_tagnum(&G__G__BaseDictLN_timespec), -1, 0, 1, 1, 1, 0, "h - - 0 - ms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTID",545,G__G__BaseDict_1180_0_12, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRunIdGenerator",1803,G__G__BaseDict_1180_0_13, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("generateId",1016,G__G__BaseDict_1180_0_14, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("FairRunIdGenerator", 1803, G__G__BaseDict_1180_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator), -1, 0, 1, 1, 1, 0, "u 'FairRunIdGenerator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairRunIdGenerator", 1929, G__G__BaseDict_1180_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1180_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRunIdGenerator), -1, 1, 1, 1, 1, 0, "u 'FairRunIdGenerator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRecoEventHeader(void) {
   /* FairRecoEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader));
   G__memfunc_setup("FairRecoEventHeader",1878,G__G__BaseDict_1182_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunId",770,G__G__BaseDict_1182_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTime",1201,G__G__BaseDict_1182_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTimeError",1723,G__G__BaseDict_1182_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__BaseDict_1182_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__BaseDict_1182_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTime",1213,G__G__BaseDict_1182_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - time d - 'Double_t' 0 - terr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdentifier",1327,G__G__BaseDict_1182_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ident", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__G__BaseDict_1182_0_9, 103, -1, -1, 0, 1, 1, 1, 8, "u 'FairRecoEventHeader' - 11 - tempObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>",938,G__G__BaseDict_1182_0_10, 103, -1, -1, 0, 1, 1, 1, 8, "u 'FairRecoEventHeader' - 11 - tempObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator==",998,G__G__BaseDict_1182_0_11, 103, -1, -1, 0, 1, 1, 1, 8, "u 'FairRecoEventHeader' - 11 - tempObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1182_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRecoEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1182_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRecoEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1182_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRecoEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1182_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRecoEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1182_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1182_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRecoEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1182_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRecoEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1182_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRecoEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1182_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRecoEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairRecoEventHeader", 1878, G__G__BaseDict_1182_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader), -1, 0, 1, 1, 1, 0, "u 'FairRecoEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairRecoEventHeader", 2004, G__G__BaseDict_1182_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1182_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRecoEventHeader), -1, 1, 1, 1, 1, 0, "u 'FairRecoEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairEventBuilder(void) {
   /* FairEventBuilder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilder));
   G__memfunc_setup("WriteOutAllDeadTimeData",2259,G__G__BaseDict_1184_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindEvents",1014,G__G__BaseDict_1184_0_4, 117, G__get_linked_tagnum(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR), G__defined_typename("vector<std::pair<double,FairRecoEventHeader*> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 2);
   G__memfunc_setup("StoreEventData",1417,G__G__BaseDict_1184_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairRecoEventHeader' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetIdentifier",1327,G__G__BaseDict_1184_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ident", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__BaseDict_1184_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__BaseDict_1184_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G__G__BaseDict_1184_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Finish",609,G__G__BaseDict_1184_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AllowedTime",1111,G__G__BaseDict_1184_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAllowedTime",1705,G__G__BaseDict_1184_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - td", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBuilderName",1396,G__G__BaseDict_1184_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBuilderName",1384,G__G__BaseDict_1184_0_14, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1184_0_15, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairEventBuilder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1184_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1184_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairEventBuilder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1184_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairEventBuilder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1184_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1184_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1184_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventBuilder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1184_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1184_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventBuilder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairEventBuilder", 1737, G__G__BaseDict_1184_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairEventBuilderManager(void) {
   /* FairEventBuilderManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairEventBuilderManager));
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddEventBuilder",1490,G__G__BaseDict_1190_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairEventBuilder' - 0 - eventBuilder", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillEventVectors",1647,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AnalyzeAndExtractEvents",2359,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - maxEventTimeAllowed", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateAndFillEvent",1776,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'FairRecoEventHeader' - 0 - recoEvent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParContainers",1637,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_InitStatus), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1190_0_12, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairEventBuilderManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1190_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilderManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1190_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairEventBuilderManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1190_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairEventBuilderManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1190_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1190_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilderManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1190_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventBuilderManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1190_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairEventBuilderManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1190_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairEventBuilderManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairEventBuilderManager", 2436, G__G__BaseDict_1190_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairFileInfo(void) {
   /* FairFileInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo));
   G__memfunc_setup("FairFileInfo",1166,G__G__BaseDict_1199_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairFileInfo",1166,G__G__BaseDict_1199_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo), -1, 0, 3, 1, 1, 0, 
"U 'TFile' - 0 - file h - 'UInt_t' 0 - id "
"h - 'UInt_t' 0 - ChId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPath",685,G__G__BaseDict_1199_0_3, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__BaseDict_1199_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__BaseDict_1199_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrderInChain",1462,G__G__BaseDict_1199_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPath",697,G__G__BaseDict_1199_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSize",711,G__G__BaseDict_1199_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdentifier",1327,G__G__BaseDict_1199_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrderInChain",1474,G__G__BaseDict_1199_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairFileInfo",1166,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo), -1, 0, 1, 1, 4, 0, "u 'FairFileInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairFileInfo), -1, 1, 1, 1, 4, 0, "u 'FairFileInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1199_0_14, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairFileInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1199_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1199_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairFileInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1199_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairFileInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1199_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1199_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1199_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFileInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1199_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFileInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1199_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFileInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairFileInfo", 1292, G__G__BaseDict_1199_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairHit(void) {
   /* FairHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairHit));
   G__memfunc_setup("FairHit",679,G__G__BaseDict_1200_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairHit",679,G__G__BaseDict_1200_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairHit), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - detID u 'TVector3' - 1 - pos "
"u 'TVector3' - 1 - dpos i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDx",476,G__G__BaseDict_1200_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDy",477,G__G__BaseDict_1200_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDz",478,G__G__BaseDict_1200_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefIndex",1077,G__G__BaseDict_1200_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionError",1375,G__G__BaseDict_1200_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - dpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorID",1255,G__G__BaseDict_1200_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__BaseDict_1200_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__BaseDict_1200_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__BaseDict_1200_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Position",853,G__G__BaseDict_1200_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDx",488,G__G__BaseDict_1200_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDy",489,G__G__BaseDict_1200_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDz",490,G__G__BaseDict_1200_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDxyz",731,G__G__BaseDict_1200_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - dx d - 'Double_t' 0 - dy "
"d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPositionError",1675,G__G__BaseDict_1200_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - dpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRefIndex",1089,G__G__BaseDict_1200_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorID",1267,G__G__BaseDict_1200_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - detID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__G__BaseDict_1200_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__G__BaseDict_1200_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__BaseDict_1200_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__G__BaseDict_1200_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition",1153,G__G__BaseDict_1200_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1200_0_26, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1200_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1200_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1200_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1200_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1200_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1200_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1200_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1200_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairHit", 679, G__G__BaseDict_1200_0_38, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairHit), -1, 0, 1, 1, 1, 0, "u 'FairHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairHit", 805, G__G__BaseDict_1200_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1200_0_40, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairHit), -1, 1, 1, 1, 1, 0, "u 'FairHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMCPoint(void) {
   /* FairMCPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint));
   G__memfunc_setup("FairMCPoint",1052,G__G__BaseDict_1201_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMCPoint",1052,G__G__BaseDict_1201_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint), -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss h - 'UInt_t' 0 '0' EventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventID",943,G__G__BaseDict_1201_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "/ event identifier", (void*) NULL, 0);
   G__memfunc_setup("GetTrackID",930,G__G__BaseDict_1201_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__G__BaseDict_1201_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__G__BaseDict_1201_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__G__BaseDict_1201_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__BaseDict_1201_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLength",898,G__G__BaseDict_1201_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyLoss",1323,G__G__BaseDict_1201_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Momentum",850,G__G__BaseDict_1201_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorID",1255,G__G__BaseDict_1201_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__BaseDict_1201_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__BaseDict_1201_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__BaseDict_1201_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Position",853,G__G__BaseDict_1201_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventID",955,G__G__BaseDict_1201_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackID",942,G__G__BaseDict_1201_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime",699,G__G__BaseDict_1201_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLength",910,G__G__BaseDict_1201_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergyLoss",1335,G__G__BaseDict_1201_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - eLoss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__G__BaseDict_1201_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorID",1267,G__G__BaseDict_1201_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - detID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__G__BaseDict_1201_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__G__BaseDict_1201_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__BaseDict_1201_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__G__BaseDict_1201_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition",1153,G__G__BaseDict_1201_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1201_0_30, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMCPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1201_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1201_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMCPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1201_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMCPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1201_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1201_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1201_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1201_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMCPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1201_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMCPoint::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairMCPoint", 1052, G__G__BaseDict_1201_0_42, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint), -1, 0, 1, 1, 1, 0, "u 'FairMCPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairMCPoint", 1178, G__G__BaseDict_1201_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1201_0_44, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMCPoint), -1, 1, 1, 1, 1, 0, "u 'FairMCPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRadLenPoint(void) {
   /* FairRadLenPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint));
   G__memfunc_setup("FairRadLenPoint",1474,G__G__BaseDict_1225_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRadLenPoint",1474,G__G__BaseDict_1225_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint), -1, 0, 13, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss u 'TVector3' - 0 - posOut "
"u 'TVector3' - 0 - momOut f - 'Float_t' 0 - fA "
"f - 'Float_t' 0 - fZ f - 'Float_t' 0 - fDensity "
"f - 'Float_t' 0 - fRadLen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__BaseDict_1225_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZm",487,G__G__BaseDict_1225_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRadLength",1177,G__G__BaseDict_1225_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDensity",1024,G__G__BaseDict_1225_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetA",365,G__G__BaseDict_1225_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZm",499,G__G__BaseDict_1225_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadLength",1189,G__G__BaseDict_1225_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDensity",1036,G__G__BaseDict_1225_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Density", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXOut",688,G__G__BaseDict_1225_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYOut",689,G__G__BaseDict_1225_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZOut",690,G__G__BaseDict_1225_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPxOut",800,G__G__BaseDict_1225_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPyOut",801,G__G__BaseDict_1225_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPzOut",802,G__G__BaseDict_1225_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__G__BaseDict_1225_0_18, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionOut",1453,G__G__BaseDict_1225_0_19, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionOut",1165,G__G__BaseDict_1225_0_20, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MomentumOut",1162,G__G__BaseDict_1225_0_21, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1225_0_22, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRadLenPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1225_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1225_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRadLenPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1225_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRadLenPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1225_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1225_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1225_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadLenPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1225_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadLenPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1225_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadLenPoint::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairRadLenPoint", 1474, G__G__BaseDict_1225_0_34, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint), -1, 0, 1, 1, 1, 0, "u 'FairRadLenPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairRadLenPoint", 1600, G__G__BaseDict_1225_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1225_0_36, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRadLenPoint), -1, 1, 1, 1, 1, 0, "u 'FairRadLenPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRadMapPoint(void) {
   /* FairRadMapPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint));
   G__memfunc_setup("FairRadMapPoint",1473,G__G__BaseDict_1226_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRadMapPoint",1473,G__G__BaseDict_1226_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint), -1, 0, 17, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss u 'TVector3' - 0 - posOut "
"u 'TVector3' - 0 - momOut f - 'Float_t' 0 - fA "
"f - 'Float_t' 0 - fZ f - 'Float_t' 0 - fDensity "
"d - 'Double_t' 0 - fVolMass d - 'Double_t' 0 - fStep "
"d - 'Double_t' 0 - fDose d - 'Double_t' 0 - fDoseSL "
"i - 'Int_t' 0 - fPdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__BaseDict_1226_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZm",487,G__G__BaseDict_1226_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__BaseDict_1226_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDensity",1024,G__G__BaseDict_1226_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetA",365,G__G__BaseDict_1226_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZm",499,G__G__BaseDict_1226_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__G__BaseDict_1226_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vmass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDensity",1036,G__G__BaseDict_1226_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Density", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPdg",571,G__G__BaseDict_1226_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXOut",688,G__G__BaseDict_1226_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYOut",689,G__G__BaseDict_1226_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZOut",690,G__G__BaseDict_1226_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPxOut",800,G__G__BaseDict_1226_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPyOut",801,G__G__BaseDict_1226_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPzOut",802,G__G__BaseDict_1226_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDose",683,G__G__BaseDict_1226_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDoseSL",842,G__G__BaseDict_1226_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__G__BaseDict_1226_0_21, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionOut",1453,G__G__BaseDict_1226_0_22, 117, G__get_linked_tagnum(&G__G__BaseDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionOut",1165,G__G__BaseDict_1226_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MomentumOut",1162,G__G__BaseDict_1226_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1226_0_25, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRadMapPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1226_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1226_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRadMapPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1226_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRadMapPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1226_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1226_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1226_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadMapPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1226_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRadMapPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1226_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRadMapPoint::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FairRadMapPoint", 1473, G__G__BaseDict_1226_0_37, (int) ('i'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint), -1, 0, 1, 1, 1, 0, "u 'FairRadMapPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairRadMapPoint", 1599, G__G__BaseDict_1226_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1226_0_39, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRadMapPoint), -1, 1, 1, 1, 1, 0, "u 'FairRadMapPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTrackParam(void) {
   /* FairTrackParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam));
   G__memfunc_setup("FairTrackParam",1384,G__G__BaseDict_1227_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTrackParam",1384,G__G__BaseDict_1227_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam), -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 0 - tx "
"d - 'Double_t' 0 - ty d - 'Double_t' 0 - qp "
"u 'TMatrixTSym<float>' 'TMatrixFSym' 11 - covMat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTrackParam",1384,G__G__BaseDict_1227_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam), -1, 0, 1, 1, 1, 0, "u 'FairTrackParam' - 11 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,G__G__BaseDict_1227_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__BaseDict_1227_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__BaseDict_1227_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTx",492,G__G__BaseDict_1227_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTy",493,G__G__BaseDict_1227_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQp",481,G__G__BaseDict_1227_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Position",853,G__G__BaseDict_1227_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Momentum",850,G__G__BaseDict_1227_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CovMatrix",925,G__G__BaseDict_1227_0_13, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CovMatrix",925,G__G__BaseDict_1227_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TMatrixTSym<float>' 'TMatrixFSym' 1 - covMat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariance",1307,G__G__BaseDict_1227_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__G__BaseDict_1227_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__G__BaseDict_1227_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__BaseDict_1227_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTx",504,G__G__BaseDict_1227_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTy",505,G__G__BaseDict_1227_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQp",493,G__G__BaseDict_1227_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - qp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition",1153,G__G__BaseDict_1227_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovMatrix",1225,G__G__BaseDict_1227_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovMatrix",1225,G__G__BaseDict_1227_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixTSym<float>' 'TMatrixFSym' 11 - covMat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovariance",1319,G__G__BaseDict_1227_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__BaseDict_1227_0_26, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairTrackParam), -1, 1, 1, 1, 1, 0, "u 'FairTrackParam' - 11 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1227_0_27, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTrackParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1227_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrackParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1227_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTrackParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1227_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTrackParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1227_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1227_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrackParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1227_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTrackParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1227_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTrackParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1227_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTrackParam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairTrackParam", 1510, G__G__BaseDict_1227_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairFieldFactory(void) {
   /* FairFieldFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory));
   G__memfunc_setup("Instance",821,G__G__BaseDict_1230_0_1, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (FairFieldFactory* (*)())(&FairFieldFactory::Instance) ), 0);
   G__memfunc_setup("FairFieldFactory",1598,G__G__BaseDict_1230_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createFairField",1498,G__G__BaseDict_1230_0_3, 85, G__get_linked_tagnum(&G__G__BaseDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParm",700,G__G__BaseDict_1230_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__BaseDict_1230_0_5, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairFieldFactory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1230_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFieldFactory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1230_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairFieldFactory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1230_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairFieldFactory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__BaseDict_1230_0_9, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__BaseDict_1230_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__BaseDict_1230_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1230_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1230_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFieldFactory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1230_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFieldFactory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1230_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairFieldFactory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1230_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairFieldFactory::DeclFileLine) ), 0);
   G__memfunc_setup("FairFieldFactory",1598,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory), -1, 0, 1, 1, 4, 0, "u 'FairFieldFactory' - 11 - M", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairFieldFactory), -1, 1, 1, 1, 4, 0, "u 'FairFieldFactory' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FairFieldFactory", 1724, G__G__BaseDict_1230_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRKPropagator(void) {
   /* FairRKPropagator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator));
   G__memfunc_setup("FairRKPropagator",1598,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator), -1, 0, 1, 1, 4, 0, "u 'FairRKPropagator' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator), -1, 1, 1, 1, 4, 0, "u 'FairRKPropagator' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("Step",412,G__G__BaseDict_1231_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - Charge D - 'Double_t' 0 - vecRKIn "
"D - 'Double_t' 0 - vecOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OneStepRungeKutta",1736,G__G__BaseDict_1231_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - charge d - 'Double_t' 0 - step "
"D - 'Double_t' 0 - vect D - 'Double_t' 0 - vout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRKPropagator",1598,G__G__BaseDict_1231_0_5, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRKPropagator), -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Propagat",830,G__G__BaseDict_1231_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - Charge D - 'Double_t' 0 - vecRKIn "
"D - 'Double_t' 0 - Pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagatToPlane",1521,G__G__BaseDict_1231_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - Charge D - 'Double_t' 0 - vecRKIn "
"D - 'Double_t' 0 - vec1 D - 'Double_t' 0 - vec2 "
"D - 'Double_t' 0 - vec3 D - 'Double_t' 0 - vecOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1231_0_8, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRKPropagator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1231_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRKPropagator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1231_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRKPropagator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1231_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRKPropagator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1231_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1231_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRKPropagator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1231_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRKPropagator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1231_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRKPropagator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1231_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRKPropagator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRKPropagator", 1724, G__G__BaseDict_1231_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairUnpack(void) {
   /* FairUnpack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairUnpack));
   G__memfunc_setup("Init",404,G__G__BaseDict_1242_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DoUnpack",789,G__G__BaseDict_1242_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - data i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__BaseDict_1242_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetType",706,G__G__BaseDict_1242_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSubType",1004,G__G__BaseDict_1242_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcId",865,G__G__BaseDict_1242_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSubCrate",1081,G__G__BaseDict_1242_0_8, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetControl",1025,G__G__BaseDict_1242_0_9, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Register",837,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__BaseDict_1242_0_11, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairUnpack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1242_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairUnpack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1242_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairUnpack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1242_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairUnpack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1242_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1242_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairUnpack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1242_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairUnpack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1242_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairUnpack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1242_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairUnpack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairUnpack", 1122, G__G__BaseDict_1242_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1242_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairUnpack), -1, 1, 1, 1, 1, 0, "u 'FairUnpack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMbsSource(void) {
   /* FairMbsSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource));
   G__memfunc_setup("AddUnpacker",1090,G__G__BaseDict_1243_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairUnpack' - 0 - unpacker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnpackers",1228,G__G__BaseDict_1243_0_4, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TObjArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvent",894,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Close",502,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unpack",610,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 2, 0, 
"I - 'Int_t' 0 - data i - 'Int_t' 0 - size "
"s - 'Short_t' 0 - type s - 'Short_t' 0 - subType "
"s - 'Short_t' 0 - procId s - 'Short_t' 0 - subCrate "
"s - 'Short_t' 0 - control", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1243_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMbsSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1243_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMbsSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1243_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMbsSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1243_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMbsSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1243_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1243_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMbsSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1243_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMbsSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1243_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMbsSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1243_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMbsSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairMbsSource", 1427, G__G__BaseDict_1243_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1243_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairMbsSource), -1, 1, 1, 1, 1, 0, "u 'FairMbsSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairLmdSource(void) {
   /* FairLmdSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource));
   G__memfunc_setup("FairLmdSource",1296,G__G__BaseDict_1244_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairLmdSource",1296,G__G__BaseDict_1244_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource), -1, 0, 1, 1, 1, 0, "u 'FairLmdSource' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,G__G__BaseDict_1244_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentFile",1411,G__G__BaseDict_1244_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileNames",1172,G__G__BaseDict_1244_0_5, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvent",894,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Close",502,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenNextFile",1201,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'TString' - 0 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1244_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairLmdSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1244_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLmdSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1244_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairLmdSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1244_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairLmdSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1244_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1244_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLmdSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1244_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLmdSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1244_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairLmdSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1244_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairLmdSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairLmdSource", 1422, G__G__BaseDict_1244_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1244_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairLmdSource), -1, 1, 1, 1, 1, 0, "u 'FairLmdSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRevBuffer(void) {
   /* MRevBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer));
   G__memfunc_setup("MRevBuffer",980,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer), -1, 0, 1, 1, 4, 0, "u 'MRevBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer), -1, 1, 1, 1, 4, 0, "u 'MRevBuffer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRevBuffer",980,G__G__BaseDict_1245_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_MRevBuffer), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMode", "constructor", (void*) NULL, 0);
   G__memfunc_setup("RevOpen",703,G__G__BaseDict_1245_0_4, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TSocket), -1, 0, 3, 1, 1, 0, 
"C - - 0 - pNode i - 'Int_t' 0 - iPort "
"i - 'Int_t' 0 - iEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevGetI",662,G__G__BaseDict_1245_0_5, 73, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'TSocket' - 0 - pSocket i - 'Int_t' 0 - iFlush", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevGet",589,G__G__BaseDict_1245_0_6, 85, G__get_linked_tagnum(&G__G__BaseDictLN_REvent), -1, 0, 3, 1, 1, 0, 
"U 'TSocket' - 0 - pSocket i - 'Int_t' 0 - iFlush "
"i - 'Int_t' 0 - iSkip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevStatus",945,G__G__BaseDict_1245_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevBufWait",991,G__G__BaseDict_1245_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iWait", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevBufsize",1029,G__G__BaseDict_1245_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevClose",803,G__G__BaseDict_1245_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TSocket' - 0 - pSocket", "input Socket ptr", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1245_0_11, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRevBuffer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1245_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRevBuffer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1245_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRevBuffer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1245_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRevBuffer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1245_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1245_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRevBuffer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1245_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRevBuffer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1245_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRevBuffer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1245_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRevBuffer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRevBuffer", 1106, G__G__BaseDict_1245_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncREvent(void) {
   /* REvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_REvent));
   G__memfunc_setup("REvent",596,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__BaseDictLN_REvent), -1, 0, 1, 1, 4, 0, "u 'REvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__BaseDictLN_REvent), -1, 1, 1, 1, 4, 0, "u 'REvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("REvent",596,G__G__BaseDict_1246_0_3, 105, G__get_linked_tagnum(&G__G__BaseDictLN_REvent), -1, 0, 0, 1, 1, 0, "", "constructor", (void*) NULL, 0);
   G__memfunc_setup("ReFillHead",944,G__G__BaseDict_1246_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - pHead", "unpack and fill event header", (void*) NULL, 0);
   G__memfunc_setup("ReFillData",952,G__G__BaseDict_1246_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - pData", "unpack and fill event data", (void*) NULL, 0);
   G__memfunc_setup("ReGetNumb",873,G__G__BaseDict_1246_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "get event number", (void*) NULL, 0);
   G__memfunc_setup("ReGetSize",882,G__G__BaseDict_1246_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "get event size", (void*) NULL, 0);
   G__memfunc_setup("ReGetData",849,G__G__BaseDict_1246_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ichan", "get event parameter ichan", (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__BaseDict_1246_0_9, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1246_0_10, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&REvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1246_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&REvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1246_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&REvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1246_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&REvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1246_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1246_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&REvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1246_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&REvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1246_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&REvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1246_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&REvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~REvent", 722, G__G__BaseDict_1246_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairRemoteSource(void) {
   /* FairRemoteSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource));
   G__memfunc_setup("FairRemoteSource",1631,G__G__BaseDict_1247_0_1, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource), -1, 0, 1, 1, 1, 0, "C - - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairRemoteSource",1631,G__G__BaseDict_1247_0_2, 105, G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource), -1, 0, 1, 1, 1, 0, "u 'FairRemoteSource' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvent",894,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Close",502,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNode",678,G__G__BaseDict_1247_0_6, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__BaseDict_1247_0_7, 85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairRemoteSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__BaseDict_1247_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRemoteSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__BaseDict_1247_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairRemoteSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__BaseDict_1247_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairRemoteSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__BaseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__BaseDict_1247_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__BaseDict_1247_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRemoteSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__BaseDict_1247_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRemoteSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__BaseDict_1247_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairRemoteSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__BaseDict_1247_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairRemoteSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairRemoteSource", 1757, G__G__BaseDict_1247_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__BaseDict_1247_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__BaseDictLN_FairRemoteSource), -1, 1, 1, 1, 1, 0, "u 'FairRemoteSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__BaseDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
}

static void G__cpp_setup_global8() {
}

static void G__cpp_setup_global9() {
}

static void G__cpp_setup_global10() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__BaseDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
  G__cpp_setup_global9();
  G__cpp_setup_global10();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__BaseDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__BaseDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR = { "vector<long,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TSelector = { "TSelector" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairLogger = { "FairLogger" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator = { "map<int,int,less<int>,allocator<pair<const int,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR = { "map<long,int,less<long>,allocator<pair<const long,int> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunAnaProof = { "FairRunAnaProof" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TProofOutputFile = { "TProofOutputFile" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairAnaSelector = { "FairAnaSelector" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSymlEfloatgR = { "TMatrixTSym<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMesh = { "FairMesh" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRadGridManager = { "FairRadGridManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRadLenManager = { "FairRadLenManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRadMapManager = { "FairRadMapManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairTimeStamp = { "FairTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRingSorter = { "FairRingSorter" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR = { "vector<FairTimeStamp*,allocator<FairTimeStamp*> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairTimeStamp*,allocator<FairTimeStamp*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR = { "multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_pairlEdoublecOFairTimeStampmUgR = { "pair<double,FairTimeStamp*>" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR = { "vector<multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >,allocator<multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > > > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > >,allocator<multimap<double,FairTimeStamp*,less<double>,allocator<pair<const double,FairTimeStamp*> > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_pairlEintcOdoublegR = { "pair<int,double>" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_BinaryFunctor = { "BinaryFunctor" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairEventHeader = { "FairEventHeader" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairFileHeader = { "FairFileHeader" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairGeoNode = { "FairGeoNode" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairLink = { "FairLink" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMCEventHeader = { "FairMCEventHeader" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairTSBufferFunctional = { "FairTSBufferFunctional" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairWriteoutBuffer = { "FairWriteoutBuffer" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TFolder = { "TFolder" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRootManager = { "FairRootManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR = { "map<TString,TObject*,less<TString>,allocator<pair<const TString,TObject*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR = { "deque<TClonesArray*,allocator<TClonesArray*> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR = { "queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString>,allocator<pair<const TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR = { "map<TString,TClonesArray*,less<TString>,allocator<pair<const TString,TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR = { "map<TString,FairTSBufferFunctional*,less<TString>,allocator<pair<const TString,FairTSBufferFunctional*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR = { "map<TString,FairWriteoutBuffer*,less<TString>,allocator<pair<const TString,FairWriteoutBuffer*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR = { "map<int,TBranch*,less<int>,allocator<pair<const int,TBranch*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgRcLcLiterator = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR = { "map<TString,TChain*,less<TString>,allocator<pair<const TString,TChain*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR = { "map<TString,list<TString,allocator<TString> >*,less<TString>,allocator<pair<const TString,list<TString,allocator<TString> >*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR = { "multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString>,allocator<pair<const TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR = { "map<unsigned int,TChain*,less<unsigned int>,allocator<pair<const unsigned int,TChain*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR = { "map<unsigned int,double,less<unsigned int>,allocator<pair<const unsigned int,double> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR = { "map<unsigned int,unsigned int,less<unsigned int>,allocator<pair<const unsigned int,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_InitStatus = { "InitStatus" , 101 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairTask = { "FairTask" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRingSorterTask = { "FairRingSorterTask" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRuntimeDb = { "FairRuntimeDb" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairField = { "FairField" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRun = { "FairRun" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_CpuInfo_t = { "CpuInfo_t" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_MemInfo_t = { "MemInfo_t" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_ProcInfo_t = { "ProcInfo_t" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_timespec = { "timespec" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunInfo = { "FairRunInfo" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunAna = { "FairRunAna" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TProof = { "TProof" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR = { "map<TString,TProof::MD5Mod_t,less<TString>,allocator<pair<const TString,TProof::MD5Mod_t> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairIon = { "FairIon" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVirtualMCApplication = { "TVirtualMCApplication" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairDetector = { "FairDetector" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairGenericStack = { "FairGenericStack" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairPrimaryGenerator = { "FairPrimaryGenerator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairTrajFilter = { "FairTrajFilter" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairVolume = { "FairVolume" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMCApplication = { "FairMCApplication" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR = { "multimap<int,FairVolume*,less<int>,allocator<pair<const int,FairVolume*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgRcLcLiterator = { "multimap<int,FairVolume*,less<int>,allocator<pair<const int,FairVolume*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMCParticleType = { "TMCParticleType" , 101 , -1 };
G__linked_taginfo G__G__BaseDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TParticle = { "TParticle" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairParticle = { "FairParticle" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairModule = { "FairModule" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunSim = { "FairRunSim" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR = { "set<int,less<int>,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMultiLinkedData = { "FairMultiLinkedData" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR = { "set<FairLink,less<FairLink>,allocator<FairLink> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMultiLinkedData_Interface = { "FairMultiLinkedData_Interface" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TGeoTrack = { "TGeoTrack" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR = { "vector<pair<double,FairTimeStamp*>,allocator<pair<double,FairTimeStamp*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,FairTimeStamp*>,allocator<pair<double,FairTimeStamp*> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR = { "multimap<double,pair<double,FairTimeStamp*>,less<double>,allocator<pair<const double,pair<double,FairTimeStamp*> > > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairSource = { "FairSource" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunOnline = { "FairRunOnline" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairLinkManager = { "FairLinkManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairContainer = { "FairContainer" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairContFact = { "FairContFact" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairBaseContFact = { "FairBaseContFact" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairDbObjTableMap = { "FairDbObjTableMap" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairParamList = { "FairParamList" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairParGenericSet = { "FairParGenericSet" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TGeoMatrix = { "TGeoMatrix" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TGeoNode = { "TGeoNode" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR = { "vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR = { "map<long,TGeoNavigatorArray*,less<long>,allocator<pair<const long,TGeoNavigatorArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairBaseParSet = { "FairBaseParSet" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairGeoParSet = { "FairGeoParSet" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairVolumeList = { "FairVolumeList" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairGeaneApplication = { "FairGeaneApplication" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairGenerator = { "FairGenerator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TMCProcess = { "TMCProcess" , 101 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVirtualMCStack = { "TVirtualMCStack" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunIdGenerator = { "FairRunIdGenerator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRunIdGeneratorcLcLuuid = { "FairRunIdGenerator::uuid" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRecoEventHeader = { "FairRecoEventHeader" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairEventBuilder = { "FairEventBuilder" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR = { "vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairEventBuilderManager = { "FairEventBuilderManager" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR = { "vector<FairEventBuilder*,allocator<FairEventBuilder*> >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<FairEventBuilder*,allocator<FairEventBuilder*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR = { "vector<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > >,allocator<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > > > >" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > >,allocator<vector<pair<double,FairRecoEventHeader*>,allocator<pair<double,FairRecoEventHeader*> > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairFileInfo = { "FairFileInfo" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairHit = { "FairHit" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMCPoint = { "FairMCPoint" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRadLenPoint = { "FairRadLenPoint" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRadMapPoint = { "FairRadMapPoint" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairTrackParam = { "FairTrackParam" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_TVirtualMagField = { "TVirtualMagField" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairFieldFactory = { "FairFieldFactory" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRKPropagator = { "FairRKPropagator" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_s_ve10_1 = { "s_ve10_1" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_s_ves10_1 = { "s_ves10_1" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_s_bufhe = { "s_bufhe" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_s_evt_channel = { "s_evt_channel" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_s_filhe = { "s_filhe" , 115 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairUnpack = { "FairUnpack" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairMbsSource = { "FairMbsSource" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairLmdSource = { "FairLmdSource" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_MRevBuffer = { "MRevBuffer" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_REvent = { "REvent" , 99 , -1 };
G__linked_taginfo G__G__BaseDictLN_FairRemoteSource = { "FairRemoteSource" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__BaseDict() {
  G__G__BaseDictLN_TClass.tagnum = -1 ;
  G__G__BaseDictLN_TBuffer.tagnum = -1 ;
  G__G__BaseDictLN_TMemberInspector.tagnum = -1 ;
  G__G__BaseDictLN_TObject.tagnum = -1 ;
  G__G__BaseDictLN_TNamed.tagnum = -1 ;
  G__G__BaseDictLN_TCollection.tagnum = -1 ;
  G__G__BaseDictLN_TString.tagnum = -1 ;
  G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_string.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_TList.tagnum = -1 ;
  G__G__BaseDictLN_TObjArray.tagnum = -1 ;
  G__G__BaseDictLN_TClonesArray.tagnum = -1 ;
  G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_TIterator.tagnum = -1 ;
  G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__BaseDictLN_TTree.tagnum = -1 ;
  G__G__BaseDictLN_TSelector.tagnum = -1 ;
  G__G__BaseDictLN_FairLogger.tagnum = -1 ;
  G__G__BaseDictLN_TFile.tagnum = -1 ;
  G__G__BaseDictLN_TBranch.tagnum = -1 ;
  G__G__BaseDictLN_TArrayI.tagnum = -1 ;
  G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__BaseDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_FairRunAnaProof.tagnum = -1 ;
  G__G__BaseDictLN_TProofOutputFile.tagnum = -1 ;
  G__G__BaseDictLN_FairAnaSelector.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__BaseDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__BaseDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSymlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__BaseDictLN_TVector3.tagnum = -1 ;
  G__G__BaseDictLN_TLorentzVector.tagnum = -1 ;
  G__G__BaseDictLN_FairMesh.tagnum = -1 ;
  G__G__BaseDictLN_FairRadGridManager.tagnum = -1 ;
  G__G__BaseDictLN_FairRadLenManager.tagnum = -1 ;
  G__G__BaseDictLN_TMap.tagnum = -1 ;
  G__G__BaseDictLN_FairRadMapManager.tagnum = -1 ;
  G__G__BaseDictLN_FairTimeStamp.tagnum = -1 ;
  G__G__BaseDictLN_FairRingSorter.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_pairlEdoublecOFairTimeStampmUgR.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_pairlEintcOdoublegR.tagnum = -1 ;
  G__G__BaseDictLN_TTask.tagnum = -1 ;
  G__G__BaseDictLN_TChain.tagnum = -1 ;
  G__G__BaseDictLN_TStopwatch.tagnum = -1 ;
  G__G__BaseDictLN_BinaryFunctor.tagnum = -1 ;
  G__G__BaseDictLN_FairEventHeader.tagnum = -1 ;
  G__G__BaseDictLN_FairFileHeader.tagnum = -1 ;
  G__G__BaseDictLN_FairGeoNode.tagnum = -1 ;
  G__G__BaseDictLN_FairLink.tagnum = -1 ;
  G__G__BaseDictLN_FairMCEventHeader.tagnum = -1 ;
  G__G__BaseDictLN_FairTSBufferFunctional.tagnum = -1 ;
  G__G__BaseDictLN_FairWriteoutBuffer.tagnum = -1 ;
  G__G__BaseDictLN_TF1.tagnum = -1 ;
  G__G__BaseDictLN_TFolder.tagnum = -1 ;
  G__G__BaseDictLN_FairRootManager.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_InitStatus.tagnum = -1 ;
  G__G__BaseDictLN_FairTask.tagnum = -1 ;
  G__G__BaseDictLN_FairRingSorterTask.tagnum = -1 ;
  G__G__BaseDictLN_FairRuntimeDb.tagnum = -1 ;
  G__G__BaseDictLN_FairField.tagnum = -1 ;
  G__G__BaseDictLN_FairRun.tagnum = -1 ;
  G__G__BaseDictLN_TSocket.tagnum = -1 ;
  G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_CpuInfo_t.tagnum = -1 ;
  G__G__BaseDictLN_MemInfo_t.tagnum = -1 ;
  G__G__BaseDictLN_ProcInfo_t.tagnum = -1 ;
  G__G__BaseDictLN_timespec.tagnum = -1 ;
  G__G__BaseDictLN_TTimeStamp.tagnum = -1 ;
  G__G__BaseDictLN_FairRunInfo.tagnum = -1 ;
  G__G__BaseDictLN_FairRunAna.tagnum = -1 ;
  G__G__BaseDictLN_TProof.tagnum = -1 ;
  G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_FairIon.tagnum = -1 ;
  G__G__BaseDictLN_TVirtualMCApplication.tagnum = -1 ;
  G__G__BaseDictLN_FairDetector.tagnum = -1 ;
  G__G__BaseDictLN_FairGenericStack.tagnum = -1 ;
  G__G__BaseDictLN_FairPrimaryGenerator.tagnum = -1 ;
  G__G__BaseDictLN_FairTrajFilter.tagnum = -1 ;
  G__G__BaseDictLN_FairVolume.tagnum = -1 ;
  G__G__BaseDictLN_TRefArray.tagnum = -1 ;
  G__G__BaseDictLN_FairMCApplication.tagnum = -1 ;
  G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__BaseDictLN_TMCParticleType.tagnum = -1 ;
  G__G__BaseDictLN_TRef.tagnum = -1 ;
  G__G__BaseDictLN_TParticle.tagnum = -1 ;
  G__G__BaseDictLN_FairParticle.tagnum = -1 ;
  G__G__BaseDictLN_FairModule.tagnum = -1 ;
  G__G__BaseDictLN_FairRunSim.tagnum = -1 ;
  G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_FairMultiLinkedData.tagnum = -1 ;
  G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_FairMultiLinkedData_Interface.tagnum = -1 ;
  G__G__BaseDictLN_TGeoTrack.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_FairSource.tagnum = -1 ;
  G__G__BaseDictLN_FairRunOnline.tagnum = -1 ;
  G__G__BaseDictLN_FairLinkManager.tagnum = -1 ;
  G__G__BaseDictLN_FairParSet.tagnum = -1 ;
  G__G__BaseDictLN_FairContainer.tagnum = -1 ;
  G__G__BaseDictLN_FairContFact.tagnum = -1 ;
  G__G__BaseDictLN_FairBaseContFact.tagnum = -1 ;
  G__G__BaseDictLN_FairDbObjTableMap.tagnum = -1 ;
  G__G__BaseDictLN_FairParamList.tagnum = -1 ;
  G__G__BaseDictLN_FairParGenericSet.tagnum = -1 ;
  G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_TGeoMatrix.tagnum = -1 ;
  G__G__BaseDictLN_TGeoVolume.tagnum = -1 ;
  G__G__BaseDictLN_TGeoNode.tagnum = -1 ;
  G__G__BaseDictLN_TGeoManager.tagnum = -1 ;
  G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_FairBaseParSet.tagnum = -1 ;
  G__G__BaseDictLN_FairGeoParSet.tagnum = -1 ;
  G__G__BaseDictLN_FairVolumeList.tagnum = -1 ;
  G__G__BaseDictLN_FairGeaneApplication.tagnum = -1 ;
  G__G__BaseDictLN_FairGenerator.tagnum = -1 ;
  G__G__BaseDictLN_TMCProcess.tagnum = -1 ;
  G__G__BaseDictLN_TVirtualMCStack.tagnum = -1 ;
  G__G__BaseDictLN_FairRunIdGenerator.tagnum = -1 ;
  G__G__BaseDictLN_FairRunIdGeneratorcLcLuuid.tagnum = -1 ;
  G__G__BaseDictLN_FairRecoEventHeader.tagnum = -1 ;
  G__G__BaseDictLN_FairEventBuilder.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_FairEventBuilderManager.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__BaseDictLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__BaseDictLN_FairFileInfo.tagnum = -1 ;
  G__G__BaseDictLN_FairHit.tagnum = -1 ;
  G__G__BaseDictLN_FairMCPoint.tagnum = -1 ;
  G__G__BaseDictLN_TH2D.tagnum = -1 ;
  G__G__BaseDictLN_FairRadLenPoint.tagnum = -1 ;
  G__G__BaseDictLN_FairRadMapPoint.tagnum = -1 ;
  G__G__BaseDictLN_FairTrackParam.tagnum = -1 ;
  G__G__BaseDictLN_TVirtualMagField.tagnum = -1 ;
  G__G__BaseDictLN_FairFieldFactory.tagnum = -1 ;
  G__G__BaseDictLN_FairRKPropagator.tagnum = -1 ;
  G__G__BaseDictLN_s_ve10_1.tagnum = -1 ;
  G__G__BaseDictLN_s_ves10_1.tagnum = -1 ;
  G__G__BaseDictLN_s_bufhe.tagnum = -1 ;
  G__G__BaseDictLN_s_evt_channel.tagnum = -1 ;
  G__G__BaseDictLN_s_filhe.tagnum = -1 ;
  G__G__BaseDictLN_FairUnpack.tagnum = -1 ;
  G__G__BaseDictLN_FairMbsSource.tagnum = -1 ;
  G__G__BaseDictLN_FairLmdSource.tagnum = -1 ;
  G__G__BaseDictLN_MRevBuffer.tagnum = -1 ;
  G__G__BaseDictLN_REvent.tagnum = -1 ;
  G__G__BaseDictLN_FairRemoteSource.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__BaseDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlElongcOallocatorlElonggRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_string);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TList);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TSelector);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairLogger);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TBranch);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunAnaProof),sizeof(FairRunAnaProof),-1,62720,(char*)NULL,G__setup_memvarFairRunAnaProof,G__setup_memfuncFairRunAnaProof);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TProofOutputFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairAnaSelector),sizeof(FairAnaSelector),-1,294656,(char*)NULL,G__setup_memvarFairAnaSelector,G__setup_memfuncFairAnaSelector);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSymlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMesh),sizeof(FairMesh),-1,327424,(char*)NULL,G__setup_memvarFairMesh,G__setup_memfuncFairMesh);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRadGridManager),sizeof(FairRadGridManager),-1,265984,(char*)NULL,G__setup_memvarFairRadGridManager,G__setup_memfuncFairRadGridManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRadLenManager),sizeof(FairRadLenManager),-1,265984,(char*)NULL,G__setup_memvarFairRadLenManager,G__setup_memfuncFairRadLenManager);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRadMapManager),sizeof(FairRadMapManager),-1,265984,(char*)NULL,G__setup_memvarFairRadMapManager,G__setup_memfuncFairRadMapManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairTimeStamp),sizeof(FairTimeStamp),-1,324864,(char*)NULL,G__setup_memvarFairTimeStamp,G__setup_memfuncFairTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRingSorter),sizeof(FairRingSorter),-1,29952,(char*)NULL,G__setup_memvarFairRingSorter,G__setup_memfuncFairRingSorter);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairTimeStampmUcOallocatorlEFairTimeStampmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_multimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_pairlEdoublecOFairTimeStampmUgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRcOallocatorlEmultimaplEdoublecOFairTimeStampmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOFairTimeStampmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_pairlEintcOdoublegR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TChain);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TStopwatch);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_BinaryFunctor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairEventHeader),sizeof(FairEventHeader),-1,62720,(char*)NULL,G__setup_memvarFairEventHeader,G__setup_memfuncFairEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairFileHeader),sizeof(FairFileHeader),-1,327424,(char*)NULL,G__setup_memvarFairFileHeader,G__setup_memfuncFairFileHeader);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairGeoNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairLink),sizeof(FairLink),-1,324864,(char*)NULL,G__setup_memvarFairLink,G__setup_memfuncFairLink);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMCEventHeader),sizeof(FairMCEventHeader),-1,324864,(char*)NULL,G__setup_memvarFairMCEventHeader,G__setup_memfuncFairMCEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairTSBufferFunctional),sizeof(FairTSBufferFunctional),-1,327168,(char*)NULL,G__setup_memvarFairTSBufferFunctional,G__setup_memfuncFairTSBufferFunctional);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairWriteoutBuffer),sizeof(FairWriteoutBuffer),-1,65284,(char*)NULL,G__setup_memvarFairWriteoutBuffer,G__setup_memfuncFairWriteoutBuffer);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TFolder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRootManager),sizeof(FairRootManager),-1,294656,"Root IO manager",G__setup_memvarFairRootManager,G__setup_memfuncFairRootManager);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEunsignedsPintcOTChainmUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTChainmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_InitStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairTask),sizeof(FairTask),-1,327424,(char*)NULL,G__setup_memvarFairTask,G__setup_memfuncFairTask);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRingSorterTask),sizeof(FairRingSorterTask),-1,65280,(char*)NULL,G__setup_memvarFairRingSorterTask,G__setup_memfuncFairRingSorterTask);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRuntimeDb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairField),sizeof(FairField),-1,327424,(char*)NULL,G__setup_memvarFairField,G__setup_memfuncFairField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRun),sizeof(FairRun),-1,327427,(char*)NULL,G__setup_memvarFairRun,G__setup_memfuncFairRun);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TSocket);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_CpuInfo_t);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_MemInfo_t);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_ProcInfo_t);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_timespec);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunInfo),sizeof(FairRunInfo),-1,294656,(char*)NULL,G__setup_memvarFairRunInfo,G__setup_memfuncFairRunInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunAna),sizeof(FairRunAna),-1,65280,(char*)NULL,G__setup_memvarFairRunAna,G__setup_memfuncFairRunAna);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TProof);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplETStringcOTProofcLcLMD5Mod_tcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTProofcLcLMD5Mod_tgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairIon),sizeof(FairIon),-1,327424,(char*)NULL,G__setup_memvarFairIon,G__setup_memfuncFairIon);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVirtualMCApplication);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairDetector),sizeof(FairDetector),-1,327428,(char*)NULL,G__setup_memvarFairDetector,G__setup_memfuncFairDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairGenericStack),sizeof(FairGenericStack),-1,327424,(char*)NULL,G__setup_memvarFairGenericStack,G__setup_memfuncFairGenericStack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairPrimaryGenerator),sizeof(FairPrimaryGenerator),-1,327424,(char*)NULL,G__setup_memvarFairPrimaryGenerator,G__setup_memfuncFairPrimaryGenerator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairTrajFilter),sizeof(FairTrajFilter),-1,3840,(char*)NULL,G__setup_memvarFairTrajFilter,G__setup_memfuncFairTrajFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairVolume),sizeof(FairVolume),-1,327424,"Volume Definition",G__setup_memvarFairVolume,G__setup_memfuncFairVolume);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMCApplication),sizeof(FairMCApplication),-1,327424,"Interface to MonteCarlo application",G__setup_memvarFairMCApplication,G__setup_memfuncFairMCApplication);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_multimaplEintcOFairVolumemUcOlesslEintgRcOallocatorlEpairlEconstsPintcOFairVolumemUgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMCParticleType);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairParticle),sizeof(FairParticle),-1,327424,"Extended TParticle",G__setup_memvarFairParticle,G__setup_memfuncFairParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairModule),sizeof(FairModule),-1,130816,(char*)NULL,G__setup_memvarFairModule,G__setup_memfuncFairModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunSim),sizeof(FairRunSim),-1,65280,(char*)NULL,G__setup_memvarFairRunSim,G__setup_memfuncFairRunSim);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMultiLinkedData),sizeof(FairMultiLinkedData),-1,324864,(char*)NULL,G__setup_memvarFairMultiLinkedData,G__setup_memfuncFairMultiLinkedData);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMultiLinkedData_Interface),sizeof(FairMultiLinkedData_Interface),-1,324864,(char*)NULL,G__setup_memvarFairMultiLinkedData_Interface,G__setup_memfuncFairMultiLinkedData_Interface);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TGeoTrack);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairTimeStampmUgRcOallocatorlEpairlEdoublecOFairTimeStampmUgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_multimaplEdoublecOpairlEdoublecOFairTimeStampmUgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOpairlEdoublecOFairTimeStampmUgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairSource),sizeof(FairSource),-1,30468,(char*)NULL,G__setup_memvarFairSource,G__setup_memfuncFairSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunOnline),sizeof(FairRunOnline),-1,65280,(char*)NULL,G__setup_memvarFairRunOnline,G__setup_memfuncFairRunOnline);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairLinkManager),sizeof(FairLinkManager),-1,294656,"Root IO manager",G__setup_memvarFairLinkManager,G__setup_memfuncFairLinkManager);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairContainer);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairBaseContFact),sizeof(FairBaseContFact),-1,62720,(char*)NULL,G__setup_memvarFairBaseContFact,G__setup_memfuncFairBaseContFact);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairDbObjTableMap);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairParamList);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairParGenericSet);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TGeoMatrix);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TGeoNode);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TGeoManager);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairBaseParSet),sizeof(FairBaseParSet),-1,65280,(char*)NULL,G__setup_memvarFairBaseParSet,G__setup_memfuncFairBaseParSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairGeoParSet),sizeof(FairGeoParSet),-1,65280,(char*)NULL,G__setup_memvarFairGeoParSet,G__setup_memfuncFairGeoParSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairVolumeList),sizeof(FairVolumeList),-1,294656,"Volume List",G__setup_memvarFairVolumeList,G__setup_memfuncFairVolumeList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairGeaneApplication),sizeof(FairGeaneApplication),-1,327424,"Interface to MonteCarlo application",G__setup_memvarFairGeaneApplication,G__setup_memfuncFairGeaneApplication);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairGenerator),sizeof(FairGenerator),-1,327425,(char*)NULL,G__setup_memvarFairGenerator,G__setup_memfuncFairGenerator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TMCProcess);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVirtualMCStack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunIdGenerator),sizeof(FairRunIdGenerator),-1,1280,(char*)NULL,G__setup_memvarFairRunIdGenerator,G__setup_memfuncFairRunIdGenerator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRunIdGeneratorcLcLuuid);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRecoEventHeader),sizeof(FairRecoEventHeader),-1,324864,(char*)NULL,G__setup_memvarFairRecoEventHeader,G__setup_memfuncFairRecoEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairEventBuilder),sizeof(FairEventBuilder),-1,324872,(char*)NULL,G__setup_memvarFairEventBuilder,G__setup_memfuncFairEventBuilder);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairEventBuilderManager),sizeof(FairEventBuilderManager),-1,324865,(char*)NULL,G__setup_memvarFairEventBuilderManager,G__setup_memfuncFairEventBuilderManager);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEFairEventBuildermUcOallocatorlEFairEventBuildermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_vectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOFairRecoEventHeadermUgRcOallocatorlEpairlEdoublecOFairRecoEventHeadermUgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairFileInfo),sizeof(FairFileInfo),-1,327424,(char*)NULL,G__setup_memvarFairFileInfo,G__setup_memfuncFairFileInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairHit),sizeof(FairHit),-1,324864,(char*)NULL,G__setup_memvarFairHit,G__setup_memfuncFairHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMCPoint),sizeof(FairMCPoint),-1,324864,(char*)NULL,G__setup_memvarFairMCPoint,G__setup_memfuncFairMCPoint);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRadLenPoint),sizeof(FairRadLenPoint),-1,324864,(char*)NULL,G__setup_memvarFairRadLenPoint,G__setup_memfuncFairRadLenPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRadMapPoint),sizeof(FairRadMapPoint),-1,324864,(char*)NULL,G__setup_memvarFairRadMapPoint,G__setup_memfuncFairRadMapPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairTrackParam),sizeof(FairTrackParam),-1,327424,(char*)NULL,G__setup_memvarFairTrackParam,G__setup_memfuncFairTrackParam);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_TVirtualMagField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairFieldFactory),sizeof(FairFieldFactory),-1,265984,(char*)NULL,G__setup_memvarFairFieldFactory,G__setup_memfuncFairFieldFactory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRKPropagator),sizeof(FairRKPropagator),-1,327168,(char*)NULL,G__setup_memvarFairRKPropagator,G__setup_memfuncFairRKPropagator);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_s_ve10_1);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_s_ves10_1);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_s_bufhe);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_s_evt_channel);
   G__get_linked_tagnum_fwd(&G__G__BaseDictLN_s_filhe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairUnpack),sizeof(FairUnpack),-1,62468,(char*)NULL,G__setup_memvarFairUnpack,G__setup_memfuncFairUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairMbsSource),sizeof(FairMbsSource),-1,30466,(char*)NULL,G__setup_memvarFairMbsSource,G__setup_memfuncFairMbsSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairLmdSource),sizeof(FairLmdSource),-1,30464,(char*)NULL,G__setup_memvarFairLmdSource,G__setup_memfuncFairLmdSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_MRevBuffer),sizeof(MRevBuffer),-1,65024,"prototype for remote event buffer",G__setup_memvarMRevBuffer,G__setup_memfuncMRevBuffer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_REvent),sizeof(REvent),-1,32512,"prototype for event",G__setup_memvarREvent,G__setup_memfuncREvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__BaseDictLN_FairRemoteSource),sizeof(FairRemoteSource),-1,62976,(char*)NULL,G__setup_memvarFairRemoteSource,G__setup_memfuncFairRemoteSource);
}
extern "C" void G__cpp_setupG__BaseDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__BaseDict()");
  G__set_cpp_environmentG__BaseDict();
  G__cpp_setup_tagtableG__BaseDict();

  G__cpp_setup_inheritanceG__BaseDict();

  G__cpp_setup_typetableG__BaseDict();

  G__cpp_setup_memvarG__BaseDict();

  G__cpp_setup_memfuncG__BaseDict();
  G__cpp_setup_globalG__BaseDict();
  G__cpp_setup_funcG__BaseDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__BaseDict();
  return;
}
class G__cpp_setup_initG__BaseDict {
  public:
    G__cpp_setup_initG__BaseDict() { G__add_setup_func("G__BaseDict",(G__incsetup)(&G__cpp_setupG__BaseDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__BaseDict() { G__remove_setup_func("G__BaseDict"); }
};
G__cpp_setup_initG__BaseDict G__cpp_setup_initializerG__BaseDict;

