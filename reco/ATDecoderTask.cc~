
#include "ATDecoderTask.hh"

// FAIRROOT classes
#include "FairRootManager.h"
#include "FairRun.h"
#include "FairRuntimeDb.h"

ClassImp(ATDecoderTask);

ATDecoderTask::ATDecoderTask()
{
  fLogger = FairLogger::GetLogger();

  fDecoder = NULL;
  fDataNum = 0;

  fUseInternalPedestal = kFALSE;
  fStartTb = 3;
 // fAverageTbs = 20;
  //fPedestalFile = "";
  //fPedestalRMSFactor = 0;
  fUseFPNPedestal = kFALSE;

  fNumTbs = 512;

 // fGainCalibrationFile = "";
 // fGainConstant = -9999;
 // fGainSlope = -9999;

 // fSignalDelayFile = "";

  fIsPersistence = kFALSE;

  fPar = NULL;
  fRawEventArray = new TClonesArray("ATRawEvent");
}

ATDecoderTask::~ATDecoderTask()
{
}

void ATDecoderTask::SetPersistence(Bool_t value)                           { fIsPersistence = value; }
void ATDecoderTask::SetNumTbs(Int_t numTbs)                                { fNumTbs = numTbs; }
void ATDecoderTask::AddData(TString filename)                              { fDataList.push_back(filename); }
void ATDecoderTask::SetData(Int_t value)                                   { fDataNum = value; }
Bool_t ATDecoderTask::SetMap(Char_t *map)                                    { fMap = map; }
void ATDecoderTask::SetInternalPedestal(Int_t startTb, Int_t averageTbs)   { fUseInternalPedestal = kTRUE; fStartTb = startTb; fAverageTbs = averageTbs; } 
void ATDecoderTask::SetFPNPedestal()                                       { fUseFPNPedestal = kTRUE; fUseInternalPedestal = kFALSE; fPedestalFile = ""; }
//void ATDecoderTask::SetPedestalData(TString filename, Double_t rmsFactor)  { fPedestalFile = filename; fPedestalRMSFactor = rmsFactor; }
//void ATDecoderTask::SetGainCalibrationData(TString filename)               { fGainCalibrationFile = filename; }
//void ATDecoderTask::SetGainBase(Double_t constant, Double_t slope)         { fGainConstant = constant; fGainSlope = slope; }
//void ATDecoderTask::SetSignalDelayData(TString filename)                   { fSignalDelayFile = filename; }

InitStatus
ATDecoderTask::Init()
{
  FairRootManager *ioMan = FairRootManager::Instance();
  if (ioMan == 0) {
    fLogger -> Error(MESSAGE_ORIGIN, "Cannot find RootManager!");

    return kERROR;
  }

  ioMan -> Register("ATRawEvent", "ATTPC", fRawEventArray, fIsPersistence);

  fDecoder = new ATCore();
  for (Int_t iFile = 0; iFile < fDataList.size(); iFile++)
  fDecoder -> AddData(fDataList.at(iFile));
  fDecoder -> SetData(fDataNum);
  fDecoder -> SetNumTbs(fNumTbs);
 
  Bool_t kMapIn = fDecoder -> SetATTPCMap(fMap);
  //std::cout<<kMapIn<<std::endl;
   if (!kMapIn) {
      fLogger -> Error(MESSAGE_ORIGIN, "Cannot find ATTPC Map!");

      return kERROR;
    }


  if (fUseInternalPedestal)
     fDecoder -> SetInternalPedestal(fStartTb, fAverageTbs);

 /* if (!fPedestalFile.EqualTo("")) {
    Bool_t isSetPedestalData = fDecoder -> SetPedestalData(fPedestalFile, fPedestalRMSFactor);
    if (!isSetPedestalData) {
      fLogger -> Error(MESSAGE_ORIGIN, "Cannot find pedestal data file!");
      
      return kERROR;
    }

    fLogger -> Info(MESSAGE_ORIGIN, "Pedestal data is set!");
  }*/

   if (fUseFPNPedestal)
     fDecoder -> SetFPNPedestal();

  /*if (fGainCalibrationFile.EqualTo(""))
    fLogger -> Info(MESSAGE_ORIGIN, "Gain not calibrated!");
  else {
    Bool_t isSetGainCalibrationData = fDecoder -> SetGainCalibrationData(fGainCalibrationFile);
    if (!isSetGainCalibrationData) {
      fLogger -> Error(MESSAGE_ORIGIN, "Cannot find gain calibration data file!");
      
      return kERROR;
    }

    if (fGainConstant == -9999 || fGainSlope == -9999) {
      fLogger -> Error(MESSAGE_ORIGIN, "Cannot find gain calibration data file!");

      return kERROR;
    }

    fDecoder -> SetGainBase(fGainConstant, fGainSlope);
    fLogger -> Info(MESSAGE_ORIGIN, "Gain calibration data is set!");
  }*/

 /*if (fSignalDelayFile.EqualTo(""))
    fLogger -> Info(MESSAGE_ORIGIN, "Signal not delayed!");
  else {
    Bool_t isSetSignalDelayData = fDecoder -> SetSignalDelayData(fSignalDelayFile);
    if (!isSetSignalDelayData) {
      fLogger -> Error(MESSAGE_ORIGIN, "Cannot find signal delay data file!");
      
      return kERROR;
    }

    fLogger -> Info(MESSAGE_ORIGIN, "Signal delay data is set!");
  }*/

  return kSUCCESS;
}

void
ATDecoderTask::SetParContainers()
{
  FairRun *run = FairRun::Instance();
  if (!run)
    fLogger -> Fatal(MESSAGE_ORIGIN, "No analysis run!");

  FairRuntimeDb *db = run -> GetRuntimeDb();
  if (!db)
    fLogger -> Fatal(MESSAGE_ORIGIN, "No runtime database!");

  fPar = (ATDigiPar *) db -> getContainer("ATDigiPar");
  if (!fPar)
    fLogger -> Fatal(MESSAGE_ORIGIN, "Cannot find ATDigiPar!");
}

void
ATDecoderTask::Exec(Option_t *opt)
{
  fRawEventArray -> Delete();

  ATRawEvent *rawEvent = fDecoder -> GetRawEvent();
  
  new ((*fRawEventArray)[0]) ATRawEvent(rawEvent);
}
